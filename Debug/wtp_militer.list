
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000629c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d8  080064d8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080064d8  080064d8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064d8  080064d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080064e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000080  0800655c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200012ac  0800655c  000212ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148ee  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003811  00000000  00000000  00034993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  000381a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  000393f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3f2  00000000  00000000  0003a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013da5  00000000  00000000  000548f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a77  00000000  00000000  00068697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc10e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f68  00000000  00000000  000fc160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08006394 	.word	0x08006394

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08006394 	.word	0x08006394

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__gesf2>:
 8000af4:	f04f 3cff 	mov.w	ip, #4294967295
 8000af8:	e006      	b.n	8000b08 <__cmpsf2+0x4>
 8000afa:	bf00      	nop

08000afc <__lesf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	e002      	b.n	8000b08 <__cmpsf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__cmpsf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b18:	bf18      	it	ne
 8000b1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1e:	d011      	beq.n	8000b44 <__cmpsf2+0x40>
 8000b20:	b001      	add	sp, #4
 8000b22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b26:	bf18      	it	ne
 8000b28:	ea90 0f01 	teqne	r0, r1
 8000b2c:	bf58      	it	pl
 8000b2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b32:	bf88      	it	hi
 8000b34:	17c8      	asrhi	r0, r1, #31
 8000b36:	bf38      	it	cc
 8000b38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b3c:	bf18      	it	ne
 8000b3e:	f040 0001 	orrne.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b48:	d102      	bne.n	8000b50 <__cmpsf2+0x4c>
 8000b4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b4e:	d105      	bne.n	8000b5c <__cmpsf2+0x58>
 8000b50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b54:	d1e4      	bne.n	8000b20 <__cmpsf2+0x1c>
 8000b56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5a:	d0e1      	beq.n	8000b20 <__cmpsf2+0x1c>
 8000b5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_cfrcmple>:
 8000b64:	4684      	mov	ip, r0
 8000b66:	4608      	mov	r0, r1
 8000b68:	4661      	mov	r1, ip
 8000b6a:	e7ff      	b.n	8000b6c <__aeabi_cfcmpeq>

08000b6c <__aeabi_cfcmpeq>:
 8000b6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b6e:	f7ff ffc9 	bl	8000b04 <__cmpsf2>
 8000b72:	2800      	cmp	r0, #0
 8000b74:	bf48      	it	mi
 8000b76:	f110 0f00 	cmnmi.w	r0, #0
 8000b7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b7c <__aeabi_fcmpeq>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff fff4 	bl	8000b6c <__aeabi_cfcmpeq>
 8000b84:	bf0c      	ite	eq
 8000b86:	2001      	moveq	r0, #1
 8000b88:	2000      	movne	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fcmplt>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffea 	bl	8000b6c <__aeabi_cfcmpeq>
 8000b98:	bf34      	ite	cc
 8000b9a:	2001      	movcc	r0, #1
 8000b9c:	2000      	movcs	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fcmple>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffe0 	bl	8000b6c <__aeabi_cfcmpeq>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmpge>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffd2 	bl	8000b64 <__aeabi_cfrcmple>
 8000bc0:	bf94      	ite	ls
 8000bc2:	2001      	movls	r0, #1
 8000bc4:	2000      	movhi	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmpgt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffc8 	bl	8000b64 <__aeabi_cfrcmple>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_f2uiz>:
 8000be0:	0042      	lsls	r2, r0, #1
 8000be2:	d20e      	bcs.n	8000c02 <__aeabi_f2uiz+0x22>
 8000be4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000be8:	d30b      	bcc.n	8000c02 <__aeabi_f2uiz+0x22>
 8000bea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bf2:	d409      	bmi.n	8000c08 <__aeabi_f2uiz+0x28>
 8000bf4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfc:	fa23 f002 	lsr.w	r0, r3, r2
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr
 8000c08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c0c:	d101      	bne.n	8000c12 <__aeabi_f2uiz+0x32>
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	d102      	bne.n	8000c18 <__aeabi_f2uiz+0x38>
 8000c12:	f04f 30ff 	mov.w	r0, #4294967295
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <GetPage>:
/* STM32F103 have 128 PAGES (Page 0 to Page 127) of 1 KB each. This makes up 128 KB Flash Memory
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	for (int indx = 0; indx < 128; indx++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	e016      	b.n	8000c5c <GetPage+0x3c>
		if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1))))
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c34:	3301      	adds	r3, #1
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d20b      	bcs.n	8000c56 <GetPage+0x36>
				&& (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) {
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c44:	029b      	lsls	r3, r3, #10
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d304      	bcc.n	8000c56 <GetPage+0x36>
			return (0x08000000 + FLASH_PAGE_SIZE * indx);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	e006      	b.n	8000c64 <GetPage+0x44>
	for (int indx = 0; indx < 128; indx++) {
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c60:	dde5      	ble.n	8000c2e <GetPage+0xe>
		}
	}

	return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
	...

08000c70 <Flash_Write_Data>:
	float float_variable = thing.a;
	return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data,
		uint16_t numberofwords) {
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000c82:	f002 f995 	bl	8002fb0 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ffca 	bl	8000c20 <GetPage>
 8000c8c:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000c9a:	69f8      	ldr	r0, [r7, #28]
 8000c9c:	f7ff ffc0 	bl	8000c20 <GetPage>
 8000ca0:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <Flash_Write_Data+0xb4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <Flash_Write_Data+0xb4>)
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	0a9b      	lsrs	r3, r3, #10
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <Flash_Write_Data+0xb4>)
 8000cba:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <Flash_Write_Data+0xb4>)
 8000cc4:	f002 fa66 	bl	8003194 <HAL_FLASHEx_Erase>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01f      	beq.n	8000d0e <Flash_Write_Data+0x9e>
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 8000cce:	f002 f9a5 	bl	800301c <HAL_FLASH_GetError>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e022      	b.n	8000d1c <Flash_Write_Data+0xac>

	/* Program the user Flash area word by word*/

	while (sofar < numberofwords) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
				Data[sofar]) == HAL_OK) {
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	4615      	mov	r5, r2
 8000ce6:	4622      	mov	r2, r4
 8000ce8:	462b      	mov	r3, r5
 8000cea:	68f9      	ldr	r1, [r7, #12]
 8000cec:	2002      	movs	r0, #2
 8000cee:	f002 f8ef 	bl	8002ed0 <HAL_FLASH_Program>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d106      	bne.n	8000d06 <Flash_Write_Data+0x96>
			StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	60fb      	str	r3, [r7, #12]
			sofar++;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
 8000d04:	e003      	b.n	8000d0e <Flash_Write_Data+0x9e>
		} else {
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 8000d06:	f002 f989 	bl	800301c <HAL_FLASH_GetError>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	e006      	b.n	8000d1c <Flash_Write_Data+0xac>
	while (sofar < numberofwords) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbdf      	blt.n	8000cd6 <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000d16:	f002 f971 	bl	8002ffc <HAL_FLASH_Lock>

	return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdb0      	pop	{r4, r5, r7, pc}
 8000d24:	2000009c 	.word	0x2000009c

08000d28 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	80fb      	strh	r3, [r7, #6]
	while (1) {

		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3304      	adds	r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3304      	adds	r3, #4
 8000d48:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	80fa      	strh	r2, [r7, #6]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d000      	beq.n	8000d56 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000d54:	e7ef      	b.n	8000d36 <Flash_Read_Data+0xe>
			break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	0000      	movs	r0, r0
 8000d64:	0000      	movs	r0, r0
	...

08000d68 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7f1b      	ldrb	r3, [r3, #28]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	f040 8082 	bne.w	8000e7e <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (ultrasonic1.Is_First_Captured == 0) // if the first value is not captured
 8000d7a:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d7c:	7b1b      	ldrb	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11a      	bne.n	8000db8 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f003 fd0f 	bl	80047a8 <HAL_TIM_ReadCapturedValue>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d8e:	6013      	str	r3, [r2, #0]
			TIM_CHANNEL_1); // read the first value
			ultrasonic1.Is_First_Captured = 1; // set the first captured as true
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a1a      	ldr	r2, [r3, #32]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 020a 	bic.w	r2, r2, #10
 8000da4:	621a      	str	r2, [r3, #32]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a1a      	ldr	r2, [r3, #32]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0202 	orr.w	r2, r2, #2
 8000db4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 8000db6:	e062      	b.n	8000e7e <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured == 1) // if the first is already captured
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dba:	7b1b      	ldrb	r3, [r3, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d15e      	bne.n	8000e7e <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f003 fcf0 	bl	80047a8 <HAL_TIM_ReadCapturedValue>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dcc:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1) {
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d907      	bls.n	8000df2 <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000de4:	685a      	ldr	r2, [r3, #4]
						- ultrasonic1.IC_Val1;
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1ad3      	subs	r3, r2, r3
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dee:	6093      	str	r3, [r2, #8]
 8000df0:	e00f      	b.n	8000e12 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2) {
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d909      	bls.n	8000e12 <HAL_TIM_IC_CaptureCallback+0xaa>
						+ ultrasonic1.IC_Val2;
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e00:	685a      	ldr	r2, [r3, #4]
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e04:	681b      	ldr	r3, [r3, #0]
						+ ultrasonic1.IC_Val2;
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e0c:	33ff      	adds	r3, #255	; 0xff
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 8000e0e:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e10:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034 / 2;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb90 	bl	800053c <__aeabi_ui2d>
 8000e1c:	a31a      	add	r3, pc, #104	; (adr r3, 8000e88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fc05 	bl	8000630 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e36:	f7ff fd25 	bl	8000884 <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fe07 	bl	8000a54 <__aeabi_d2f>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e4a:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a1a      	ldr	r2, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 020a 	bic.w	r2, r2, #10
 8000e60:	621a      	str	r2, [r3, #32]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a12      	ldr	r2, [r2, #32]
 8000e6c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0202 	bic.w	r2, r2, #2
 8000e7c:	60da      	str	r2, [r3, #12]
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	b020c49c 	.word	0xb020c49c
 8000e8c:	3fa16872 	.word	0x3fa16872
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	20000454 	.word	0x20000454

08000e98 <HAL_CAN_RxFifo1MsgPendingCallback>:
int canSetMode;

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000ea2:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f001 fbd8 	bl	800265c <HAL_CAN_GetRxMessage>

	if (RxHeader.IDE == CAN_ID_EXT) {
 8000eac:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d156      	bne.n	8000f62 <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
		uint8_t id = RxHeader.ExtId & 0xFF;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
		uint8_t cmd = RxHeader.ExtId >> 8;
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	73bb      	strb	r3, [r7, #14]

		if (id == 255 || id == selfID) {
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2bff      	cmp	r3, #255	; 0xff
 8000ec6:	d004      	beq.n	8000ed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d147      	bne.n	8000f62 <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
			switch (cmd) {
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2b23      	cmp	r3, #35	; 0x23
 8000ed6:	d006      	beq.n	8000ee6 <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 8000ed8:	2b23      	cmp	r3, #35	; 0x23
 8000eda:	dc45      	bgt.n	8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d016      	beq.n	8000f0e <HAL_CAN_RxFifo1MsgPendingCallback+0x76>
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d021      	beq.n	8000f28 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>

		}
	}
	//}

}
 8000ee4:	e040      	b.n	8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				canSetMode = -1;
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	601a      	str	r2, [r3, #0]
				ind = 0;
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
				canSetMode = buffer_get_int32(RxData, &ind);
 8000ef4:	4922      	ldr	r1, [pc, #136]	; (8000f80 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000ef8:	f000 f886 	bl	8001008 <buffer_get_int32>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000f00:	6013      	str	r3, [r2, #0]
				setMode(canSetMode);
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fa6e 	bl	80013e8 <setMode>
				break;
 8000f0c:	e02c      	b.n	8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000f16:	18d0      	adds	r0, r2, r3
 8000f18:	491b      	ldr	r1, [pc, #108]	; (8000f88 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	f005 f963 	bl	80061ec <memcpy>
				break;
 8000f26:	e01f      	b.n	8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				rxbuf_ind = (unsigned int) RxData[0] << 8;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f30:	6013      	str	r3, [r2, #0]
				rxbuf_ind |= RxData[1];
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000f34:	785b      	ldrb	r3, [r3, #1]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f40:	6013      	str	r3, [r2, #0]
				if (rxbuf_ind < RX_BUFFER_SIZE) {
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b3f      	cmp	r3, #63	; 0x3f
 8000f48:	d80d      	bhi.n	8000f66 <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
					memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000f50:	1898      	adds	r0, r3, r2
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f005 f946 	bl	80061ec <memcpy>
				break;
 8000f60:	e001      	b.n	8000f66 <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
		}
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				break;
 8000f66:	bf00      	nop
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000fc 	.word	0x200000fc
 8000f74:	200000c0 	.word	0x200000c0
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000150 	.word	0x20000150
 8000f80:	20000108 	.word	0x20000108
 8000f84:	2000010c 	.word	0x2000010c
 8000f88:	200000fd 	.word	0x200000fd
 8000f8c:	2000014c 	.word	0x2000014c
 8000f90:	200000fe 	.word	0x200000fe

08000f94 <buffer_append_int32>:

void buffer_append_int32(uint8_t *buffer, int32_t number, int32_t *index) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1618      	asrs	r0, r3, #24
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1c59      	adds	r1, r3, #1
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6011      	str	r1, [r2, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2c2      	uxtb	r2, r0
 8000fb6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1418      	asrs	r0, r3, #16
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1c59      	adds	r1, r3, #1
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6011      	str	r1, [r2, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2c2      	uxtb	r2, r0
 8000fce:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1218      	asrs	r0, r3, #8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1c59      	adds	r1, r3, #1
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6011      	str	r1, [r2, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b2c2      	uxtb	r2, r0
 8000fe6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	1c59      	adds	r1, r3, #1
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6011      	str	r1, [r2, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	int32_t res = ((uint32_t) buffer[*index]) << 24
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	061a      	lsls	r2, r3, #24
			| ((uint32_t) buffer[*index + 1]) << 16
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	440b      	add	r3, r1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	431a      	orrs	r2, r3
			| ((uint32_t) buffer[*index + 2]) << 8
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3302      	adds	r3, #2
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	440b      	add	r3, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4313      	orrs	r3, r2
			| ((uint32_t) buffer[*index + 3]);
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	3203      	adds	r2, #3
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440a      	add	r2, r1
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	4313      	orrs	r3, r2
	int32_t res = ((uint32_t) buffer[*index]) << 24
 800104e:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	1d1a      	adds	r2, r3, #4
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	601a      	str	r2, [r3, #0]
	return res;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
	...

08001068 <comm_can_transmit_eid>:

void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d901      	bls.n	8001080 <comm_can_transmit_eid+0x18>
		len = 8;
 800107c:	2308      	movs	r3, #8
 800107e:	71fb      	strb	r3, [r7, #7]
	}

	TxHeader.IDE = CAN_ID_EXT;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <comm_can_transmit_eid+0x50>)
 8001082:	2204      	movs	r2, #4
 8001084:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = id;
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <comm_can_transmit_eid+0x50>)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <comm_can_transmit_eid+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = len;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <comm_can_transmit_eid+0x50>)
 8001096:	6113      	str	r3, [r2, #16]
	memcpy(TxData, data, len);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	461a      	mov	r2, r3
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <comm_can_transmit_eid+0x54>)
 80010a0:	f005 f8a4 	bl	80061ec <memcpy>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <comm_can_transmit_eid+0x58>)
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <comm_can_transmit_eid+0x54>)
 80010a8:	4903      	ldr	r1, [pc, #12]	; (80010b8 <comm_can_transmit_eid+0x50>)
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <comm_can_transmit_eid+0x5c>)
 80010ac:	f001 f9fc 	bl	80024a8 <HAL_CAN_AddTxMessage>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000dc 	.word	0x200000dc
 80010bc:	200000f4 	.word	0x200000f4
 80010c0:	20000104 	.word	0x20000104
 80010c4:	2000042c 	.word	0x2000042c

080010c8 <comm_can_db_signal>:

void comm_can_db_signal(uint8_t controller_id, int command) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) command, &send_index);
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	6839      	ldr	r1, [r7, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff56 	bl	8000f94 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t) 35 << 8), buffer,
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f107 0108 	add.w	r1, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffb6 	bl	8001068 <comm_can_transmit_eid>
			send_index);
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <vApplicationGetIdleTaskMemory+0x28>)
 8001114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <vApplicationGetIdleTaskMemory+0x2c>)
 800111a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000154 	.word	0x20000154
 8001130:	20000208 	.word	0x20000208

08001134 <minuteToSecond>:
float volume, flow;
int signalCounter;

// kumpulan fungsi

uint32_t minuteToSecond(float value) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	return value * 60 * 1000;
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <minuteToSecond+0x2c>)
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff f806 	bl	8000150 <__aeabi_fmul>
 8001144:	4603      	mov	r3, r0
 8001146:	4907      	ldr	r1, [pc, #28]	; (8001164 <minuteToSecond+0x30>)
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f801 	bl	8000150 <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fd45 	bl	8000be0 <__aeabi_f2uiz>
 8001156:	4603      	mov	r3, r0

}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	42700000 	.word	0x42700000
 8001164:	447a0000 	.word	0x447a0000

08001168 <delay_s>:

void delay_s(uint8_t value) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	osDelay(value * 1000);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fe77 	bl	8004e70 <osDelay>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <backWash>:

void backWash(void) {
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0

	Control_Valve_1(OFF);
 8001190:	2001      	movs	r0, #1
 8001192:	f000 fb03 	bl	800179c <Control_Valve_1>
	//osDelay(1000); // delay menghabiskan air pada selang
	Pump_1(OFF);
 8001196:	2001      	movs	r0, #1
 8001198:	f000 fb3e 	bl	8001818 <Pump_1>
	delay_s(2); // delay menghabiskan air pada selang
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ffe3 	bl	8001168 <delay_s>
	Ozone(OFF);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 fb26 	bl	80017f4 <Ozone>
	Compressor(OFF);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 fb09 	bl	80017c0 <Compressor>
	//Pump_2(OFF);

	delay_s(20); // delay untuk menunggu air pada rdf kosong
 80011ae:	2014      	movs	r0, #20
 80011b0:	f7ff ffda 	bl	8001168 <delay_s>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80011b4:	2100      	movs	r1, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ff86 	bl	80010c8 <comm_can_db_signal>
	delay_s(1); // delay agar motor tidak menyentak
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ffd3 	bl	8001168 <delay_s>
	comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 80011c2:	2104      	movs	r1, #4
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff7f 	bl	80010c8 <comm_can_db_signal>
	delay_s(3);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff ffcc 	bl	8001168 <delay_s>
	Pump_3(ON); // pompa backwash menyala
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 fb45 	bl	8001860 <Pump_3>

	uint8_t i = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]

	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80011da:	e006      	b.n	80011ea <backWash+0x60>
		osDelay(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f003 fe46 	bl	8004e70 <osDelay>
		i++;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b1e      	cmp	r3, #30
 80011ee:	d9f5      	bls.n	80011dc <backWash+0x52>
	}
	Pump_3(OFF); //pompa backwash mati
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 fb35 	bl	8001860 <Pump_3>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80011f6:	2100      	movs	r1, #0
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff65 	bl	80010c8 <comm_can_db_signal>
	delay_s(5);
 80011fe:	2005      	movs	r0, #5
 8001200:	f7ff ffb2 	bl	8001168 <delay_s>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <process2>:
	flowCheck = 0;
	buffMode[0] = 0;
}

void process2(void) // opsi sensor water level
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	//timerEAB[0] = 1800;

	while (timerEAB[0] > 0) {
 8001210:	e005      	b.n	800121e <process2+0x12>
		EAB(ON);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 fa9a 	bl	800174c <EAB>
		osDelay(10);
 8001218:	200a      	movs	r0, #10
 800121a:	f003 fe29 	bl	8004e70 <osDelay>
	while (timerEAB[0] > 0) {
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <process2+0x80>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	dcf5      	bgt.n	8001212 <process2+0x6>
	}

	EAB(OFF);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fa90 	bl	800174c <EAB>
	delay_s(30);
 800122c:	201e      	movs	r0, #30
 800122e:	f7ff ff9b 	bl	8001168 <delay_s>

	label2:

	comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 8001232:	2102      	movs	r1, #2
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff47 	bl	80010c8 <comm_can_db_signal>

	delay_s(15); //delay untuk menunggu rdf putaran penuh
 800123a:	200f      	movs	r0, #15
 800123c:	f7ff ff94 	bl	8001168 <delay_s>

	Control_Valve_1(ON);
 8001240:	2000      	movs	r0, #0
 8001242:	f000 faab 	bl	800179c <Control_Valve_1>
	Pump_1(ON);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 fae6 	bl	8001818 <Pump_1>
	Ozone(ON);
 800124c:	2000      	movs	r0, #0
 800124e:	f000 fad1 	bl	80017f4 <Ozone>
	Compressor(ON);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 fab4 	bl	80017c0 <Compressor>
	Pump_2(ON);
 8001258:	2000      	movs	r0, #0
 800125a:	f000 faef 	bl	800183c <Pump_2>

	delay_s(30);
 800125e:	201e      	movs	r0, #30
 8001260:	f7ff ff82 	bl	8001168 <delay_s>

	while (1) {
		osDelay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001268:	f003 fe02 	bl	8004e70 <osDelay>
		if (flow < 4.0) {
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <process2+0x84>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fc8b 	bl	8000b90 <__aeabi_fcmplt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <process2+0x7a>
			backWash();
 8001280:	f7ff ff83 	bl	800118a <backWash>
			break;
 8001284:	e000      	b.n	8001288 <process2+0x7c>
		osDelay(1000);
 8001286:	e7ed      	b.n	8001264 <process2+0x58>
		}
	}

	if (1) {
		goto label2;
 8001288:	e7d3      	b.n	8001232 <process2+0x26>
 800128a:	bf00      	nop
 800128c:	20000004 	.word	0x20000004
 8001290:	20000424 	.word	0x20000424

08001294 <process3>:
	Pump_2(OFF);
	buffMode[0] = 0;
	timerEAB[0] = 120;
}

void process3(void) { // opsi backwash ditrigger counter
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

	while (timerEAB[0] > 0) {
 800129a:	e002      	b.n	80012a2 <process3+0xe>
		EAB(ON);
 800129c:	2000      	movs	r0, #0
 800129e:	f000 fa55 	bl	800174c <EAB>
	while (timerEAB[0] > 0) {
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <process3+0x138>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dcf8      	bgt.n	800129c <process3+0x8>
	}

	EAB(OFF);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fa4e 	bl	800174c <EAB>
	osDelay(minuteToSecond(1));
 80012b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012b4:	f7ff ff3e 	bl	8001134 <minuteToSecond>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fdd8 	bl	8004e70 <osDelay>
	label2: comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 80012c0:	2102      	movs	r1, #2
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ff00 	bl	80010c8 <comm_can_db_signal>

	osDelay(minuteToSecond(0.5));
 80012c8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80012cc:	f7ff ff32 	bl	8001134 <minuteToSecond>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fdcc 	bl	8004e70 <osDelay>

	Control_Valve_1(ON);
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 fa5f 	bl	800179c <Control_Valve_1>
	Pump_1(ON);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fa9a 	bl	8001818 <Pump_1>
	Ozone(ON);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 fa85 	bl	80017f4 <Ozone>
	Compressor(ON);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 fa68 	bl	80017c0 <Compressor>
	Pump_2(ON);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 faa3 	bl	800183c <Pump_2>

	osDelay(minuteToSecond(0.3));
 80012f6:	4836      	ldr	r0, [pc, #216]	; (80013d0 <process3+0x13c>)
 80012f8:	f7ff ff1c 	bl	8001134 <minuteToSecond>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fdb6 	bl	8004e70 <osDelay>

	while (1) {
		osDelay(5000);
 8001304:	f241 3088 	movw	r0, #5000	; 0x1388
 8001308:	f003 fdb2 	bl	8004e70 <osDelay>
		if (flow < 1) {
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <process3+0x140>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fc3b 	bl	8000b90 <__aeabi_fcmplt>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d033      	beq.n	8001388 <process3+0xf4>
			osDelay(minuteToSecond(1 / 3)); // delay untuk menunggu air pada rdf kosong
 8001320:	f04f 0000 	mov.w	r0, #0
 8001324:	f7ff ff06 	bl	8001134 <minuteToSecond>
 8001328:	4603      	mov	r3, r0
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fda0 	bl	8004e70 <osDelay>
			comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 8001330:	2104      	movs	r1, #4
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fec8 	bl	80010c8 <comm_can_db_signal>
			flagBackwash = 1; // untuk memulai menghitung mundur timerBackwash pada Task Timer
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <process3+0x144>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
			timerBackwash[0] = 30; // timer untuk backwash 30 detik
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <process3+0x148>)
 8001340:	221e      	movs	r2, #30
 8001342:	601a      	str	r2, [r3, #0]
			break;
 8001344:	bf00      	nop
		}
	}

	Control_Valve_1(OFF);
 8001346:	2001      	movs	r0, #1
 8001348:	f000 fa28 	bl	800179c <Control_Valve_1>
	osDelay(1000); // delay menghabiskan air pada selang
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f003 fd8e 	bl	8004e70 <osDelay>
	Pump_1(OFF);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 fa5f 	bl	8001818 <Pump_1>
	osDelay(minuteToSecond(1 / 6)); // delay menghabiskan air pada selang
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	f7ff fee9 	bl	8001134 <minuteToSecond>
 8001362:	4603      	mov	r3, r0
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fd83 	bl	8004e70 <osDelay>
	Ozone(OFF);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fa42 	bl	80017f4 <Ozone>
	Compressor(OFF);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 fa25 	bl	80017c0 <Compressor>
	Pump_2(OFF);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fa60 	bl	800183c <Pump_2>
	Pump_3(ON);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 fa6f 	bl	8001860 <Pump_3>

	uint8_t i = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]

	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 8001386:	e007      	b.n	8001398 <process3+0x104>
		osDelay(5000);
 8001388:	e7bc      	b.n	8001304 <process3+0x70>
		osDelay(1000);
 800138a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138e:	f003 fd6f 	bl	8004e70 <osDelay>
		i++;
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	3301      	adds	r3, #1
 8001396:	71fb      	strb	r3, [r7, #7]
	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b1e      	cmp	r3, #30
 800139c:	d9f5      	bls.n	800138a <process3+0xf6>
	}
	Pump_3(OFF);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fa5e 	bl	8001860 <Pump_3>

	flagBackwash = 0;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <process3+0x144>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

	if (level) {
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <process3+0x14c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d000      	beq.n	80013b4 <process3+0x120>
		goto label2;
 80013b2:	e785      	b.n	80012c0 <process3+0x2c>
		// kembali ke awal
	}
	buffMode[0] = 0;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <process3+0x150>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	timerEAB[0] = 1800;
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <process3+0x138>)
 80013bc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80013c0:	601a      	str	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000004 	.word	0x20000004
 80013d0:	3e99999a 	.word	0x3e99999a
 80013d4:	20000424 	.word	0x20000424
 80013d8:	20000415 	.word	0x20000415
 80013dc:	20000420 	.word	0x20000420
 80013e0:	20000414 	.word	0x20000414
 80013e4:	2000041c 	.word	0x2000041c

080013e8 <setMode>:

void setMode(uint32_t value) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

	buffMode[0] = value;
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <setMode+0x18>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
//	Flash_Write_Data(EEPROMMode, (uint32_t*) buffMode, 1);
//	Flash_Read_Data(EEPROMMode, buffMode, 1);

}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	2000041c 	.word	0x2000041c

08001404 <setTimerEAB>:

void setTimerEAB(uint32_t value) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

	Flash_Write_Data(EEPROMTimerEAB, (uint32_t*) value, 1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <setTimerEAB+0x1c>)
 8001414:	f7ff fc2c 	bl	8000c70 <Flash_Write_Data>

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0801f840 	.word	0x0801f840

08001424 <Task2>:

}

// kumpulan task freeRTOS

void Task2(void const *argument) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (buffMode[0] == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <Task2+0x50>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d014      	beq.n	800145e <Task2+0x3a>
				{

		}

		else if (buffMode[0] == 2) // mode 2 untuk opsi menggunakan sensor water level
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <Task2+0x50>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d102      	bne.n	8001442 <Task2+0x1e>
				{
			process2();
 800143c:	f7ff fee6 	bl	800120c <process2>
 8001440:	e00d      	b.n	800145e <Task2+0x3a>
		}

		else if (buffMode[0] == 3) // mode 2 untuk opsi menggunakan sensor water level
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <Task2+0x50>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d102      	bne.n	8001450 <Task2+0x2c>
				{
			process3();
 800144a:	f7ff ff23 	bl	8001294 <process3>
 800144e:	e006      	b.n	800145e <Task2+0x3a>
		}

		else if (buffMode[0] == 0) {
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <Task2+0x50>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <Task2+0x3a>
			timerEAB[0] = 120;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <Task2+0x54>)
 800145a:	2278      	movs	r2, #120	; 0x78
 800145c:	601a      	str	r2, [r3, #0]
		}
		osDelay(1000);
 800145e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001462:	f003 fd05 	bl	8004e70 <osDelay>
		coba++;
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <Task2+0x58>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <Task2+0x58>)
 8001470:	701a      	strb	r2, [r3, #0]
		if (buffMode[0] == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001472:	e7db      	b.n	800142c <Task2+0x8>
 8001474:	2000041c 	.word	0x2000041c
 8001478:	20000004 	.word	0x20000004
 800147c:	20000416 	.word	0x20000416

08001480 <TaskTimer>:

	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (buffMode[0] == 2 || buffMode[0] == 1 || buffMode[0] == 3) { // jika mode bernilai 1/2/3 maka timer eab akan mulai hitung mundur
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <TaskTimer+0x7c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d007      	beq.n	80014a0 <TaskTimer+0x20>
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <TaskTimer+0x7c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d003      	beq.n	80014a0 <TaskTimer+0x20>
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <TaskTimer+0x7c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d105      	bne.n	80014ac <TaskTimer+0x2c>
			timerEAB[0]--;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <TaskTimer+0x80>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <TaskTimer+0x80>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e008      	b.n	80014be <TaskTimer+0x3e>
		}

		else if (flagBackwash == 1) {
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <TaskTimer+0x84>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d104      	bne.n	80014be <TaskTimer+0x3e>
			timerBackwash[0]--;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <TaskTimer+0x88>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <TaskTimer+0x88>)
 80014bc:	6013      	str	r3, [r2, #0]
		}
		flow = signalCounter / 7.5;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <TaskTimer+0x8c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f84a 	bl	800055c <__aeabi_i2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <TaskTimer+0x90>)
 80014ce:	f7ff f9d9 	bl	8000884 <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fabb 	bl	8000a54 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <TaskTimer+0x94>)
 80014e2:	6013      	str	r3, [r2, #0]
		signalCounter = 0;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <TaskTimer+0x8c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

		osDelay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ee:	f003 fcbf 	bl	8004e70 <osDelay>
		setTimerEAB(timerEAB);
 80014f2:	4b03      	ldr	r3, [pc, #12]	; (8001500 <TaskTimer+0x80>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff85 	bl	8001404 <setTimerEAB>
		if (buffMode[0] == 2 || buffMode[0] == 1 || buffMode[0] == 3) { // jika mode bernilai 1/2/3 maka timer eab akan mulai hitung mundur
 80014fa:	e7c5      	b.n	8001488 <TaskTimer+0x8>
 80014fc:	2000041c 	.word	0x2000041c
 8001500:	20000004 	.word	0x20000004
 8001504:	20000415 	.word	0x20000415
 8001508:	20000420 	.word	0x20000420
 800150c:	20000428 	.word	0x20000428
 8001510:	401e0000 	.word	0x401e0000
 8001514:	20000424 	.word	0x20000424

08001518 <TaskFlow>:

	}
	/* USER CODE END 5 */
}

void TaskFlow(void const *argument) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001520:	2120      	movs	r1, #32
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <TaskFlow+0x44>)
 8001524:	f002 f862 	bl	80035ec <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	73bb      	strb	r3, [r7, #14]
	uint8_t stateSensorPrv = -1;
 800152c:	23ff      	movs	r3, #255	; 0xff
 800152e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001530:	2120      	movs	r1, #32
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <TaskFlow+0x44>)
 8001534:	f002 f85a 	bl	80035ec <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	73bb      	strb	r3, [r7, #14]
		if (stateSensorNow != stateSensorPrv) {
 800153c:	7bba      	ldrb	r2, [r7, #14]
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	429a      	cmp	r2, r3
 8001542:	d006      	beq.n	8001552 <TaskFlow+0x3a>
			signalCounter++;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <TaskFlow+0x48>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <TaskFlow+0x48>)
 800154c:	6013      	str	r3, [r2, #0]
			stateSensorPrv = stateSensorNow;
 800154e:	7bbb      	ldrb	r3, [r7, #14]
 8001550:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f003 fc8c 	bl	8004e70 <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001558:	e7ea      	b.n	8001530 <TaskFlow+0x18>
 800155a:	bf00      	nop
 800155c:	40010c00 	.word	0x40010c00
 8001560:	20000428 	.word	0x20000428

08001564 <fungsiInit>:
	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b096      	sub	sp, #88	; 0x58
 8001568:	af00      	add	r7, sp, #0

	gpio_init();
 800156a:	f000 f85d 	bl	8001628 <gpio_init>
//	mode[0] = buffMode[0];
//
//	Flash_Read_Data(EEPROMCounter, buff, 1); // membaca eeprom counter
//	counter[0] = buff[0];

	Flash_Read_Data(EEPROMTimerEAB, buffEAB, 1); // membaca eeprom timerEAB
 800156e:	2201      	movs	r2, #1
 8001570:	4923      	ldr	r1, [pc, #140]	; (8001600 <fungsiInit+0x9c>)
 8001572:	4824      	ldr	r0, [pc, #144]	; (8001604 <fungsiInit+0xa0>)
 8001574:	f7ff fbd8 	bl	8000d28 <Flash_Read_Data>
	//memcpy(timerEAB, buffEAB, 1);
	timerEAB[0] = buffEAB[0];
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <fungsiInit+0x9c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <fungsiInit+0xa4>)
 8001580:	601a      	str	r2, [r3, #0]

	buffMode[0] = 2;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <fungsiInit+0xa8>)
 8001584:	2202      	movs	r2, #2
 8001586:	601a      	str	r2, [r3, #0]

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 128);
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <fungsiInit+0xac>)
 800158a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800158e:	461d      	mov	r5, r3
 8001590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 800159c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fc18 	bl	8004dd8 <osThreadCreate>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <fungsiInit+0xb0>)
 80015ac:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 128);
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <fungsiInit+0xb4>)
 80015b0:	f107 0420 	add.w	r4, r7, #32
 80015b4:	461d      	mov	r5, r3
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fc05 	bl	8004dd8 <osThreadCreate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <fungsiInit+0xb8>)
 80015d2:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskFlow, TaskFlow, osPriorityBelowNormal, 0, 128);
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <fungsiInit+0xbc>)
 80015d6:	1d3c      	adds	r4, r7, #4
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFlowHandle = osThreadCreate(osThread(TaskFlow), NULL);
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fbf4 	bl	8004dd8 <osThreadCreate>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <fungsiInit+0xc0>)
 80015f4:	6013      	str	r3, [r2, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3758      	adds	r7, #88	; 0x58
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000418 	.word	0x20000418
 8001604:	0801f840 	.word	0x0801f840
 8001608:	20000004 	.word	0x20000004
 800160c:	2000041c 	.word	0x2000041c
 8001610:	080063cc 	.word	0x080063cc
 8001614:	2000040c 	.word	0x2000040c
 8001618:	080063e8 	.word	0x080063e8
 800161c:	20000408 	.word	0x20000408
 8001620:	08006404 	.word	0x08006404
 8001624:	20000410 	.word	0x20000410

08001628 <gpio_init>:
 *      Author: rangga
 */
#include <gpio.h>
#include "stm32f1xx.h"

void gpio_init(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <gpio_init+0x114>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a3e      	ldr	r2, [pc, #248]	; (800173c <gpio_init+0x114>)
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <gpio_init+0x114>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <gpio_init+0x114>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a38      	ldr	r2, [pc, #224]	; (800173c <gpio_init+0x114>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <gpio_init+0x114>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <gpio_init+0x114>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a32      	ldr	r2, [pc, #200]	; (800173c <gpio_init+0x114>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <gpio_init+0x114>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <gpio_init+0x114>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a2c      	ldr	r2, [pc, #176]	; (800173c <gpio_init+0x114>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <gpio_init+0x114>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800169c:	2201      	movs	r2, #1
 800169e:	f647 4103 	movw	r1, #31747	; 0x7c03
 80016a2:	4827      	ldr	r0, [pc, #156]	; (8001740 <gpio_init+0x118>)
 80016a4:	f001 ffb9 	bl	800361a <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
	GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80016ae:	4825      	ldr	r0, [pc, #148]	; (8001744 <gpio_init+0x11c>)
 80016b0:	f001 ffb3 	bl	800361a <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
	GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ba:	4823      	ldr	r0, [pc, #140]	; (8001748 <gpio_init+0x120>)
 80016bc:	f001 ffad 	bl	800361a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 80016c0:	f647 4303 	movw	r3, #31747	; 0x7c03
 80016c4:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	4819      	ldr	r0, [pc, #100]	; (8001740 <gpio_init+0x118>)
 80016da:	f001 fe03 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 80016de:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80016e2:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <gpio_init+0x11c>)
 80016f8:	f001 fdf4 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001700:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <gpio_init+0x120>)
 8001716:	f001 fde5 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171a:	2320      	movs	r3, #32
 800171c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <gpio_init+0x118>)
 800172e:	f001 fdd9 	bl	80032e4 <HAL_GPIO_Init>
//
//	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40010800 	.word	0x40010800
 8001748:	40011000 	.word	0x40011000

0800174c <EAB>:

void EAB(uint8_t value) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, value);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	461a      	mov	r2, r3
 800175a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <EAB+0x48>)
 8001760:	f001 ff5b 	bl	800361a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, value);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	461a      	mov	r2, r3
 8001768:	2102      	movs	r1, #2
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <EAB+0x4c>)
 800176c:	f001 ff55 	bl	800361a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	461a      	mov	r2, r3
 8001774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <EAB+0x4c>)
 800177a:	f001 ff4e 	bl	800361a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	461a      	mov	r2, r3
 8001782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <EAB+0x4c>)
 8001788:	f001 ff47 	bl	800361a <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40010800 	.word	0x40010800
 8001798:	40010c00 	.word	0x40010c00

0800179c <Control_Valve_1>:

void Control_Valve_1(uint8_t value) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, value);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	461a      	mov	r2, r3
 80017aa:	2101      	movs	r1, #1
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <Control_Valve_1+0x20>)
 80017ae:	f001 ff34 	bl	800361a <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40010c00 	.word	0x40010c00

080017c0 <Compressor>:

void Control_Valve_5(uint8_t value) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, value);
}

void Compressor(uint8_t value) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	461a      	mov	r2, r3
 80017ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <Compressor+0x30>)
 80017d4:	f001 ff21 	bl	800361a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <Compressor+0x30>)
 80017e2:	f001 ff1a 	bl	800361a <HAL_GPIO_WritePin>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <Ozone>:

void Ozone(uint8_t value) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	461a      	mov	r2, r3
 8001802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <Ozone+0x20>)
 8001808:	f001 ff07 	bl	800361a <HAL_GPIO_WritePin>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010c00 	.word	0x40010c00

08001818 <Pump_1>:

void Pump_1(uint8_t value) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, value);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	461a      	mov	r2, r3
 8001826:	2108      	movs	r1, #8
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <Pump_1+0x20>)
 800182a:	f001 fef6 	bl	800361a <HAL_GPIO_WritePin>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40010800 	.word	0x40010800

0800183c <Pump_2>:

void Pump_2(uint8_t value) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, value);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	461a      	mov	r2, r3
 800184a:	2104      	movs	r1, #4
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <Pump_2+0x20>)
 800184e:	f001 fee4 	bl	800361a <HAL_GPIO_WritePin>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40010800 	.word	0x40010800

08001860 <Pump_3>:

void Pump_3(uint8_t value) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	461a      	mov	r2, r3
 800186e:	2102      	movs	r1, #2
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <Pump_3+0x20>)
 8001872:	f001 fed2 	bl	800361a <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40010800 	.word	0x40010800

08001884 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800188a:	f000 fbd3 	bl	8002034 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800188e:	f000 f823 	bl	80018d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001892:	f000 f981 	bl	8001b98 <MX_GPIO_Init>
	MX_CAN_Init();
 8001896:	f000 f865 	bl	8001964 <MX_CAN_Init>
	MX_TIM2_Init();
 800189a:	f000 f8bb 	bl	8001a14 <MX_TIM2_Init>
	MX_TIM3_Init();
 800189e:	f000 f92d 	bl	8001afc <MX_TIM3_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <main+0x4c>)
 80018a4:	1d3c      	adds	r4, r7, #4
 80018a6:	461d      	mov	r5, r3
 80018a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fa8d 	bl	8004dd8 <osThreadCreate>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <main+0x50>)
 80018c2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	fungsiInit();
 80018c4:	f7ff fe4e 	bl	8001564 <fungsiInit>
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80018c8:	f003 fa7f 	bl	8004dca <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80018cc:	e7fe      	b.n	80018cc <main+0x48>
 80018ce:	bf00      	nop
 80018d0:	0800642c 	.word	0x0800642c
 80018d4:	200004e4 	.word	0x200004e4

080018d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b090      	sub	sp, #64	; 0x40
 80018dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2228      	movs	r2, #40	; 0x28
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fc8e 	bl	8006208 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001908:	2301      	movs	r3, #1
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190c:	2302      	movs	r3, #2
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001916:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	4618      	mov	r0, r3
 8001922:	f001 feab 	bl	800367c <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x58>
		Error_Handler();
 800192c:	f000 f9ca 	bl	8001cc4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001940:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f002 f918 	bl	8003b80 <HAL_RCC_ClockConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x82>
		Error_Handler();
 8001956:	f000 f9b5 	bl	8001cc4 <Error_Handler>
	}
}
 800195a:	bf00      	nop
 800195c:	3740      	adds	r7, #64	; 0x40
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <MX_CAN_Init+0xa8>)
 800196c:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <MX_CAN_Init+0xac>)
 800196e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 18;
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <MX_CAN_Init+0xa8>)
 8001972:	2212      	movs	r2, #18
 8001974:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <MX_CAN_Init+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <MX_CAN_Init+0xa8>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <MX_CAN_Init+0xa8>)
 8001984:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001988:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <MX_CAN_Init+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <MX_CAN_Init+0xa8>)
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_CAN_Init+0xa8>)
 8001998:	2200      	movs	r2, #0
 800199a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_CAN_Init+0xa8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_CAN_Init+0xa8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_CAN_Init+0xa8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_CAN_Init+0xa8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80019b4:	4815      	ldr	r0, [pc, #84]	; (8001a0c <MX_CAN_Init+0xa8>)
 80019b6:	f000 fb6f 	bl	8002098 <HAL_CAN_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_CAN_Init+0x60>
		Error_Handler();
 80019c0:	f000 f980 	bl	8001cc4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 80019c8:	230a      	movs	r3, #10
 80019ca:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 80019d0:	2300      	movs	r3, #0
 80019d2:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_CAN_Init+0xa8>)
 80019f2:	f000 fc4c 	bl	800228e <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_CAN_Init+0xa8>)
 80019f8:	f000 fd12 	bl	8002420 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80019fc:	2110      	movs	r1, #16
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_CAN_Init+0xa8>)
 8001a00:	f000 ff3d 	bl	800287e <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000042c 	.word	0x2000042c
 8001a10:	40006400 	.word	0x40006400

08001a14 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a1a:	f107 0318 	add.w	r3, r7, #24
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a44:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a48:	2247      	movs	r2, #71	; 0x47
 8001a4a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535 - 1;
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a58:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a66:	4824      	ldr	r0, [pc, #144]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a68:	f002 fa3e 	bl	8003ee8 <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x62>
		Error_Handler();
 8001a72:	f000 f927 	bl	8001cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4619      	mov	r1, r3
 8001a82:	481d      	ldr	r0, [pc, #116]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a84:	f002 fdcc 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001a8e:	f000 f919 	bl	8001cc4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001a92:	4819      	ldr	r0, [pc, #100]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001a94:	f002 faca 	bl	800402c <HAL_TIM_IC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x8e>
		Error_Handler();
 8001a9e:	f000 f911 	bl	8001cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001ab2:	f003 f903 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8001abc:	f000 f902 	bl	8001cc4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001ad8:	f002 fd0e 	bl	80044f8 <HAL_TIM_IC_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0xd2>
		Error_Handler();
 8001ae2:	f000 f8ef 	bl	8001cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_TIM2_Init+0xe4>)
 8001aea:	f002 faf7 	bl	80040dc <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000454 	.word	0x20000454

08001afc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b1c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b20:	2247      	movs	r2, #71	; 0x47
 8001b22:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b30:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b40:	f002 f9d2 	bl	8003ee8 <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x52>
		Error_Handler();
 8001b4a:	f000 f8bb 	bl	8001cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b5c:	f002 fd60 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001b66:	f000 f8ad 	bl	8001cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b72:	463b      	mov	r3, r7
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <MX_TIM3_Init+0x94>)
 8001b78:	f003 f8a0 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001b82:	f000 f89f 	bl	8001cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000049c 	.word	0x2000049c
 8001b94:	40000400 	.word	0x40000400

08001b98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_GPIO_Init+0xc4>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bfa:	4819      	ldr	r0, [pc, #100]	; (8001c60 <MX_GPIO_Init+0xc8>)
 8001bfc:	f001 fd0d 	bl	800361a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	4817      	ldr	r0, [pc, #92]	; (8001c64 <MX_GPIO_Init+0xcc>)
 8001c08:	f001 fd07 	bl	800361a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2118      	movs	r1, #24
 8001c10:	4813      	ldr	r0, [pc, #76]	; (8001c60 <MX_GPIO_Init+0xc8>)
 8001c12:	f001 fd02 	bl	800361a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB11 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_3 | GPIO_PIN_4;
 8001c16:	f640 0318 	movw	r3, #2072	; 0x818
 8001c1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_GPIO_Init+0xc8>)
 8001c30:	f001 fb58 	bl	80032e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_GPIO_Init+0xcc>)
 8001c4e:	f001 fb49 	bl	80032e4 <HAL_GPIO_Init>

}
 8001c52:	bf00      	nop
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40010800 	.word	0x40010800

08001c68 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
		for (uint8_t a = 0; a < 8; a++) {
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e00a      	b.n	8001c8c <StartDefaultTask+0x24>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <StartDefaultTask+0x34>)
 8001c7c:	f001 fce5 	bl	800364a <HAL_GPIO_TogglePin>
			osDelay(50);
 8001c80:	2032      	movs	r0, #50	; 0x32
 8001c82:	f003 f8f5 	bl	8004e70 <osDelay>
		for (uint8_t a = 0; a < 8; a++) {
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b07      	cmp	r3, #7
 8001c90:	d9f1      	bls.n	8001c76 <StartDefaultTask+0xe>
		}
		osDelay(500);
 8001c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c96:	f003 f8eb 	bl	8004e70 <osDelay>
		for (uint8_t a = 0; a < 8; a++) {
 8001c9a:	e7e9      	b.n	8001c70 <StartDefaultTask+0x8>
 8001c9c:	40011000 	.word	0x40011000

08001ca0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001cb2:	f000 f9d5 	bl	8002060 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_MspInit+0x68>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_MspInit+0x68>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_MspInit+0x68>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_MspInit+0x68>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_MspInit+0x68>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_MspInit+0x68>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	210f      	movs	r1, #15
 8001d0a:	f06f 0001 	mvn.w	r0, #1
 8001d0e:	f001 f8b4 	bl	8002e7a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_MspInit+0x6c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_MspInit+0x6c>)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000

08001d40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_CAN_MspInit+0x9c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d139      	bne.n	8001dd4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_CAN_MspInit+0xa0>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <HAL_CAN_MspInit+0xa0>)
 8001d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	61d3      	str	r3, [r2, #28]
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_CAN_MspInit+0xa0>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_CAN_MspInit+0xa0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_CAN_MspInit+0xa0>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_CAN_MspInit+0xa0>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4619      	mov	r1, r3
 8001da4:	480f      	ldr	r0, [pc, #60]	; (8001de4 <HAL_CAN_MspInit+0xa4>)
 8001da6:	f001 fa9d 	bl	80032e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_CAN_MspInit+0xa4>)
 8001dc0:	f001 fa90 	bl	80032e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2105      	movs	r1, #5
 8001dc8:	2015      	movs	r0, #21
 8001dca:	f001 f856 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dce:	2015      	movs	r0, #21
 8001dd0:	f001 f86f 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40006400 	.word	0x40006400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010800 	.word	0x40010800

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d13f      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4a29      	ldr	r2, [pc, #164]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	61d3      	str	r3, [r2, #28]
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <HAL_TIM_Base_MspInit+0xd0>)
 8001e4e:	f001 fa49 	bl	80032e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_TIM_Base_MspInit+0xd4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_TIM_Base_MspInit+0xd4>)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f000 fffd 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f001 f816 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e86:	e010      	b.n	8001eaa <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_TIM_Base_MspInit+0xd8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10b      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_TIM_Base_MspInit+0xcc>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010800 	.word	0x40010800
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	201e      	movs	r0, #30
 8001eda:	f000 ffce 	bl	8002e7a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ede:	201e      	movs	r0, #30
 8001ee0:	f000 ffe7 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HAL_InitTick+0xa0>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_InitTick+0xa0>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_InitTick+0xa0>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001efc:	f107 0210 	add.w	r2, r7, #16
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 ffa0 	bl	8003e4c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f0c:	f001 ff8a 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8001f10:	4603      	mov	r3, r0
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_InitTick+0xa4>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9b      	lsrs	r3, r3, #18
 8001f20:	3b01      	subs	r3, #1
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_InitTick+0xac>)
 8001f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f46:	f001 ffcf 	bl	8003ee8 <HAL_TIM_Base_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001f50:	4806      	ldr	r0, [pc, #24]	; (8001f6c <HAL_InitTick+0xa8>)
 8001f52:	f002 f819 	bl	8003f88 <HAL_TIM_Base_Start_IT>
 8001f56:	4603      	mov	r3, r0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3730      	adds	r7, #48	; 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	200004e8 	.word	0x200004e8
 8001f70:	40000800 	.word	0x40000800

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <CAN1_RX1_IRQHandler+0x10>)
 8001fa6:	f000 fc8f 	bl	80028c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000042c 	.word	0x2000042c

08001fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM2_IRQHandler+0x10>)
 8001fba:	f002 f995 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000454 	.word	0x20000454

08001fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM4_IRQHandler+0x10>)
 8001fce:	f002 f98b 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200004e8 	.word	0x200004e8

08001fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fea:	490d      	ldr	r1, [pc, #52]	; (8002020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff0:	e002      	b.n	8001ff8 <LoopCopyDataInit>

08001ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff6:	3304      	adds	r3, #4

08001ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ffc:	d3f9      	bcc.n	8001ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002000:	4c0a      	ldr	r4, [pc, #40]	; (800202c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002004:	e001      	b.n	800200a <LoopFillZerobss>

08002006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002008:	3204      	adds	r2, #4

0800200a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800200c:	d3fb      	bcc.n	8002006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800200e:	f7ff ffe5 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002012:	f004 f8c5 	bl	80061a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002016:	f7ff fc35 	bl	8001884 <main>
  bx lr
 800201a:	4770      	bx	lr
  ldr r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002020:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002024:	080064e0 	.word	0x080064e0
  ldr r2, =_sbss
 8002028:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800202c:	200012ac 	.word	0x200012ac

08002030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002030:	e7fe      	b.n	8002030 <ADC1_2_IRQHandler>
	...

08002034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_Init+0x28>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_Init+0x28>)
 800203e:	f043 0310 	orr.w	r3, r3, #16
 8002042:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 ff0d 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	200f      	movs	r0, #15
 800204c:	f7ff ff3a 	bl	8001ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7ff fe3e 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000

08002060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_IncTick+0x1c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_IncTick+0x20>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a03      	ldr	r2, [pc, #12]	; (8002080 <HAL_IncTick+0x20>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	20000010 	.word	0x20000010
 8002080:	20000530 	.word	0x20000530

08002084 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <HAL_GetTick+0x10>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000530 	.word	0x20000530

08002098 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0ed      	b.n	8002286 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fe42 	bl	8001d40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020cc:	f7ff ffda 	bl	8002084 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020d2:	e012      	b.n	80020fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d4:	f7ff ffd6 	bl	8002084 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b0a      	cmp	r3, #10
 80020e0:	d90b      	bls.n	80020fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2205      	movs	r2, #5
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0c5      	b.n	8002286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0e5      	beq.n	80020d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0202 	bic.w	r2, r2, #2
 8002116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff ffb4 	bl	8002084 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211e:	e012      	b.n	8002146 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002120:	f7ff ffb0 	bl	8002084 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b0a      	cmp	r3, #10
 800212c:	d90b      	bls.n	8002146 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2205      	movs	r2, #5
 800213e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e09f      	b.n	8002286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e5      	bne.n	8002120 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d108      	bne.n	800216e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e007      	b.n	800217e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7e5b      	ldrb	r3, [r3, #25]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d108      	bne.n	8002198 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e007      	b.n	80021a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e9b      	ldrb	r3, [r3, #26]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d108      	bne.n	80021c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e007      	b.n	80021d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0220 	bic.w	r2, r2, #32
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7edb      	ldrb	r3, [r3, #27]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0210 	bic.w	r2, r2, #16
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e007      	b.n	80021fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0210 	orr.w	r2, r2, #16
 80021fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7f1b      	ldrb	r3, [r3, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0208 	orr.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7f5b      	ldrb	r3, [r3, #29]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0204 	orr.w	r2, r2, #4
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e007      	b.n	8002250 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	ea42 0103 	orr.w	r1, r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800228e:	b480      	push	{r7}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d003      	beq.n	80022b4 <HAL_CAN_ConfigFilter+0x26>
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	f040 80aa 	bne.w	8002408 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2201      	movs	r2, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d123      	bne.n	8002336 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002310:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3248      	adds	r2, #72	; 0x48
 8002316:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800232a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800232c:	6979      	ldr	r1, [r7, #20]
 800232e:	3348      	adds	r3, #72	; 0x48
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d122      	bne.n	8002384 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	431a      	orrs	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800235e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3248      	adds	r2, #72	; 0x48
 8002364:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002378:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800237a:	6979      	ldr	r1, [r7, #20]
 800237c:	3348      	adds	r3, #72	; 0x48
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800239e:	e007      	b.n	80023b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023ca:	e007      	b.n	80023dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023fa:	f023 0201 	bic.w	r2, r3, #1
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e006      	b.n	8002416 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d12e      	bne.n	8002492 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800244c:	f7ff fe1a 	bl	8002084 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002452:	e012      	b.n	800247a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002454:	f7ff fe16 	bl	8002084 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d90b      	bls.n	800247a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e012      	b.n	80024a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e006      	b.n	80024a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d003      	beq.n	80024d4 <HAL_CAN_AddTxMessage+0x2c>
 80024cc:	7ffb      	ldrb	r3, [r7, #31]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	f040 80b8 	bne.w	8002644 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a0 	beq.w	8002634 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	0e1b      	lsrs	r3, r3, #24
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d907      	bls.n	8002514 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e09e      	b.n	8002652 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002514:	2201      	movs	r2, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	409a      	lsls	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	431a      	orrs	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3318      	adds	r3, #24
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	440b      	add	r3, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e00f      	b.n	8002562 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800254c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002556:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3318      	adds	r3, #24
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	440b      	add	r3, r1
 8002560:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3318      	adds	r3, #24
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	440b      	add	r3, r1
 8002572:	3304      	adds	r3, #4
 8002574:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	7d1b      	ldrb	r3, [r3, #20]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d111      	bne.n	80025a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3318      	adds	r3, #24
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	6811      	ldr	r1, [r2, #0]
 8002592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3318      	adds	r3, #24
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	440b      	add	r3, r1
 800259e:	3304      	adds	r3, #4
 80025a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3307      	adds	r3, #7
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	061a      	lsls	r2, r3, #24
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3306      	adds	r3, #6
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3305      	adds	r3, #5
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	4313      	orrs	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	3204      	adds	r2, #4
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	4610      	mov	r0, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6811      	ldr	r1, [r2, #0]
 80025ca:	ea43 0200 	orr.w	r2, r3, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3303      	adds	r3, #3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	061a      	lsls	r2, r3, #24
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3302      	adds	r3, #2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3301      	adds	r3, #1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	4313      	orrs	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	4610      	mov	r0, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	6811      	ldr	r1, [r2, #0]
 8002600:	ea43 0200 	orr.w	r2, r3, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	440b      	add	r3, r1
 800260a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800260e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3318      	adds	r3, #24
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4413      	add	r3, r2
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3318      	adds	r3, #24
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	440b      	add	r3, r1
 800262e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e00e      	b.n	8002652 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e006      	b.n	8002652 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002670:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d003      	beq.n	8002680 <HAL_CAN_GetRxMessage+0x24>
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b02      	cmp	r3, #2
 800267c:	f040 80f3 	bne.w	8002866 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d116      	bne.n	80026c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0e7      	b.n	8002874 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0d8      	b.n	8002874 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	331b      	adds	r3, #27
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0204 	and.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	331b      	adds	r3, #27
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0d5b      	lsrs	r3, r3, #21
 80026f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e00b      	b.n	8002712 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	331b      	adds	r3, #27
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	331b      	adds	r3, #27
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0202 	and.w	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	331b      	adds	r3, #27
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	331b      	adds	r3, #27
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b2da      	uxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	331b      	adds	r3, #27
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0a1a      	lsrs	r2, r3, #8
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0c1a      	lsrs	r2, r3, #16
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3302      	adds	r3, #2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e1a      	lsrs	r2, r3, #24
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3303      	adds	r3, #3
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3304      	adds	r3, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0a1a      	lsrs	r2, r3, #8
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3305      	adds	r3, #5
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0c1a      	lsrs	r2, r3, #16
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	3306      	adds	r3, #6
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e1a      	lsrs	r2, r3, #24
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3307      	adds	r3, #7
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e007      	b.n	8002862 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e006      	b.n	8002874 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d002      	beq.n	800289c <HAL_CAN_ActivateNotification+0x1e>
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d109      	bne.n	80028b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6959      	ldr	r1, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e006      	b.n	80028be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d07c      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f983 	bl	8002c36 <HAL_CAN_TxMailbox0CompleteCallback>
 8002930:	e016      	b.n	8002960 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	e00c      	b.n	8002960 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	e002      	b.n	8002960 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f986 	bl	8002c6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002972:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f962 	bl	8002c48 <HAL_CAN_TxMailbox1CompleteCallback>
 8002984:	e016      	b.n	80029b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
 8002998:	e00c      	b.n	80029b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	e002      	b.n	80029b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f965 	bl	8002c7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f941 	bl	8002c5a <HAL_CAN_TxMailbox2CompleteCallback>
 80029d8:	e016      	b.n	8002a08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	e00c      	b.n	8002a08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	e002      	b.n	8002a08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f944 	bl	8002c90 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2208      	movs	r2, #8
 8002a46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f933 	bl	8002cb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f91b 	bl	8002ca2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f90a 	bl	8002cc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe f9e4 	bl	8000e98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8f3 	bl	8002cd8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8eb 	bl	8002cea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d07b      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d072      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d043      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d03e      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b96:	2b60      	cmp	r3, #96	; 0x60
 8002b98:	d02b      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x32a>
 8002b9a:	2b60      	cmp	r3, #96	; 0x60
 8002b9c:	d82e      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002b9e:	2b50      	cmp	r3, #80	; 0x50
 8002ba0:	d022      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x320>
 8002ba2:	2b50      	cmp	r3, #80	; 0x50
 8002ba4:	d82a      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d019      	beq.n	8002bde <HAL_CAN_IRQHandler+0x316>
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d826      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002bae:	2b30      	cmp	r3, #48	; 0x30
 8002bb0:	d010      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x30c>
 8002bb2:	2b30      	cmp	r3, #48	; 0x30
 8002bb4:	d822      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d002      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x2f8>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d005      	beq.n	8002bca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bbe:	e01d      	b.n	8002bfc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc8:	e019      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f043 0310 	orr.w	r3, r3, #16
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd2:	e014      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	f043 0320 	orr.w	r3, r3, #32
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bdc:	e00f      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be6:	e00a      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bf0:	e005      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bfa:	e000      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            break;
 8002bfc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2204      	movs	r2, #4
 8002c14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f867 	bl	8002cfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c2e:	bf00      	nop
 8002c30:	3728      	adds	r7, #40	; 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <__NVIC_GetPriorityGrouping+0x18>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 0307 	and.w	r3, r3, #7
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db0b      	blt.n	8002d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4906      	ldr	r1, [pc, #24]	; (8002da8 <__NVIC_EnableIRQ+0x34>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100

08002dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db0a      	blt.n	8002dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	490c      	ldr	r1, [pc, #48]	; (8002df8 <__NVIC_SetPriority+0x4c>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd4:	e00a      	b.n	8002dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4908      	ldr	r1, [pc, #32]	; (8002dfc <__NVIC_SetPriority+0x50>)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3b04      	subs	r3, #4
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	440b      	add	r3, r1
 8002dea:	761a      	strb	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf28      	it	cs
 8002e1e:	2304      	movcs	r3, #4
 8002e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <NVIC_EncodePriority+0x30>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	e000      	b.n	8002e32 <NVIC_EncodePriority+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	4313      	orrs	r3, r2
         );
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff4f 	bl	8002d10 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff64 	bl	8002d58 <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ffb2 	bl	8002e00 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff81 	bl	8002dac <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff57 	bl	8002d74 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_FLASH_Program+0xd8>)
 8002eec:	7e1b      	ldrb	r3, [r3, #24]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_FLASH_Program+0x26>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e054      	b.n	8002fa0 <HAL_FLASH_Program+0xd0>
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_FLASH_Program+0xd8>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002efc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f00:	f000 f8b2 	bl	8003068 <FLASH_WaitForLastOperation>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d144      	bne.n	8002f98 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002f14:	2301      	movs	r3, #1
 8002f16:	757b      	strb	r3, [r7, #21]
 8002f18:	e007      	b.n	8002f2a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d102      	bne.n	8002f26 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002f20:	2302      	movs	r3, #2
 8002f22:	757b      	strb	r3, [r7, #21]
 8002f24:	e001      	b.n	8002f2a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002f26:	2304      	movs	r3, #4
 8002f28:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75bb      	strb	r3, [r7, #22]
 8002f2e:	e02d      	b.n	8002f8c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002f30:	7dbb      	ldrb	r3, [r7, #22]
 8002f32:	005a      	lsls	r2, r3, #1
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	eb02 0c03 	add.w	ip, r2, r3
 8002f3a:	7dbb      	ldrb	r3, [r7, #22]
 8002f3c:	0119      	lsls	r1, r3, #4
 8002f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f42:	f1c1 0620 	rsb	r6, r1, #32
 8002f46:	f1a1 0020 	sub.w	r0, r1, #32
 8002f4a:	fa22 f401 	lsr.w	r4, r2, r1
 8002f4e:	fa03 f606 	lsl.w	r6, r3, r6
 8002f52:	4334      	orrs	r4, r6
 8002f54:	fa23 f000 	lsr.w	r0, r3, r0
 8002f58:	4304      	orrs	r4, r0
 8002f5a:	fa23 f501 	lsr.w	r5, r3, r1
 8002f5e:	b2a3      	uxth	r3, r4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4660      	mov	r0, ip
 8002f64:	f000 f864 	bl	8003030 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f6c:	f000 f87c 	bl	8003068 <FLASH_WaitForLastOperation>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_FLASH_Program+0xdc>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <HAL_FLASH_Program+0xdc>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002f86:	7dbb      	ldrb	r3, [r7, #22]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	75bb      	strb	r3, [r7, #22]
 8002f8c:	7dba      	ldrb	r2, [r7, #22]
 8002f8e:	7d7b      	ldrb	r3, [r7, #21]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3cd      	bcc.n	8002f30 <HAL_FLASH_Program+0x60>
 8002f94:	e000      	b.n	8002f98 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002f96:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_FLASH_Program+0xd8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	761a      	strb	r2, [r3, #24]

  return status;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa8:	20000538 	.word	0x20000538
 8002fac:	40022000 	.word	0x40022000

08002fb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_FLASH_Unlock+0x40>)
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_FLASH_Unlock+0x40>)
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_FLASH_Unlock+0x44>)
 8002fca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_FLASH_Unlock+0x40>)
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <HAL_FLASH_Unlock+0x48>)
 8002fd0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_FLASH_Unlock+0x40>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	45670123 	.word	0x45670123
 8002ff8:	cdef89ab 	.word	0xcdef89ab

08002ffc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_FLASH_Lock+0x1c>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_FLASH_Lock+0x1c>)
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40022000 	.word	0x40022000

0800301c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <HAL_FLASH_GetError+0x10>)
 8003022:	69db      	ldr	r3, [r3, #28]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	20000538 	.word	0x20000538

08003030 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <FLASH_Program_HalfWord+0x30>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <FLASH_Program_HalfWord+0x34>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4a07      	ldr	r2, [pc, #28]	; (8003064 <FLASH_Program_HalfWord+0x34>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	801a      	strh	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000538 	.word	0x20000538
 8003064:	40022000 	.word	0x40022000

08003068 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff f808 	bl	8002084 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003076:	e010      	b.n	800309a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d00c      	beq.n	800309a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <FLASH_WaitForLastOperation+0x2e>
 8003086:	f7fe fffd 	bl	8002084 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d201      	bcs.n	800309a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e025      	b.n	80030e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <FLASH_WaitForLastOperation+0x88>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e8      	bne.n	8003078 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <FLASH_WaitForLastOperation+0x88>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <FLASH_WaitForLastOperation+0x88>)
 80030b4:	2220      	movs	r2, #32
 80030b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <FLASH_WaitForLastOperation+0x88>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <FLASH_WaitForLastOperation+0x88>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <FLASH_WaitForLastOperation+0x88>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80030dc:	f000 f80a 	bl	80030f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000

080030f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <FLASH_SetErrorCode+0x98>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <FLASH_SetErrorCode+0x9c>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <FLASH_SetErrorCode+0x9c>)
 8003114:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f043 0310 	orr.w	r3, r3, #16
 800311c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <FLASH_SetErrorCode+0x98>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <FLASH_SetErrorCode+0x9c>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <FLASH_SetErrorCode+0x9c>)
 8003134:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <FLASH_SetErrorCode+0x98>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <FLASH_SetErrorCode+0x9c>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <FLASH_SetErrorCode+0x9c>)
 8003154:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <FLASH_SetErrorCode+0x98>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <FLASH_SetErrorCode+0x98>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f240 1201 	movw	r2, #257	; 0x101
 8003168:	4293      	cmp	r3, r2
 800316a:	d106      	bne.n	800317a <FLASH_SetErrorCode+0x86>
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <FLASH_SetErrorCode+0x98>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	4a06      	ldr	r2, [pc, #24]	; (800318c <FLASH_SetErrorCode+0x98>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	61d3      	str	r3, [r2, #28]
}  
 8003178:	e002      	b.n	8003180 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <FLASH_SetErrorCode+0x98>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60d3      	str	r3, [r2, #12]
}  
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	20000538 	.word	0x20000538

08003194 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_FLASHEx_Erase+0xd0>)
 80031a8:	7e1b      	ldrb	r3, [r3, #24]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_FLASHEx_Erase+0x1e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e053      	b.n	800325a <HAL_FLASHEx_Erase+0xc6>
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_FLASHEx_Erase+0xd0>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d116      	bne.n	80031ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031c4:	f7ff ff50 	bl	8003068 <FLASH_WaitForLastOperation>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d141      	bne.n	8003252 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f000 f84c 	bl	800326c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031d8:	f7ff ff46 	bl	8003068 <FLASH_WaitForLastOperation>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_FLASHEx_Erase+0xd4>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4a20      	ldr	r2, [pc, #128]	; (8003268 <HAL_FLASHEx_Erase+0xd4>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6113      	str	r3, [r2, #16]
 80031ec:	e031      	b.n	8003252 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031f2:	f7ff ff39 	bl	8003068 <FLASH_WaitForLastOperation>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d12a      	bne.n	8003252 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003202:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	e019      	b.n	8003240 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800320c:	68b8      	ldr	r0, [r7, #8]
 800320e:	f000 f849 	bl	80032a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003212:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003216:	f7ff ff27 	bl	8003068 <FLASH_WaitForLastOperation>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_FLASHEx_Erase+0xd4>)
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_FLASHEx_Erase+0xd4>)
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	601a      	str	r2, [r3, #0]
            break;
 8003236:	e00c      	b.n	8003252 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800323e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	029a      	lsls	r2, r3, #10
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3dc      	bcc.n	800320c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_FLASHEx_Erase+0xd0>)
 8003254:	2200      	movs	r2, #0
 8003256:	761a      	strb	r2, [r3, #24]

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000538 	.word	0x20000538
 8003268:	40022000 	.word	0x40022000

0800326c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <FLASH_MassErase+0x30>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <FLASH_MassErase+0x34>)
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <FLASH_MassErase+0x34>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <FLASH_MassErase+0x34>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <FLASH_MassErase+0x34>)
 800328c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003290:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000538 	.word	0x20000538
 80032a0:	40022000 	.word	0x40022000

080032a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <FLASH_PageErase+0x38>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <FLASH_PageErase+0x3c>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <FLASH_PageErase+0x3c>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <FLASH_PageErase+0x3c>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <FLASH_PageErase+0x3c>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <FLASH_PageErase+0x3c>)
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000538 	.word	0x20000538
 80032e0:	40022000 	.word	0x40022000

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b08b      	sub	sp, #44	; 0x2c
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	e169      	b.n	80035cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032f8:	2201      	movs	r2, #1
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	f040 8158 	bne.w	80035c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a9a      	ldr	r2, [pc, #616]	; (8003584 <HAL_GPIO_Init+0x2a0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d05e      	beq.n	80033de <HAL_GPIO_Init+0xfa>
 8003320:	4a98      	ldr	r2, [pc, #608]	; (8003584 <HAL_GPIO_Init+0x2a0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d875      	bhi.n	8003412 <HAL_GPIO_Init+0x12e>
 8003326:	4a98      	ldr	r2, [pc, #608]	; (8003588 <HAL_GPIO_Init+0x2a4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d058      	beq.n	80033de <HAL_GPIO_Init+0xfa>
 800332c:	4a96      	ldr	r2, [pc, #600]	; (8003588 <HAL_GPIO_Init+0x2a4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d86f      	bhi.n	8003412 <HAL_GPIO_Init+0x12e>
 8003332:	4a96      	ldr	r2, [pc, #600]	; (800358c <HAL_GPIO_Init+0x2a8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d052      	beq.n	80033de <HAL_GPIO_Init+0xfa>
 8003338:	4a94      	ldr	r2, [pc, #592]	; (800358c <HAL_GPIO_Init+0x2a8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d869      	bhi.n	8003412 <HAL_GPIO_Init+0x12e>
 800333e:	4a94      	ldr	r2, [pc, #592]	; (8003590 <HAL_GPIO_Init+0x2ac>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d04c      	beq.n	80033de <HAL_GPIO_Init+0xfa>
 8003344:	4a92      	ldr	r2, [pc, #584]	; (8003590 <HAL_GPIO_Init+0x2ac>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d863      	bhi.n	8003412 <HAL_GPIO_Init+0x12e>
 800334a:	4a92      	ldr	r2, [pc, #584]	; (8003594 <HAL_GPIO_Init+0x2b0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d046      	beq.n	80033de <HAL_GPIO_Init+0xfa>
 8003350:	4a90      	ldr	r2, [pc, #576]	; (8003594 <HAL_GPIO_Init+0x2b0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d85d      	bhi.n	8003412 <HAL_GPIO_Init+0x12e>
 8003356:	2b12      	cmp	r3, #18
 8003358:	d82a      	bhi.n	80033b0 <HAL_GPIO_Init+0xcc>
 800335a:	2b12      	cmp	r3, #18
 800335c:	d859      	bhi.n	8003412 <HAL_GPIO_Init+0x12e>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_GPIO_Init+0x80>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	080033df 	.word	0x080033df
 8003368:	080033b9 	.word	0x080033b9
 800336c:	080033cb 	.word	0x080033cb
 8003370:	0800340d 	.word	0x0800340d
 8003374:	08003413 	.word	0x08003413
 8003378:	08003413 	.word	0x08003413
 800337c:	08003413 	.word	0x08003413
 8003380:	08003413 	.word	0x08003413
 8003384:	08003413 	.word	0x08003413
 8003388:	08003413 	.word	0x08003413
 800338c:	08003413 	.word	0x08003413
 8003390:	08003413 	.word	0x08003413
 8003394:	08003413 	.word	0x08003413
 8003398:	08003413 	.word	0x08003413
 800339c:	08003413 	.word	0x08003413
 80033a0:	08003413 	.word	0x08003413
 80033a4:	08003413 	.word	0x08003413
 80033a8:	080033c1 	.word	0x080033c1
 80033ac:	080033d5 	.word	0x080033d5
 80033b0:	4a79      	ldr	r2, [pc, #484]	; (8003598 <HAL_GPIO_Init+0x2b4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033b6:	e02c      	b.n	8003412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	623b      	str	r3, [r7, #32]
          break;
 80033be:	e029      	b.n	8003414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	3304      	adds	r3, #4
 80033c6:	623b      	str	r3, [r7, #32]
          break;
 80033c8:	e024      	b.n	8003414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	3308      	adds	r3, #8
 80033d0:	623b      	str	r3, [r7, #32]
          break;
 80033d2:	e01f      	b.n	8003414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	330c      	adds	r3, #12
 80033da:	623b      	str	r3, [r7, #32]
          break;
 80033dc:	e01a      	b.n	8003414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033e6:	2304      	movs	r3, #4
 80033e8:	623b      	str	r3, [r7, #32]
          break;
 80033ea:	e013      	b.n	8003414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033f4:	2308      	movs	r3, #8
 80033f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	611a      	str	r2, [r3, #16]
          break;
 80033fe:	e009      	b.n	8003414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003400:	2308      	movs	r3, #8
 8003402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	615a      	str	r2, [r3, #20]
          break;
 800340a:	e003      	b.n	8003414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800340c:	2300      	movs	r3, #0
 800340e:	623b      	str	r3, [r7, #32]
          break;
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x130>
          break;
 8003412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2bff      	cmp	r3, #255	; 0xff
 8003418:	d801      	bhi.n	800341e <HAL_GPIO_Init+0x13a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	e001      	b.n	8003422 <HAL_GPIO_Init+0x13e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2bff      	cmp	r3, #255	; 0xff
 8003428:	d802      	bhi.n	8003430 <HAL_GPIO_Init+0x14c>
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	e002      	b.n	8003436 <HAL_GPIO_Init+0x152>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	3b08      	subs	r3, #8
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	210f      	movs	r1, #15
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80b1 	beq.w	80035c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003464:	4b4d      	ldr	r3, [pc, #308]	; (800359c <HAL_GPIO_Init+0x2b8>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	4a4c      	ldr	r2, [pc, #304]	; (800359c <HAL_GPIO_Init+0x2b8>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6193      	str	r3, [r2, #24]
 8003470:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_GPIO_Init+0x2b8>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800347c:	4a48      	ldr	r2, [pc, #288]	; (80035a0 <HAL_GPIO_Init+0x2bc>)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	3302      	adds	r3, #2
 8003484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a40      	ldr	r2, [pc, #256]	; (80035a4 <HAL_GPIO_Init+0x2c0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_GPIO_Init+0x1ec>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3f      	ldr	r2, [pc, #252]	; (80035a8 <HAL_GPIO_Init+0x2c4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00d      	beq.n	80034cc <HAL_GPIO_Init+0x1e8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a3e      	ldr	r2, [pc, #248]	; (80035ac <HAL_GPIO_Init+0x2c8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <HAL_GPIO_Init+0x1e4>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3d      	ldr	r2, [pc, #244]	; (80035b0 <HAL_GPIO_Init+0x2cc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_GPIO_Init+0x1e0>
 80034c0:	2303      	movs	r3, #3
 80034c2:	e006      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c4:	2304      	movs	r3, #4
 80034c6:	e004      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034d0:	2300      	movs	r3, #0
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	f002 0203 	and.w	r2, r2, #3
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	4093      	lsls	r3, r2
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034e2:	492f      	ldr	r1, [pc, #188]	; (80035a0 <HAL_GPIO_Init+0x2bc>)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	492c      	ldr	r1, [pc, #176]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	43db      	mvns	r3, r3
 8003512:	4928      	ldr	r1, [pc, #160]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003514:	4013      	ands	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d006      	beq.n	8003532 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	4922      	ldr	r1, [pc, #136]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	e006      	b.n	8003540 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	43db      	mvns	r3, r3
 800353a:	491e      	ldr	r1, [pc, #120]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 800353c:	4013      	ands	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	4918      	ldr	r1, [pc, #96]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	608b      	str	r3, [r1, #8]
 8003558:	e006      	b.n	8003568 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	43db      	mvns	r3, r3
 8003562:	4914      	ldr	r1, [pc, #80]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003564:	4013      	ands	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d021      	beq.n	80035b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_GPIO_Init+0x2d0>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e021      	b.n	80035c6 <HAL_GPIO_Init+0x2e2>
 8003582:	bf00      	nop
 8003584:	10320000 	.word	0x10320000
 8003588:	10310000 	.word	0x10310000
 800358c:	10220000 	.word	0x10220000
 8003590:	10210000 	.word	0x10210000
 8003594:	10120000 	.word	0x10120000
 8003598:	10110000 	.word	0x10110000
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40010800 	.word	0x40010800
 80035a8:	40010c00 	.word	0x40010c00
 80035ac:	40011000 	.word	0x40011000
 80035b0:	40011400 	.word	0x40011400
 80035b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_GPIO_Init+0x304>)
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	43db      	mvns	r3, r3
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <HAL_GPIO_Init+0x304>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	3301      	adds	r3, #1
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f47f ae8e 	bne.w	80032f8 <HAL_GPIO_Init+0x14>
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	372c      	adds	r7, #44	; 0x2c
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40010400 	.word	0x40010400

080035ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e001      	b.n	800360e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	807b      	strh	r3, [r7, #2]
 8003626:	4613      	mov	r3, r2
 8003628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800362a:	787b      	ldrb	r3, [r7, #1]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003636:	e003      	b.n	8003640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	041a      	lsls	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	041a      	lsls	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43d9      	mvns	r1, r3
 8003668:	887b      	ldrh	r3, [r7, #2]
 800366a:	400b      	ands	r3, r1
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e272      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8087 	beq.w	80037aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800369c:	4b92      	ldr	r3, [pc, #584]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d00c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a8:	4b8f      	ldr	r3, [pc, #572]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d112      	bne.n	80036da <HAL_RCC_OscConfig+0x5e>
 80036b4:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d10b      	bne.n	80036da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	4b89      	ldr	r3, [pc, #548]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d06c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x12c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d168      	bne.n	80037a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e24c      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x76>
 80036e4:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a7f      	ldr	r2, [pc, #508]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e02e      	b.n	8003750 <HAL_RCC_OscConfig+0xd4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a77      	ldr	r2, [pc, #476]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800370c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0xd4>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0xbc>
 800371e:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a71      	ldr	r2, [pc, #452]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xd4>
 8003738:	4b6b      	ldr	r3, [pc, #428]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a67      	ldr	r2, [pc, #412]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fc94 	bl	8002084 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fc90 	bl	8002084 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e200      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0xe4>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fc80 	bl	8002084 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fc7c 	bl	8002084 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e1ec      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x10c>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d063      	beq.n	800387e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037b6:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037c2:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d11c      	bne.n	8003808 <HAL_RCC_OscConfig+0x18c>
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d116      	bne.n	8003808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037da:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_RCC_OscConfig+0x176>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e1c0      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4939      	ldr	r1, [pc, #228]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	e03a      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RCC_OscConfig+0x270>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7fe fc35 	bl	8002084 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381e:	f7fe fc31 	bl	8002084 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e1a1      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4927      	ldr	r1, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
 8003850:	e015      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_RCC_OscConfig+0x270>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fc14 	bl	8002084 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003860:	f7fe fc10 	bl	8002084 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e180      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03a      	beq.n	8003900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d019      	beq.n	80038c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe fbf4 	bl	8002084 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a0:	f7fe fbf0 	bl	8002084 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e160      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038be:	2001      	movs	r0, #1
 80038c0:	f000 faf4 	bl	8003eac <RCC_Delay>
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038cc:	f7fe fbda 	bl	8002084 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe fbd6 	bl	8002084 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d908      	bls.n	80038f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e146      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	42420000 	.word	0x42420000
 80038f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e9      	bne.n	80038d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a6 	beq.w	8003a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a87      	ldr	r2, [pc, #540]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	61d3      	str	r3, [r2, #28]
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b82      	ldr	r3, [pc, #520]	; (8003b44 <HAL_RCC_OscConfig+0x4c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b7f      	ldr	r3, [pc, #508]	; (8003b44 <HAL_RCC_OscConfig+0x4c8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7e      	ldr	r2, [pc, #504]	; (8003b44 <HAL_RCC_OscConfig+0x4c8>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe fb97 	bl	8002084 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fe fb93 	bl	8002084 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b64      	cmp	r3, #100	; 0x64
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e103      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_OscConfig+0x4c8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x312>
 8003980:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6213      	str	r3, [r2, #32]
 800398c:	e02d      	b.n	80039ea <HAL_RCC_OscConfig+0x36e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x334>
 8003996:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4a69      	ldr	r2, [pc, #420]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6213      	str	r3, [r2, #32]
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4a66      	ldr	r2, [pc, #408]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	6213      	str	r3, [r2, #32]
 80039ae:	e01c      	b.n	80039ea <HAL_RCC_OscConfig+0x36e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d10c      	bne.n	80039d2 <HAL_RCC_OscConfig+0x356>
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4a60      	ldr	r2, [pc, #384]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	6213      	str	r3, [r2, #32]
 80039c4:	4b5e      	ldr	r3, [pc, #376]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	4a5d      	ldr	r2, [pc, #372]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6213      	str	r3, [r2, #32]
 80039d0:	e00b      	b.n	80039ea <HAL_RCC_OscConfig+0x36e>
 80039d2:	4b5b      	ldr	r3, [pc, #364]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4a5a      	ldr	r2, [pc, #360]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6213      	str	r3, [r2, #32]
 80039de:	4b58      	ldr	r3, [pc, #352]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4a57      	ldr	r2, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d015      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fe fb47 	bl	8002084 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fe fb43 	bl	8002084 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e0b1      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ee      	beq.n	80039fa <HAL_RCC_OscConfig+0x37e>
 8003a1c:	e014      	b.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fb31 	bl	8002084 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fb2d 	bl	8002084 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e09b      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3c:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ee      	bne.n	8003a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4e:	4b3c      	ldr	r3, [pc, #240]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8087 	beq.w	8003b72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a64:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d061      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d146      	bne.n	8003b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a78:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fb01 	bl	8002084 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe fafd 	bl	8002084 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e06d      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a98:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d108      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4921      	ldr	r1, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a19      	ldr	r1, [r3, #32]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	491b      	ldr	r1, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe fad1 	bl	8002084 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe facd 	bl	8002084 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e03d      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x46a>
 8003b04:	e035      	b.n	8003b72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe faba 	bl	8002084 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe fab6 	bl	8002084 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e026      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x498>
 8003b32:	e01e      	b.n	8003b72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e019      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x500>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000

08003b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d0      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d910      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	4965      	ldr	r1, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d040      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d115      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e073      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4936      	ldr	r1, [pc, #216]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fe fa08 	bl	8002084 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fe fa04 	bl	8002084 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e053      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d210      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1cc>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1d0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe f8c8 	bl	8001ec4 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40022000 	.word	0x40022000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08006460 	.word	0x08006460
 8003d4c:	20000008 	.word	0x20000008
 8003d50:	2000000c 	.word	0x2000000c

08003d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b490      	push	{r4, r7}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d5c:	1d3c      	adds	r4, r7, #4
 8003d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d64:	f240 2301 	movw	r3, #513	; 0x201
 8003d68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x40>
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x46>
 8003d92:	e02b      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d96:	623b      	str	r3, [r7, #32]
      break;
 8003d98:	e02b      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	0c9b      	lsrs	r3, r3, #18
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3328      	adds	r3, #40	; 0x28
 8003da4:	443b      	add	r3, r7
 8003da6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003daa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	0c5b      	lsrs	r3, r3, #17
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	3328      	adds	r3, #40	; 0x28
 8003dc2:	443b      	add	r3, r7
 8003dc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dce:	fb03 f202 	mul.w	r2, r3, r2
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	e004      	b.n	8003de6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	623b      	str	r3, [r7, #32]
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dee:	623b      	str	r3, [r7, #32]
      break;
 8003df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df2:	6a3b      	ldr	r3, [r7, #32]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc90      	pop	{r4, r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	08006448 	.word	0x08006448
 8003e04:	40021000 	.word	0x40021000
 8003e08:	007a1200 	.word	0x007a1200
 8003e0c:	003d0900 	.word	0x003d0900

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	20000008 	.word	0x20000008

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff2 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4903      	ldr	r1, [pc, #12]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08006470 	.word	0x08006470

08003e4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	220f      	movs	r2, #15
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_RCC_GetClockConfig+0x58>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0203 	and.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCC_GetClockConfig+0x58>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_GetClockConfig+0x58>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_GetClockConfig+0x58>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0207 	and.w	r2, r3, #7
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40022000 	.word	0x40022000

08003eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <RCC_Delay+0x34>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <RCC_Delay+0x38>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0a5b      	lsrs	r3, r3, #9
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ec8:	bf00      	nop
  }
  while (Delay --);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	60fa      	str	r2, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f9      	bne.n	8003ec8 <RCC_Delay+0x1c>
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	20000008 	.word	0x20000008
 8003ee4:	10624dd3 	.word	0x10624dd3

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e041      	b.n	8003f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd ff6a 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fc9e 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e03a      	b.n	8004016 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_TIM_Base_Start_IT+0x98>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x58>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x58>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a14      	ldr	r2, [pc, #80]	; (8004024 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x58>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a13      	ldr	r2, [pc, #76]	; (8004028 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d111      	bne.n	8004004 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d010      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004002:	e007      	b.n	8004014 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800

0800402c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e041      	b.n	80040c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f839 	bl	80040ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f000 fbfc 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_IC_Start_IT+0x1a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e013      	b.n	800411e <HAL_TIM_IC_Start_IT+0x42>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_IC_Start_IT+0x2a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e00b      	b.n	800411e <HAL_TIM_IC_Start_IT+0x42>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d104      	bne.n	8004116 <HAL_TIM_IC_Start_IT+0x3a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e003      	b.n	800411e <HAL_TIM_IC_Start_IT+0x42>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411c:	b2db      	uxtb	r3, r3
 800411e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_TIM_IC_Start_IT+0x54>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e013      	b.n	8004158 <HAL_TIM_IC_Start_IT+0x7c>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d104      	bne.n	8004140 <HAL_TIM_IC_Start_IT+0x64>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e00b      	b.n	8004158 <HAL_TIM_IC_Start_IT+0x7c>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b08      	cmp	r3, #8
 8004144:	d104      	bne.n	8004150 <HAL_TIM_IC_Start_IT+0x74>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e003      	b.n	8004158 <HAL_TIM_IC_Start_IT+0x7c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004156:	b2db      	uxtb	r3, r3
 8004158:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0b3      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <HAL_TIM_IC_Start_IT+0x9e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004178:	e013      	b.n	80041a2 <HAL_TIM_IC_Start_IT+0xc6>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d104      	bne.n	800418a <HAL_TIM_IC_Start_IT+0xae>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	e00b      	b.n	80041a2 <HAL_TIM_IC_Start_IT+0xc6>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d104      	bne.n	800419a <HAL_TIM_IC_Start_IT+0xbe>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004198:	e003      	b.n	80041a2 <HAL_TIM_IC_Start_IT+0xc6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <HAL_TIM_IC_Start_IT+0xd6>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b0:	e013      	b.n	80041da <HAL_TIM_IC_Start_IT+0xfe>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_IC_Start_IT+0xe6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c0:	e00b      	b.n	80041da <HAL_TIM_IC_Start_IT+0xfe>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_IC_Start_IT+0xf6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	e003      	b.n	80041da <HAL_TIM_IC_Start_IT+0xfe>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d841      	bhi.n	8004264 <HAL_TIM_IC_Start_IT+0x188>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <HAL_TIM_IC_Start_IT+0x10c>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	08004265 	.word	0x08004265
 80041f0:	08004265 	.word	0x08004265
 80041f4:	08004265 	.word	0x08004265
 80041f8:	0800422f 	.word	0x0800422f
 80041fc:	08004265 	.word	0x08004265
 8004200:	08004265 	.word	0x08004265
 8004204:	08004265 	.word	0x08004265
 8004208:	08004241 	.word	0x08004241
 800420c:	08004265 	.word	0x08004265
 8004210:	08004265 	.word	0x08004265
 8004214:	08004265 	.word	0x08004265
 8004218:	08004253 	.word	0x08004253
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0202 	orr.w	r2, r2, #2
 800422a:	60da      	str	r2, [r3, #12]
      break;
 800422c:	e01b      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0204 	orr.w	r2, r2, #4
 800423c:	60da      	str	r2, [r3, #12]
      break;
 800423e:	e012      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0208 	orr.w	r2, r2, #8
 800424e:	60da      	str	r2, [r3, #12]
      break;
 8004250:	e009      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0210 	orr.w	r2, r2, #16
 8004260:	60da      	str	r2, [r3, #12]
      break;
 8004262:	e000      	b.n	8004266 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004264:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fcff 	bl	8004c72 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_TIM_IC_Start_IT+0x200>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_TIM_IC_Start_IT+0x1c0>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d009      	beq.n	800429c <HAL_TIM_IC_Start_IT+0x1c0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <HAL_TIM_IC_Start_IT+0x204>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_TIM_IC_Start_IT+0x1c0>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_TIM_IC_Start_IT+0x208>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d111      	bne.n	80042c0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d010      	beq.n	80042d0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042be:	e007      	b.n	80042d0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fd1c 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa7c 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa82 	bl	8004842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc fcf2 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa52 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa58 	bl	8004842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fcc8 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa28 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa2e 	bl	8004842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc fc9e 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9fe 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fa04 	bl	8004842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd fc1a 	bl	8001ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fc79 	bl	8004d8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d10e      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d107      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9c8 	bl	8004854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d10e      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d107      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fc44 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_TIM_IC_ConfigChannel+0x1a>
 800450e:	2302      	movs	r3, #2
 8004510:	e082      	b.n	8004618 <HAL_TIM_IC_ConfigChannel+0x120>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f000 f9fc 	bl	800492c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020c 	bic.w	r2, r2, #12
 8004542:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	619a      	str	r2, [r3, #24]
 8004556:	e05a      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b04      	cmp	r3, #4
 800455c:	d11c      	bne.n	8004598 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f000 fa65 	bl	8004a3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004580:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6999      	ldr	r1, [r3, #24]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	021a      	lsls	r2, r3, #8
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	619a      	str	r2, [r3, #24]
 8004596:	e03a      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b08      	cmp	r3, #8
 800459c:	d11b      	bne.n	80045d6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f000 fab0 	bl	8004b12 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 020c 	bic.w	r2, r2, #12
 80045c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69d9      	ldr	r1, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	61da      	str	r2, [r3, #28]
 80045d4:	e01b      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f000 facf 	bl	8004b88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	021a      	lsls	r2, r3, #8
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b3      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x180>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x168>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	f000 8085 	beq.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa2>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x116>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xf6>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x136>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 faaf 	bl	8004c34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04e      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 fa98 	bl	8004c34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f95c 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	; 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fa66 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 8004734:	e02b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f9b6 	bl	8004ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa56 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 8004754:	e01b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f93c 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa46 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 8004774:	e00b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 fa3d 	bl	8004c00 <TIM_ITRx_SetConfig>
        break;
 8004786:	e002      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800478c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d831      	bhi.n	8004820 <HAL_TIM_ReadCapturedValue+0x78>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004821 	.word	0x08004821
 80047d0:	08004821 	.word	0x08004821
 80047d4:	08004803 	.word	0x08004803
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004821 	.word	0x08004821
 80047e0:	08004821 	.word	0x08004821
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004821 	.word	0x08004821
 80047f4:	08004817 	.word	0x08004817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	60fb      	str	r3, [r7, #12]

      break;
 8004800:	e00f      	b.n	8004822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	60fb      	str	r3, [r7, #12]

      break;
 800480a:	e00a      	b.n	8004822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	60fb      	str	r3, [r7, #12]

      break;
 8004814:	e005      	b.n	8004822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	60fb      	str	r3, [r7, #12]

      break;
 800481e:	e000      	b.n	8004822 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004820:	bf00      	nop
  }

  return tmpreg;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
	...

08004868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a29      	ldr	r2, [pc, #164]	; (8004920 <TIM_Base_SetConfig+0xb8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0x30>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0x30>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a26      	ldr	r2, [pc, #152]	; (8004924 <TIM_Base_SetConfig+0xbc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0x30>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a25      	ldr	r2, [pc, #148]	; (8004928 <TIM_Base_SetConfig+0xc0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <TIM_Base_SetConfig+0xb8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_Base_SetConfig+0x62>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d007      	beq.n	80048ca <TIM_Base_SetConfig+0x62>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <TIM_Base_SetConfig+0xbc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_Base_SetConfig+0x62>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <TIM_Base_SetConfig+0xc0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d108      	bne.n	80048dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a07      	ldr	r2, [pc, #28]	; (8004920 <TIM_Base_SetConfig+0xb8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d103      	bne.n	8004910 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	615a      	str	r2, [r3, #20]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800

0800492c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <TIM_TI1_SetConfig+0xa8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_TI1_SetConfig+0x46>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d007      	beq.n	8004972 <TIM_TI1_SetConfig+0x46>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a1c      	ldr	r2, [pc, #112]	; (80049d8 <TIM_TI1_SetConfig+0xac>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_TI1_SetConfig+0x46>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <TIM_TI1_SetConfig+0xb0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <TIM_TI1_SetConfig+0x4a>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <TIM_TI1_SetConfig+0x4c>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e003      	b.n	8004996 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f023 030a 	bic.w	r3, r3, #10
 80049b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 030a 	and.w	r3, r3, #10
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800

080049e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0210 	bic.w	r2, r3, #16
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	031b      	lsls	r3, r3, #12
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f023 0210 	bic.w	r2, r3, #16
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ade:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	031b      	lsls	r3, r3, #12
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004af0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	031b      	lsls	r3, r3, #12
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	031b      	lsls	r3, r3, #12
 8004be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f043 0307 	orr.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	609a      	str	r2, [r3, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2201      	movs	r2, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1a      	ldr	r2, [r3, #32]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	401a      	ands	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e046      	b.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a16      	ldr	r2, [pc, #88]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d20:	d009      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10c      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dae:	2b84      	cmp	r3, #132	; 0x84
 8004db0:	d005      	beq.n	8004dbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004db2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	3303      	adds	r3, #3
 8004dbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004dce:	f000 fae7 	bl	80053a0 <vTaskStartScheduler>
  
  return osOK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af04      	add	r7, sp, #16
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <osThreadCreate+0x54>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01c      	beq.n	8004e2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685c      	ldr	r4, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681d      	ldr	r5, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691e      	ldr	r6, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ffc9 	bl	8004d9c <makeFreeRtosPriority>
 8004e0a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e14:	9202      	str	r2, [sp, #8]
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	9100      	str	r1, [sp, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 f8e8 	bl	8004ff6 <xTaskCreateStatic>
 8004e26:	4603      	mov	r3, r0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e01c      	b.n	8004e66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685c      	ldr	r4, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e38:	b29e      	uxth	r6, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff ffab 	bl	8004d9c <makeFreeRtosPriority>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	9200      	str	r2, [sp, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4632      	mov	r2, r6
 8004e54:	4629      	mov	r1, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 f929 	bl	80050ae <xTaskCreate>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d001      	beq.n	8004e66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <osDelay+0x16>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	e000      	b.n	8004e88 <osDelay+0x18>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fa55 	bl	8005338 <vTaskDelay>
  
  return osOK;
 8004e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f103 0208 	add.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f103 0208 	add.w	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f103 0208 	add.w	r2, r3, #8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d103      	bne.n	8004f54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e00c      	b.n	8004f6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3308      	adds	r3, #8
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e002      	b.n	8004f62 <vListInsert+0x2e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d2f6      	bcs.n	8004f5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6892      	ldr	r2, [r2, #8]
 8004fba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6852      	ldr	r2, [r2, #4]
 8004fc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d103      	bne.n	8004fd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	1e5a      	subs	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b08e      	sub	sp, #56	; 0x38
 8004ffa:	af04      	add	r7, sp, #16
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xTaskCreateStatic+0x46>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	61fb      	str	r3, [r7, #28]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800503c:	23b4      	movs	r3, #180	; 0xb4
 800503e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2bb4      	cmp	r3, #180	; 0xb4
 8005044:	d00a      	beq.n	800505c <xTaskCreateStatic+0x66>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61bb      	str	r3, [r7, #24]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01e      	beq.n	80050a0 <xTaskCreateStatic+0xaa>
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005070:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2202      	movs	r2, #2
 8005076:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800507a:	2300      	movs	r3, #0
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9302      	str	r3, [sp, #8]
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f850 	bl	8005138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800509a:	f000 f8e3 	bl	8005264 <prvAddNewTaskToReadyList>
 800509e:	e001      	b.n	80050a4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050a4:	697b      	ldr	r3, [r7, #20]
	}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3728      	adds	r7, #40	; 0x28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08c      	sub	sp, #48	; 0x30
 80050b2:	af04      	add	r7, sp, #16
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fe94 	bl	8005df0 <pvPortMalloc>
 80050c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050d0:	20b4      	movs	r0, #180	; 0xb4
 80050d2:	f000 fe8d 	bl	8005df0 <pvPortMalloc>
 80050d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
 80050e4:	e005      	b.n	80050f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f000 ff46 	bl	8005f78 <vPortFree>
 80050ec:	e001      	b.n	80050f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	2300      	movs	r3, #0
 8005104:	9303      	str	r3, [sp, #12]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	9302      	str	r3, [sp, #8]
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f80e 	bl	8005138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800511c:	69f8      	ldr	r0, [r7, #28]
 800511e:	f000 f8a1 	bl	8005264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005122:	2301      	movs	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	e002      	b.n	800512e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005128:	f04f 33ff 	mov.w	r3, #4294967295
 800512c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800512e:	69bb      	ldr	r3, [r7, #24]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	3720      	adds	r7, #32
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005150:	3b01      	subs	r3, #1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f023 0307 	bic.w	r3, r3, #7
 800515e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <prvInitialiseNewTask+0x48>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	617b      	str	r3, [r7, #20]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	e012      	b.n	80051ac <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	7819      	ldrb	r1, [r3, #0]
 800518e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	3334      	adds	r3, #52	; 0x34
 8005196:	460a      	mov	r2, r1
 8005198:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d9e9      	bls.n	8005186 <prvInitialiseNewTask+0x4e>
 80051b2:	e000      	b.n	80051b6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80051b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d901      	bls.n	80051c8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051c4:	2306      	movs	r3, #6
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	2200      	movs	r2, #0
 80051d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	3304      	adds	r3, #4
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fe79 	bl	8004ed6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	3318      	adds	r3, #24
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fe74 	bl	8004ed6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	f1c3 0207 	rsb	r2, r3, #7
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	2200      	movs	r2, #0
 8005208:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	2200      	movs	r2, #0
 8005210:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	334c      	adds	r3, #76	; 0x4c
 8005218:	2260      	movs	r2, #96	; 0x60
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fff3 	bl	8006208 <memset>
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <prvInitialiseNewTask+0x120>)
 8005226:	651a      	str	r2, [r3, #80]	; 0x50
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <prvInitialiseNewTask+0x124>)
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <prvInitialiseNewTask+0x128>)
 8005232:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	69b8      	ldr	r0, [r7, #24]
 800523a:	f000 fc29 	bl	8005a90 <pxPortInitialiseStack>
 800523e:	4602      	mov	r2, r0
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800524e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005250:	bf00      	nop
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08006498 	.word	0x08006498
 800525c:	080064b8 	.word	0x080064b8
 8005260:	08006478 	.word	0x08006478

08005264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800526c:	f000 fcfe 	bl	8005c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005270:	4b2a      	ldr	r3, [pc, #168]	; (800531c <prvAddNewTaskToReadyList+0xb8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	4a29      	ldr	r2, [pc, #164]	; (800531c <prvAddNewTaskToReadyList+0xb8>)
 8005278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <prvAddNewTaskToReadyList+0xbc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005282:	4a27      	ldr	r2, [pc, #156]	; (8005320 <prvAddNewTaskToReadyList+0xbc>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <prvAddNewTaskToReadyList+0xb8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d110      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005290:	f000 fad2 	bl	8005838 <prvInitialiseTaskLists>
 8005294:	e00d      	b.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <prvAddNewTaskToReadyList+0xc0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800529e:	4b20      	ldr	r3, [pc, #128]	; (8005320 <prvAddNewTaskToReadyList+0xbc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d802      	bhi.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <prvAddNewTaskToReadyList+0xbc>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052b2:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <prvAddNewTaskToReadyList+0xc4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <prvAddNewTaskToReadyList+0xc4>)
 80052ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	2201      	movs	r2, #1
 80052c2:	409a      	lsls	r2, r3
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4a15      	ldr	r2, [pc, #84]	; (8005330 <prvAddNewTaskToReadyList+0xcc>)
 80052dc:	441a      	add	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f7ff fe02 	bl	8004eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052ea:	f000 fcef 	bl	8005ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <prvAddNewTaskToReadyList+0xc0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <prvAddNewTaskToReadyList+0xbc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	429a      	cmp	r2, r3
 8005302:	d207      	bcs.n	8005314 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <prvAddNewTaskToReadyList+0xd0>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000658 	.word	0x20000658
 8005320:	20000558 	.word	0x20000558
 8005324:	20000664 	.word	0x20000664
 8005328:	20000674 	.word	0x20000674
 800532c:	20000660 	.word	0x20000660
 8005330:	2000055c 	.word	0x2000055c
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800534a:	4b13      	ldr	r3, [pc, #76]	; (8005398 <vTaskDelay+0x60>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <vTaskDelay+0x30>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60bb      	str	r3, [r7, #8]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005368:	f000 f884 	bl	8005474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800536c:	2100      	movs	r1, #0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fb28 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005374:	f000 f88c 	bl	8005490 <xTaskResumeAll>
 8005378:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <vTaskDelay+0x64>)
 8005382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000680 	.word	0x20000680
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	; 0x28
 80053a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053ae:	463a      	mov	r2, r7
 80053b0:	1d39      	adds	r1, r7, #4
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fb fea4 	bl	8001104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	9202      	str	r2, [sp, #8]
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2300      	movs	r3, #0
 80053cc:	460a      	mov	r2, r1
 80053ce:	4921      	ldr	r1, [pc, #132]	; (8005454 <vTaskStartScheduler+0xb4>)
 80053d0:	4821      	ldr	r0, [pc, #132]	; (8005458 <vTaskStartScheduler+0xb8>)
 80053d2:	f7ff fe10 	bl	8004ff6 <xTaskCreateStatic>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4a20      	ldr	r2, [pc, #128]	; (800545c <vTaskStartScheduler+0xbc>)
 80053da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053dc:	4b1f      	ldr	r3, [pc, #124]	; (800545c <vTaskStartScheduler+0xbc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053e4:	2301      	movs	r3, #1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e001      	b.n	80053ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d11b      	bne.n	800542c <vTaskStartScheduler+0x8c>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	613b      	str	r3, [r7, #16]
}
 8005406:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005408:	4b15      	ldr	r3, [pc, #84]	; (8005460 <vTaskStartScheduler+0xc0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	334c      	adds	r3, #76	; 0x4c
 800540e:	4a15      	ldr	r2, [pc, #84]	; (8005464 <vTaskStartScheduler+0xc4>)
 8005410:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005412:	4b15      	ldr	r3, [pc, #84]	; (8005468 <vTaskStartScheduler+0xc8>)
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <vTaskStartScheduler+0xcc>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <vTaskStartScheduler+0xd0>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005426:	f000 fbaf 	bl	8005b88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800542a:	e00e      	b.n	800544a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d10a      	bne.n	800544a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <vTaskStartScheduler+0xa8>
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	08006458 	.word	0x08006458
 8005458:	08005809 	.word	0x08005809
 800545c:	2000067c 	.word	0x2000067c
 8005460:	20000558 	.word	0x20000558
 8005464:	20000018 	.word	0x20000018
 8005468:	20000678 	.word	0x20000678
 800546c:	20000664 	.word	0x20000664
 8005470:	2000065c 	.word	0x2000065c

08005474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <vTaskSuspendAll+0x18>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	4a03      	ldr	r2, [pc, #12]	; (800548c <vTaskSuspendAll+0x18>)
 8005480:	6013      	str	r3, [r2, #0]
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000680 	.word	0x20000680

08005490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800549e:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <xTaskResumeAll+0x114>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <xTaskResumeAll+0x2c>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	603b      	str	r3, [r7, #0]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054bc:	f000 fbd6 	bl	8005c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054c0:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <xTaskResumeAll+0x114>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4a37      	ldr	r2, [pc, #220]	; (80055a4 <xTaskResumeAll+0x114>)
 80054c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <xTaskResumeAll+0x114>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d161      	bne.n	8005596 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054d2:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <xTaskResumeAll+0x118>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d05d      	beq.n	8005596 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054da:	e02e      	b.n	800553a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054dc:	4b33      	ldr	r3, [pc, #204]	; (80055ac <xTaskResumeAll+0x11c>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3318      	adds	r3, #24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fd5b 	bl	8004fa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fd56 	bl	8004fa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	2201      	movs	r2, #1
 80054fe:	409a      	lsls	r2, r3
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <xTaskResumeAll+0x120>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	4a2a      	ldr	r2, [pc, #168]	; (80055b0 <xTaskResumeAll+0x120>)
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <xTaskResumeAll+0x124>)
 8005518:	441a      	add	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3304      	adds	r3, #4
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f7ff fce4 	bl	8004eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <xTaskResumeAll+0x128>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005534:	4b21      	ldr	r3, [pc, #132]	; (80055bc <xTaskResumeAll+0x12c>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <xTaskResumeAll+0x11c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1cc      	bne.n	80054dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005548:	f000 fa18 	bl	800597c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800554c:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <xTaskResumeAll+0x130>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d010      	beq.n	800557a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005558:	f000 f836 	bl	80055c8 <xTaskIncrementTick>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <xTaskResumeAll+0x12c>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3b01      	subs	r3, #1
 800556c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f1      	bne.n	8005558 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <xTaskResumeAll+0x130>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <xTaskResumeAll+0x12c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005582:	2301      	movs	r3, #1
 8005584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <xTaskResumeAll+0x134>)
 8005588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005596:	f000 fb99 	bl	8005ccc <vPortExitCritical>

	return xAlreadyYielded;
 800559a:	68bb      	ldr	r3, [r7, #8]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000680 	.word	0x20000680
 80055a8:	20000658 	.word	0x20000658
 80055ac:	20000618 	.word	0x20000618
 80055b0:	20000660 	.word	0x20000660
 80055b4:	2000055c 	.word	0x2000055c
 80055b8:	20000558 	.word	0x20000558
 80055bc:	2000066c 	.word	0x2000066c
 80055c0:	20000668 	.word	0x20000668
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d2:	4b51      	ldr	r3, [pc, #324]	; (8005718 <xTaskIncrementTick+0x150>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 808d 	bne.w	80056f6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055dc:	4b4f      	ldr	r3, [pc, #316]	; (800571c <xTaskIncrementTick+0x154>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055e4:	4a4d      	ldr	r2, [pc, #308]	; (800571c <xTaskIncrementTick+0x154>)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d120      	bne.n	8005632 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055f0:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <xTaskIncrementTick+0x158>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <xTaskIncrementTick+0x48>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	603b      	str	r3, [r7, #0]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xTaskIncrementTick+0x46>
 8005610:	4b43      	ldr	r3, [pc, #268]	; (8005720 <xTaskIncrementTick+0x158>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	4b43      	ldr	r3, [pc, #268]	; (8005724 <xTaskIncrementTick+0x15c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a41      	ldr	r2, [pc, #260]	; (8005720 <xTaskIncrementTick+0x158>)
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4a41      	ldr	r2, [pc, #260]	; (8005724 <xTaskIncrementTick+0x15c>)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4b40      	ldr	r3, [pc, #256]	; (8005728 <xTaskIncrementTick+0x160>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a3f      	ldr	r2, [pc, #252]	; (8005728 <xTaskIncrementTick+0x160>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	f000 f9a5 	bl	800597c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <xTaskIncrementTick+0x164>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	429a      	cmp	r2, r3
 800563a:	d34d      	bcc.n	80056d8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563c:	4b38      	ldr	r3, [pc, #224]	; (8005720 <xTaskIncrementTick+0x158>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <xTaskIncrementTick+0x82>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <xTaskIncrementTick+0x84>
 800564a:	2300      	movs	r3, #0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005650:	4b36      	ldr	r3, [pc, #216]	; (800572c <xTaskIncrementTick+0x164>)
 8005652:	f04f 32ff 	mov.w	r2, #4294967295
 8005656:	601a      	str	r2, [r3, #0]
					break;
 8005658:	e03e      	b.n	80056d8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800565a:	4b31      	ldr	r3, [pc, #196]	; (8005720 <xTaskIncrementTick+0x158>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	d203      	bcs.n	800567a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <xTaskIncrementTick+0x164>)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6013      	str	r3, [r2, #0]
						break;
 8005678:	e02e      	b.n	80056d8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3304      	adds	r3, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fc90 	bl	8004fa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3318      	adds	r3, #24
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fc87 	bl	8004fa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <xTaskIncrementTick+0x168>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <xTaskIncrementTick+0x168>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <xTaskIncrementTick+0x16c>)
 80056b6:	441a      	add	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7ff fc15 	bl	8004eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <xTaskIncrementTick+0x170>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3b4      	bcc.n	800563c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056d2:	2301      	movs	r3, #1
 80056d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d6:	e7b1      	b.n	800563c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056d8:	4b17      	ldr	r3, [pc, #92]	; (8005738 <xTaskIncrementTick+0x170>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056de:	4915      	ldr	r1, [pc, #84]	; (8005734 <xTaskIncrementTick+0x16c>)
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d907      	bls.n	8005700 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e004      	b.n	8005700 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <xTaskIncrementTick+0x174>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a0f      	ldr	r2, [pc, #60]	; (800573c <xTaskIncrementTick+0x174>)
 80056fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <xTaskIncrementTick+0x178>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800570c:	697b      	ldr	r3, [r7, #20]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000680 	.word	0x20000680
 800571c:	2000065c 	.word	0x2000065c
 8005720:	20000610 	.word	0x20000610
 8005724:	20000614 	.word	0x20000614
 8005728:	20000670 	.word	0x20000670
 800572c:	20000678 	.word	0x20000678
 8005730:	20000660 	.word	0x20000660
 8005734:	2000055c 	.word	0x2000055c
 8005738:	20000558 	.word	0x20000558
 800573c:	20000668 	.word	0x20000668
 8005740:	2000066c 	.word	0x2000066c

08005744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <vTaskSwitchContext+0xac>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <vTaskSwitchContext+0xb0>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005758:	e044      	b.n	80057e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <vTaskSwitchContext+0xb0>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005760:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <vTaskSwitchContext+0xb4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	fab3 f383 	clz	r3, r3
 800576c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	f1c3 031f 	rsb	r3, r3, #31
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	4921      	ldr	r1, [pc, #132]	; (80057fc <vTaskSwitchContext+0xb8>)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	607b      	str	r3, [r7, #4]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <vTaskSwitchContext+0x5a>
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4a14      	ldr	r2, [pc, #80]	; (80057fc <vTaskSwitchContext+0xb8>)
 80057ac:	4413      	add	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3308      	adds	r3, #8
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d104      	bne.n	80057d0 <vTaskSwitchContext+0x8c>
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <vTaskSwitchContext+0xbc>)
 80057d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <vTaskSwitchContext+0xbc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	334c      	adds	r3, #76	; 0x4c
 80057e0:	4a08      	ldr	r2, [pc, #32]	; (8005804 <vTaskSwitchContext+0xc0>)
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000680 	.word	0x20000680
 80057f4:	2000066c 	.word	0x2000066c
 80057f8:	20000660 	.word	0x20000660
 80057fc:	2000055c 	.word	0x2000055c
 8005800:	20000558 	.word	0x20000558
 8005804:	20000018 	.word	0x20000018

08005808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005810:	f000 f852 	bl	80058b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <prvIdleTask+0x28>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d9f9      	bls.n	8005810 <prvIdleTask+0x8>
			{
				taskYIELD();
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <prvIdleTask+0x2c>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800582c:	e7f0      	b.n	8005810 <prvIdleTask+0x8>
 800582e:	bf00      	nop
 8005830:	2000055c 	.word	0x2000055c
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	e00c      	b.n	800585e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <prvInitialiseTaskLists+0x60>)
 8005850:	4413      	add	r3, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fb20 	bl	8004e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3301      	adds	r3, #1
 800585c:	607b      	str	r3, [r7, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d9ef      	bls.n	8005844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005864:	480d      	ldr	r0, [pc, #52]	; (800589c <prvInitialiseTaskLists+0x64>)
 8005866:	f7ff fb17 	bl	8004e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800586a:	480d      	ldr	r0, [pc, #52]	; (80058a0 <prvInitialiseTaskLists+0x68>)
 800586c:	f7ff fb14 	bl	8004e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005870:	480c      	ldr	r0, [pc, #48]	; (80058a4 <prvInitialiseTaskLists+0x6c>)
 8005872:	f7ff fb11 	bl	8004e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005876:	480c      	ldr	r0, [pc, #48]	; (80058a8 <prvInitialiseTaskLists+0x70>)
 8005878:	f7ff fb0e 	bl	8004e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800587c:	480b      	ldr	r0, [pc, #44]	; (80058ac <prvInitialiseTaskLists+0x74>)
 800587e:	f7ff fb0b 	bl	8004e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <prvInitialiseTaskLists+0x78>)
 8005884:	4a05      	ldr	r2, [pc, #20]	; (800589c <prvInitialiseTaskLists+0x64>)
 8005886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvInitialiseTaskLists+0x7c>)
 800588a:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <prvInitialiseTaskLists+0x68>)
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000055c 	.word	0x2000055c
 800589c:	200005e8 	.word	0x200005e8
 80058a0:	200005fc 	.word	0x200005fc
 80058a4:	20000618 	.word	0x20000618
 80058a8:	2000062c 	.word	0x2000062c
 80058ac:	20000644 	.word	0x20000644
 80058b0:	20000610 	.word	0x20000610
 80058b4:	20000614 	.word	0x20000614

080058b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058be:	e019      	b.n	80058f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058c0:	f000 f9d4 	bl	8005c6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058c4:	4b10      	ldr	r3, [pc, #64]	; (8005908 <prvCheckTasksWaitingTermination+0x50>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fb67 	bl	8004fa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <prvCheckTasksWaitingTermination+0x54>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a0b      	ldr	r2, [pc, #44]	; (800590c <prvCheckTasksWaitingTermination+0x54>)
 80058de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <prvCheckTasksWaitingTermination+0x58>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <prvCheckTasksWaitingTermination+0x58>)
 80058e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058ea:	f000 f9ef 	bl	8005ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f810 	bl	8005914 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <prvCheckTasksWaitingTermination+0x58>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e1      	bne.n	80058c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	2000062c 	.word	0x2000062c
 800590c:	20000658 	.word	0x20000658
 8005910:	20000640 	.word	0x20000640

08005914 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	334c      	adds	r3, #76	; 0x4c
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fc87 	bl	8006234 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d108      	bne.n	8005942 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fb1f 	bl	8005f78 <vPortFree>
				vPortFree( pxTCB );
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb1c 	bl	8005f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005940:	e018      	b.n	8005974 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d103      	bne.n	8005954 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb13 	bl	8005f78 <vPortFree>
	}
 8005952:	e00f      	b.n	8005974 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800595a:	2b02      	cmp	r3, #2
 800595c:	d00a      	beq.n	8005974 <prvDeleteTCB+0x60>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <prvDeleteTCB+0x5e>
	}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005982:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <prvResetNextTaskUnblockTime+0x40>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <prvResetNextTaskUnblockTime+0x14>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <prvResetNextTaskUnblockTime+0x16>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvResetNextTaskUnblockTime+0x44>)
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800599e:	e008      	b.n	80059b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <prvResetNextTaskUnblockTime+0x40>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <prvResetNextTaskUnblockTime+0x44>)
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr
 80059bc:	20000610 	.word	0x20000610
 80059c0:	20000678 	.word	0x20000678

080059c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ce:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xb0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fae2 	bl	8004fa4 <uxListRemove>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	2201      	movs	r2, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43da      	mvns	r2, r3
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d10a      	bne.n	8005a1c <prvAddCurrentTaskToDelayedList+0x58>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	481a      	ldr	r0, [pc, #104]	; (8005a80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a16:	f7ff fa6a 	bl	8004eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a1a:	e026      	b.n	8005a6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4413      	add	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a24:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d209      	bcs.n	8005a48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7ff fa77 	bl	8004f34 <vListInsert>
}
 8005a46:	e010      	b.n	8005a6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7ff fa6d 	bl	8004f34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d202      	bcs.n	8005a6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6013      	str	r3, [r2, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	2000065c 	.word	0x2000065c
 8005a78:	20000558 	.word	0x20000558
 8005a7c:	20000660 	.word	0x20000660
 8005a80:	20000644 	.word	0x20000644
 8005a84:	20000614 	.word	0x20000614
 8005a88:	20000610 	.word	0x20000610
 8005a8c:	20000678 	.word	0x20000678

08005a90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0201 	bic.w	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b04      	subs	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <pxPortInitialiseStack+0x54>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3b14      	subs	r3, #20
 8005aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b20      	subs	r3, #32
 8005ad6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	08005ae9 	.word	0x08005ae9

08005ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <prvTaskExitError+0x54>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d00a      	beq.n	8005b12 <prvTaskExitError+0x2a>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60fb      	str	r3, [r7, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <prvTaskExitError+0x28>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60bb      	str	r3, [r7, #8]
}
 8005b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b26:	bf00      	nop
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0fc      	beq.n	8005b28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000014 	.word	0x20000014

08005b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <pxCurrentTCBConst2>)
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
 8005b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b4a:	f380 8809 	msr	PSP, r0
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005b5e:	4770      	bx	lr

08005b60 <pxCurrentTCBConst2>:
 8005b60:	20000558 	.word	0x20000558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005b68:	4806      	ldr	r0, [pc, #24]	; (8005b84 <prvPortStartFirstTask+0x1c>)
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f380 8808 	msr	MSP, r0
 8005b72:	b662      	cpsie	i
 8005b74:	b661      	cpsie	f
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	df00      	svc	0
 8005b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b82:	bf00      	nop
 8005b84:	e000ed08 	.word	0xe000ed08

08005b88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b8e:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <xPortStartScheduler+0xd0>)
 8005b90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	22ff      	movs	r2, #255	; 0xff
 8005b9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <xPortStartScheduler+0xd4>)
 8005bb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005bb8:	2207      	movs	r2, #7
 8005bba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bbc:	e009      	b.n	8005bd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bbe:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	4a26      	ldr	r2, [pc, #152]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005bc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d0ef      	beq.n	8005bbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1c3 0307 	rsb	r3, r3, #7
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d00a      	beq.n	8005c00 <xPortStartScheduler+0x78>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	60bb      	str	r3, [r7, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c00:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005c08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c12:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <xPortStartScheduler+0xd8>)
 8005c14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c1e:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <xPortStartScheduler+0xdc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a10      	ldr	r2, [pc, #64]	; (8005c64 <xPortStartScheduler+0xdc>)
 8005c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c2a:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <xPortStartScheduler+0xdc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a0d      	ldr	r2, [pc, #52]	; (8005c64 <xPortStartScheduler+0xdc>)
 8005c30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c36:	f000 f8b9 	bl	8005dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <xPortStartScheduler+0xe0>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c40:	f7ff ff92 	bl	8005b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c44:	f7ff fd7e 	bl	8005744 <vTaskSwitchContext>
	prvTaskExitError();
 8005c48:	f7ff ff4e 	bl	8005ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	e000e400 	.word	0xe000e400
 8005c5c:	20000684 	.word	0x20000684
 8005c60:	20000688 	.word	0x20000688
 8005c64:	e000ed20 	.word	0xe000ed20
 8005c68:	20000014 	.word	0x20000014

08005c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	607b      	str	r3, [r7, #4]
}
 8005c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <vPortEnterCritical+0x58>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	4a0d      	ldr	r2, [pc, #52]	; (8005cc4 <vPortEnterCritical+0x58>)
 8005c8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <vPortEnterCritical+0x58>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10f      	bne.n	8005cb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <vPortEnterCritical+0x5c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	603b      	str	r3, [r7, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <vPortEnterCritical+0x4a>
	}
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000014 	.word	0x20000014
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cd2:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <vPortExitCritical+0x4c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <vPortExitCritical+0x24>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	607b      	str	r3, [r7, #4]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <vPortExitCritical+0x4c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <vPortExitCritical+0x4c>)
 8005cf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <vPortExitCritical+0x4c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d105      	bne.n	8005d0e <vPortExitCritical+0x42>
 8005d02:	2300      	movs	r3, #0
 8005d04:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	20000014 	.word	0x20000014
 8005d1c:	00000000 	.word	0x00000000

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d30:	6010      	str	r0, [r2, #0]
 8005d32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005d36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d3a:	f380 8811 	msr	BASEPRI, r0
 8005d3e:	f7ff fd01 	bl	8005744 <vTaskSwitchContext>
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8811 	msr	BASEPRI, r0
 8005d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d4e:	6819      	ldr	r1, [r3, #0]
 8005d50:	6808      	ldr	r0, [r1, #0]
 8005d52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d56:	f380 8809 	msr	PSP, r0
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	4770      	bx	lr

08005d60 <pxCurrentTCBConst>:
 8005d60:	20000558 	.word	0x20000558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	607b      	str	r3, [r7, #4]
}
 8005d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d82:	f7ff fc21 	bl	80055c8 <xTaskIncrementTick>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <SysTick_Handler+0x40>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
}
 8005d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <vPortSetupTimerInterrupt+0x30>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <vPortSetupTimerInterrupt+0x34>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <vPortSetupTimerInterrupt+0x38>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <vPortSetupTimerInterrupt+0x3c>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	4a08      	ldr	r2, [pc, #32]	; (8005dec <vPortSetupTimerInterrupt+0x40>)
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <vPortSetupTimerInterrupt+0x30>)
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr
 8005ddc:	e000e010 	.word	0xe000e010
 8005de0:	e000e018 	.word	0xe000e018
 8005de4:	20000008 	.word	0x20000008
 8005de8:	10624dd3 	.word	0x10624dd3
 8005dec:	e000e014 	.word	0xe000e014

08005df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dfc:	f7ff fb3a 	bl	8005474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e00:	4b58      	ldr	r3, [pc, #352]	; (8005f64 <pvPortMalloc+0x174>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e08:	f000 f910 	bl	800602c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e0c:	4b56      	ldr	r3, [pc, #344]	; (8005f68 <pvPortMalloc+0x178>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 808e 	bne.w	8005f36 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01d      	beq.n	8005e5c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e20:	2208      	movs	r2, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d014      	beq.n	8005e5c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	3308      	adds	r3, #8
 8005e3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pvPortMalloc+0x6c>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	617b      	str	r3, [r7, #20]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d069      	beq.n	8005f36 <pvPortMalloc+0x146>
 8005e62:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <pvPortMalloc+0x17c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d864      	bhi.n	8005f36 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e6c:	4b40      	ldr	r3, [pc, #256]	; (8005f70 <pvPortMalloc+0x180>)
 8005e6e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e70:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <pvPortMalloc+0x180>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e76:	e004      	b.n	8005e82 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d903      	bls.n	8005e94 <pvPortMalloc+0xa4>
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f1      	bne.n	8005e78 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e94:	4b33      	ldr	r3, [pc, #204]	; (8005f64 <pvPortMalloc+0x174>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d04b      	beq.n	8005f36 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4413      	add	r3, r2
 8005ea6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	2308      	movs	r3, #8
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d91f      	bls.n	8005f00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <pvPortMalloc+0xf8>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	613b      	str	r3, [r7, #16]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005efa:	69b8      	ldr	r0, [r7, #24]
 8005efc:	f000 f8f8 	bl	80060f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <pvPortMalloc+0x17c>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <pvPortMalloc+0x17c>)
 8005f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <pvPortMalloc+0x17c>)
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <pvPortMalloc+0x184>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d203      	bcs.n	8005f22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <pvPortMalloc+0x17c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <pvPortMalloc+0x184>)
 8005f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <pvPortMalloc+0x178>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f36:	f7ff faab 	bl	8005490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <pvPortMalloc+0x16a>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	60fb      	str	r3, [r7, #12]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <pvPortMalloc+0x168>
	return pvReturn;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	; 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20001294 	.word	0x20001294
 8005f68:	200012a0 	.word	0x200012a0
 8005f6c:	20001298 	.word	0x20001298
 8005f70:	2000128c 	.word	0x2000128c
 8005f74:	2000129c 	.word	0x2000129c

08005f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d048      	beq.n	800601c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	425b      	negs	r3, r3
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4413      	add	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	4b21      	ldr	r3, [pc, #132]	; (8006024 <vPortFree+0xac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <vPortFree+0x44>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60fb      	str	r3, [r7, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <vPortFree+0x62>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60bb      	str	r3, [r7, #8]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	4b11      	ldr	r3, [pc, #68]	; (8006024 <vPortFree+0xac>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d019      	beq.n	800601c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d115      	bne.n	800601c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <vPortFree+0xac>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006000:	f7ff fa38 	bl	8005474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	4b07      	ldr	r3, [pc, #28]	; (8006028 <vPortFree+0xb0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4413      	add	r3, r2
 800600e:	4a06      	ldr	r2, [pc, #24]	; (8006028 <vPortFree+0xb0>)
 8006010:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006012:	6938      	ldr	r0, [r7, #16]
 8006014:	f000 f86c 	bl	80060f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006018:	f7ff fa3a 	bl	8005490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800601c:	bf00      	nop
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	200012a0 	.word	0x200012a0
 8006028:	20001298 	.word	0x20001298

0800602c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006032:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006038:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <prvHeapInit+0xac>)
 800603a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3307      	adds	r3, #7
 800604a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0307 	bic.w	r3, r3, #7
 8006052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	4a1f      	ldr	r2, [pc, #124]	; (80060d8 <prvHeapInit+0xac>)
 800605c:	4413      	add	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006064:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <prvHeapInit+0xb0>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800606a:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <prvHeapInit+0xb0>)
 800606c:	2200      	movs	r2, #0
 800606e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006078:	2208      	movs	r2, #8
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0307 	bic.w	r3, r3, #7
 8006086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <prvHeapInit+0xb4>)
 800608c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800608e:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <prvHeapInit+0xb4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2200      	movs	r2, #0
 8006094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <prvHeapInit+0xb4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <prvHeapInit+0xb4>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <prvHeapInit+0xb8>)
 80060ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <prvHeapInit+0xbc>)
 80060c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <prvHeapInit+0xc0>)
 80060c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060ca:	601a      	str	r2, [r3, #0]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	2000068c 	.word	0x2000068c
 80060dc:	2000128c 	.word	0x2000128c
 80060e0:	20001294 	.word	0x20001294
 80060e4:	2000129c 	.word	0x2000129c
 80060e8:	20001298 	.word	0x20001298
 80060ec:	200012a0 	.word	0x200012a0

080060f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060f8:	4b27      	ldr	r3, [pc, #156]	; (8006198 <prvInsertBlockIntoFreeList+0xa8>)
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e002      	b.n	8006104 <prvInsertBlockIntoFreeList+0x14>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d8f7      	bhi.n	80060fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d108      	bne.n	8006132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	441a      	add	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	441a      	add	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d118      	bne.n	8006178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b14      	ldr	r3, [pc, #80]	; (800619c <prvInsertBlockIntoFreeList+0xac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d00d      	beq.n	800616e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	441a      	add	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e008      	b.n	8006180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800616e:	4b0b      	ldr	r3, [pc, #44]	; (800619c <prvInsertBlockIntoFreeList+0xac>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e003      	b.n	8006180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d002      	beq.n	800618e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr
 8006198:	2000128c 	.word	0x2000128c
 800619c:	20001294 	.word	0x20001294

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2600      	movs	r6, #0
 80061a4:	4d0c      	ldr	r5, [pc, #48]	; (80061d8 <__libc_init_array+0x38>)
 80061a6:	4c0d      	ldr	r4, [pc, #52]	; (80061dc <__libc_init_array+0x3c>)
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	f000 f8f0 	bl	8006394 <_init>
 80061b4:	2600      	movs	r6, #0
 80061b6:	4d0a      	ldr	r5, [pc, #40]	; (80061e0 <__libc_init_array+0x40>)
 80061b8:	4c0a      	ldr	r4, [pc, #40]	; (80061e4 <__libc_init_array+0x44>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	080064d8 	.word	0x080064d8
 80061dc:	080064d8 	.word	0x080064d8
 80061e0:	080064d8 	.word	0x080064d8
 80061e4:	080064dc 	.word	0x080064dc

080061e8 <__retarget_lock_acquire_recursive>:
 80061e8:	4770      	bx	lr

080061ea <__retarget_lock_release_recursive>:
 80061ea:	4770      	bx	lr

080061ec <memcpy>:
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f4:	d100      	bne.n	80061f8 <memcpy+0xc>
 80061f6:	4770      	bx	lr
 80061f8:	b510      	push	{r4, lr}
 80061fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fe:	4291      	cmp	r1, r2
 8006200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006204:	d1f9      	bne.n	80061fa <memcpy+0xe>
 8006206:	bd10      	pop	{r4, pc}

08006208 <memset>:
 8006208:	4603      	mov	r3, r0
 800620a:	4402      	add	r2, r0
 800620c:	4293      	cmp	r3, r2
 800620e:	d100      	bne.n	8006212 <memset+0xa>
 8006210:	4770      	bx	lr
 8006212:	f803 1b01 	strb.w	r1, [r3], #1
 8006216:	e7f9      	b.n	800620c <memset+0x4>

08006218 <cleanup_glue>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	460c      	mov	r4, r1
 800621c:	6809      	ldr	r1, [r1, #0]
 800621e:	4605      	mov	r5, r0
 8006220:	b109      	cbz	r1, 8006226 <cleanup_glue+0xe>
 8006222:	f7ff fff9 	bl	8006218 <cleanup_glue>
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800622e:	f000 b869 	b.w	8006304 <_free_r>
	...

08006234 <_reclaim_reent>:
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <_reclaim_reent+0xb4>)
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4604      	mov	r4, r0
 800623c:	4283      	cmp	r3, r0
 800623e:	d051      	beq.n	80062e4 <_reclaim_reent+0xb0>
 8006240:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006242:	b143      	cbz	r3, 8006256 <_reclaim_reent+0x22>
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14a      	bne.n	80062e0 <_reclaim_reent+0xac>
 800624a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	b111      	cbz	r1, 8006256 <_reclaim_reent+0x22>
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f857 	bl	8006304 <_free_r>
 8006256:	6961      	ldr	r1, [r4, #20]
 8006258:	b111      	cbz	r1, 8006260 <_reclaim_reent+0x2c>
 800625a:	4620      	mov	r0, r4
 800625c:	f000 f852 	bl	8006304 <_free_r>
 8006260:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006262:	b111      	cbz	r1, 800626a <_reclaim_reent+0x36>
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f84d 	bl	8006304 <_free_r>
 800626a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800626c:	b111      	cbz	r1, 8006274 <_reclaim_reent+0x40>
 800626e:	4620      	mov	r0, r4
 8006270:	f000 f848 	bl	8006304 <_free_r>
 8006274:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006276:	b111      	cbz	r1, 800627e <_reclaim_reent+0x4a>
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f843 	bl	8006304 <_free_r>
 800627e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006280:	b111      	cbz	r1, 8006288 <_reclaim_reent+0x54>
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f83e 	bl	8006304 <_free_r>
 8006288:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800628a:	b111      	cbz	r1, 8006292 <_reclaim_reent+0x5e>
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f839 	bl	8006304 <_free_r>
 8006292:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006294:	b111      	cbz	r1, 800629c <_reclaim_reent+0x68>
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f834 	bl	8006304 <_free_r>
 800629c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800629e:	b111      	cbz	r1, 80062a6 <_reclaim_reent+0x72>
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f82f 	bl	8006304 <_free_r>
 80062a6:	69a3      	ldr	r3, [r4, #24]
 80062a8:	b1e3      	cbz	r3, 80062e4 <_reclaim_reent+0xb0>
 80062aa:	4620      	mov	r0, r4
 80062ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ae:	4798      	blx	r3
 80062b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062b2:	b1b9      	cbz	r1, 80062e4 <_reclaim_reent+0xb0>
 80062b4:	4620      	mov	r0, r4
 80062b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062ba:	f7ff bfad 	b.w	8006218 <cleanup_glue>
 80062be:	5949      	ldr	r1, [r1, r5]
 80062c0:	b941      	cbnz	r1, 80062d4 <_reclaim_reent+0xa0>
 80062c2:	3504      	adds	r5, #4
 80062c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c6:	2d80      	cmp	r5, #128	; 0x80
 80062c8:	68d9      	ldr	r1, [r3, #12]
 80062ca:	d1f8      	bne.n	80062be <_reclaim_reent+0x8a>
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 f819 	bl	8006304 <_free_r>
 80062d2:	e7ba      	b.n	800624a <_reclaim_reent+0x16>
 80062d4:	680e      	ldr	r6, [r1, #0]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 f814 	bl	8006304 <_free_r>
 80062dc:	4631      	mov	r1, r6
 80062de:	e7ef      	b.n	80062c0 <_reclaim_reent+0x8c>
 80062e0:	2500      	movs	r5, #0
 80062e2:	e7ef      	b.n	80062c4 <_reclaim_reent+0x90>
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	bf00      	nop
 80062e8:	20000018 	.word	0x20000018

080062ec <__malloc_lock>:
 80062ec:	4801      	ldr	r0, [pc, #4]	; (80062f4 <__malloc_lock+0x8>)
 80062ee:	f7ff bf7b 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 80062f2:	bf00      	nop
 80062f4:	200012a4 	.word	0x200012a4

080062f8 <__malloc_unlock>:
 80062f8:	4801      	ldr	r0, [pc, #4]	; (8006300 <__malloc_unlock+0x8>)
 80062fa:	f7ff bf76 	b.w	80061ea <__retarget_lock_release_recursive>
 80062fe:	bf00      	nop
 8006300:	200012a4 	.word	0x200012a4

08006304 <_free_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4605      	mov	r5, r0
 8006308:	2900      	cmp	r1, #0
 800630a:	d040      	beq.n	800638e <_free_r+0x8a>
 800630c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006310:	1f0c      	subs	r4, r1, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	bfb8      	it	lt
 8006316:	18e4      	addlt	r4, r4, r3
 8006318:	f7ff ffe8 	bl	80062ec <__malloc_lock>
 800631c:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <_free_r+0x8c>)
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	b933      	cbnz	r3, 8006330 <_free_r+0x2c>
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6014      	str	r4, [r2, #0]
 8006326:	4628      	mov	r0, r5
 8006328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800632c:	f7ff bfe4 	b.w	80062f8 <__malloc_unlock>
 8006330:	42a3      	cmp	r3, r4
 8006332:	d908      	bls.n	8006346 <_free_r+0x42>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	1821      	adds	r1, r4, r0
 8006338:	428b      	cmp	r3, r1
 800633a:	bf01      	itttt	eq
 800633c:	6819      	ldreq	r1, [r3, #0]
 800633e:	685b      	ldreq	r3, [r3, #4]
 8006340:	1809      	addeq	r1, r1, r0
 8006342:	6021      	streq	r1, [r4, #0]
 8006344:	e7ed      	b.n	8006322 <_free_r+0x1e>
 8006346:	461a      	mov	r2, r3
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	b10b      	cbz	r3, 8006350 <_free_r+0x4c>
 800634c:	42a3      	cmp	r3, r4
 800634e:	d9fa      	bls.n	8006346 <_free_r+0x42>
 8006350:	6811      	ldr	r1, [r2, #0]
 8006352:	1850      	adds	r0, r2, r1
 8006354:	42a0      	cmp	r0, r4
 8006356:	d10b      	bne.n	8006370 <_free_r+0x6c>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	4401      	add	r1, r0
 800635c:	1850      	adds	r0, r2, r1
 800635e:	4283      	cmp	r3, r0
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	d1e0      	bne.n	8006326 <_free_r+0x22>
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4401      	add	r1, r0
 800636a:	6011      	str	r1, [r2, #0]
 800636c:	6053      	str	r3, [r2, #4]
 800636e:	e7da      	b.n	8006326 <_free_r+0x22>
 8006370:	d902      	bls.n	8006378 <_free_r+0x74>
 8006372:	230c      	movs	r3, #12
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	e7d6      	b.n	8006326 <_free_r+0x22>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428b      	cmp	r3, r1
 800637e:	bf01      	itttt	eq
 8006380:	6819      	ldreq	r1, [r3, #0]
 8006382:	685b      	ldreq	r3, [r3, #4]
 8006384:	1809      	addeq	r1, r1, r0
 8006386:	6021      	streq	r1, [r4, #0]
 8006388:	6063      	str	r3, [r4, #4]
 800638a:	6054      	str	r4, [r2, #4]
 800638c:	e7cb      	b.n	8006326 <_free_r+0x22>
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200012a8 	.word	0x200012a8

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr
