
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008528  08008528  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008528  08008528  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008528  08008528  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001324  20000078  080085a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  080085a8  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aab5  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dbd  00000000  00000000  0003ab56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0003e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  000400a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b570  00000000  00000000  00041728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a729  00000000  00000000  0005cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c9c9  00000000  00000000  000773c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  00113ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008394 	.word	0x08008394

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008394 	.word	0x08008394

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__gesf2>:
 8000d60:	f04f 3cff 	mov.w	ip, #4294967295
 8000d64:	e006      	b.n	8000d74 <__cmpsf2+0x4>
 8000d66:	bf00      	nop

08000d68 <__lesf2>:
 8000d68:	f04f 0c01 	mov.w	ip, #1
 8000d6c:	e002      	b.n	8000d74 <__cmpsf2+0x4>
 8000d6e:	bf00      	nop

08000d70 <__cmpsf2>:
 8000d70:	f04f 0c01 	mov.w	ip, #1
 8000d74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	bf18      	it	ne
 8000d86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8a:	d011      	beq.n	8000db0 <__cmpsf2+0x40>
 8000d8c:	b001      	add	sp, #4
 8000d8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d92:	bf18      	it	ne
 8000d94:	ea90 0f01 	teqne	r0, r1
 8000d98:	bf58      	it	pl
 8000d9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d9e:	bf88      	it	hi
 8000da0:	17c8      	asrhi	r0, r1, #31
 8000da2:	bf38      	it	cc
 8000da4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000da8:	bf18      	it	ne
 8000daa:	f040 0001 	orrne.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db4:	d102      	bne.n	8000dbc <__cmpsf2+0x4c>
 8000db6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dba:	d105      	bne.n	8000dc8 <__cmpsf2+0x58>
 8000dbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dc0:	d1e4      	bne.n	8000d8c <__cmpsf2+0x1c>
 8000dc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dc6:	d0e1      	beq.n	8000d8c <__cmpsf2+0x1c>
 8000dc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__aeabi_cfrcmple>:
 8000dd0:	4684      	mov	ip, r0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	4661      	mov	r1, ip
 8000dd6:	e7ff      	b.n	8000dd8 <__aeabi_cfcmpeq>

08000dd8 <__aeabi_cfcmpeq>:
 8000dd8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dda:	f7ff ffc9 	bl	8000d70 <__cmpsf2>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf48      	it	mi
 8000de2:	f110 0f00 	cmnmi.w	r0, #0
 8000de6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000de8 <__aeabi_fcmpeq>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff fff4 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000df0:	bf0c      	ite	eq
 8000df2:	2001      	moveq	r0, #1
 8000df4:	2000      	movne	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_fcmplt>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffea 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000e04:	bf34      	ite	cc
 8000e06:	2001      	movcc	r0, #1
 8000e08:	2000      	movcs	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_fcmple>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffe0 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000e18:	bf94      	ite	ls
 8000e1a:	2001      	movls	r0, #1
 8000e1c:	2000      	movhi	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmpge>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffd2 	bl	8000dd0 <__aeabi_cfrcmple>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmpgt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffc8 	bl	8000dd0 <__aeabi_cfrcmple>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_f2uiz>:
 8000e4c:	0042      	lsls	r2, r0, #1
 8000e4e:	d20e      	bcs.n	8000e6e <__aeabi_f2uiz+0x22>
 8000e50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e54:	d30b      	bcc.n	8000e6e <__aeabi_f2uiz+0x22>
 8000e56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5e:	d409      	bmi.n	8000e74 <__aeabi_f2uiz+0x28>
 8000e60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	4770      	bx	lr
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4770      	bx	lr
 8000e74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e78:	d101      	bne.n	8000e7e <__aeabi_f2uiz+0x32>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d102      	bne.n	8000e84 <__aeabi_f2uiz+0x38>
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e82:	4770      	bx	lr
 8000e84:	f04f 0000 	mov.w	r0, #0
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <bytestowrite>:

/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite(uint16_t size, uint16_t offset) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	460a      	mov	r2, r1
 8000e96:	80fb      	strh	r3, [r7, #6]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	80bb      	strh	r3, [r7, #4]
	if ((size + offset) < PAGE_SIZE)
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea4:	dc01      	bgt.n	8000eaa <bytestowrite+0x1e>
		return size;
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	e003      	b.n	8000eb2 <bytestowrite+0x26>
	else
		return PAGE_SIZE - offset;
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000eb0:	b29b      	uxth	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <EEPROM_Write>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	60ba      	str	r2, [r7, #8]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	81fb      	strh	r3, [r7, #14]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	81bb      	strh	r3, [r7, #12]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE) / log(2);
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da00      	bge.n	8000ee6 <EEPROM_Write+0x2a>
 8000ee4:	333f      	adds	r3, #63	; 0x3f
 8000ee6:	119b      	asrs	r3, r3, #6
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	4413      	add	r3, r2
 8000eee:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage - startPage) + 1;
 8000ef0:	8b7a      	ldrh	r2, [r7, #26]
 8000ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i = 0; i < numofpages; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
 8000f04:	e034      	b.n	8000f70 <EEPROM_Write+0xb4>
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage << paddrposition | offset;
 8000f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset); // calculate the remaining bytes to be written
 8000f1a:	89ba      	ldrh	r2, [r7, #12]
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffb3 	bl	8000e8c <bytestowrite>
 8000f26:	4603      	mov	r3, r0
 8000f28:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 8000f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4413      	add	r3, r2
 8000f30:	8af9      	ldrh	r1, [r7, #22]
 8000f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f36:	9202      	str	r2, [sp, #8]
 8000f38:	8aba      	ldrh	r2, [r7, #20]
 8000f3a:	9201      	str	r2, [sp, #4]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2302      	movs	r3, #2
 8000f40:	460a      	mov	r2, r1
 8000f42:	21a0      	movs	r1, #160	; 0xa0
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <EEPROM_Write+0xc8>)
 8000f46:	f003 fa45 	bl	80043d4 <HAL_I2C_Mem_Write>
				bytesremaining, 1000);  // write the data to the EEPROM

		startPage += 1; // increment the page, so that a new page address can be selected for further write
 8000f4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0; // since we will be writing to a new page, so offset will be 0
 8000f50:	2300      	movs	r3, #0
 8000f52:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;  // reduce the size of the bytes
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	8abb      	ldrh	r3, [r7, #20]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000f5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f5e:	8abb      	ldrh	r3, [r7, #20]
 8000f60:	4413      	add	r3, r2
 8000f62:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);  // Write cycle delay (5ms)
 8000f64:	2005      	movs	r0, #5
 8000f66:	f001 fee5 	bl	8002d34 <HAL_Delay>
	for (int i = 0; i < numofpages; i++) {
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	8b3b      	ldrh	r3, [r7, #24]
 8000f72:	6a3a      	ldr	r2, [r7, #32]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbc6      	blt.n	8000f06 <EEPROM_Write+0x4a>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200004ac 	.word	0x200004ac

08000f88 <float2Bytes>:

void float2Bytes(uint8_t *ftoa_bytes_temp, float float_variable) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	thing.a = float_variable;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < 4; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e00b      	b.n	8000fb4 <float2Bytes+0x2c>
		ftoa_bytes_temp[i] = thing.bytes[i];
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3210      	adds	r2, #16
 8000fa6:	443a      	add	r2, r7
 8000fa8:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000fac:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d9f0      	bls.n	8000f9c <float2Bytes+0x14>
	}

}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <Bytes2float>:

float Bytes2float(uint8_t *ftoa_bytes_temp) {
 8000fc6:	b480      	push	{r7}
 8000fc8:	b087      	sub	sp, #28
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	for (uint8_t i = 0; i < 4; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75fb      	strb	r3, [r7, #23]
 8000fd2:	e00b      	b.n	8000fec <Bytes2float+0x26>
		thing.bytes[i] = ftoa_bytes_temp[i];
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	441a      	add	r2, r3
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	3318      	adds	r3, #24
 8000fe0:	443b      	add	r3, r7
 8000fe2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++) {
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	75fb      	strb	r3, [r7, #23]
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d9f0      	bls.n	8000fd4 <Bytes2float+0xe>
	}

	float float_variable = thing.a;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	613b      	str	r3, [r7, #16]
	return float_variable;
 8000ff6:	693b      	ldr	r3, [r7, #16]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <EEPROM_Write_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM(uint16_t page, uint16_t offset, float data) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	603a      	str	r2, [r7, #0]
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	460b      	mov	r3, r1
 8001012:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <EEPROM_Write_NUM+0x2c>)
 8001018:	f7ff ffb6 	bl	8000f88 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 800101c:	88b9      	ldrh	r1, [r7, #4]
 800101e:	88f8      	ldrh	r0, [r7, #6]
 8001020:	2304      	movs	r3, #4
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <EEPROM_Write_NUM+0x2c>)
 8001024:	f7ff ff4a 	bl	8000ebc <EEPROM_Write>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000094 	.word	0x20000094

08001034 <EEPROM_Read_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM(uint16_t page, uint16_t offset) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	4613      	mov	r3, r2
 8001042:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8001044:	f107 020c 	add.w	r2, r7, #12
 8001048:	88b9      	ldrh	r1, [r7, #4]
 800104a:	88f8      	ldrh	r0, [r7, #6]
 800104c:	2304      	movs	r3, #4
 800104e:	f000 f80b 	bl	8001068 <EEPROM_Read>

	return (Bytes2float(buffer));
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffb5 	bl	8000fc6 <Bytes2float>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <EEPROM_Read>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af04      	add	r7, sp, #16
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	81fb      	strh	r3, [r7, #14]
 8001076:	460b      	mov	r3, r1
 8001078:	81bb      	strh	r3, [r7, #12]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE) / log(2);
 800107e:	2306      	movs	r3, #6
 8001080:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8001086:	88fa      	ldrh	r2, [r7, #6]
 8001088:	89bb      	ldrh	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	da00      	bge.n	8001092 <EEPROM_Read+0x2a>
 8001090:	333f      	adds	r3, #63	; 0x3f
 8001092:	119b      	asrs	r3, r3, #6
 8001094:	b29a      	uxth	r2, r3
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	4413      	add	r3, r2
 800109a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage - startPage) + 1;
 800109c:	8b7a      	ldrh	r2, [r7, #26]
 800109e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i < numofpages; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	e031      	b.n	8001116 <EEPROM_Read+0xae>
		uint16_t MemAddress = startPage << paddrposition | offset;
 80010b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80010c6:	89ba      	ldrh	r2, [r7, #12]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fedd 	bl	8000e8c <bytestowrite>
 80010d2:	4603      	mov	r3, r0
 80010d4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 80010d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	8af9      	ldrh	r1, [r7, #22]
 80010de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e2:	9202      	str	r2, [sp, #8]
 80010e4:	8aba      	ldrh	r2, [r7, #20]
 80010e6:	9201      	str	r2, [sp, #4]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2302      	movs	r3, #2
 80010ec:	460a      	mov	r2, r1
 80010ee:	21a0      	movs	r1, #160	; 0xa0
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <EEPROM_Read+0xc0>)
 80010f2:	f003 fa69 	bl	80045c8 <HAL_I2C_Mem_Read>
				bytesremaining, 1000);
		startPage += 1;
 80010f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f8:	3301      	adds	r3, #1
 80010fa:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8abb      	ldrh	r3, [r7, #20]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8001108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800110a:	8abb      	ldrh	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i < numofpages; i++) {
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	3301      	adds	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	8b3b      	ldrh	r3, [r7, #24]
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbc9      	blt.n	80010b2 <EEPROM_Read+0x4a>
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004ac 	.word	0x200004ac
 800112c:	00000000 	.word	0x00000000

08001130 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 8082 	bne.w	8001246 <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (ultrasonic1.Is_First_Captured == 0) // if the first value is not captured
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d11a      	bne.n	8001180 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 800114a:	2100      	movs	r1, #0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f005 f95d 	bl	800640c <HAL_TIM_ReadCapturedValue>
 8001152:	4603      	mov	r3, r0
 8001154:	4a40      	ldr	r2, [pc, #256]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001156:	6013      	str	r3, [r2, #0]
			TIM_CHANNEL_1); // read the first value
			ultrasonic1.Is_First_Captured = 1; // set the first captured as true
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 800115a:	2201      	movs	r2, #1
 800115c:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 020a 	bic.w	r2, r2, #10
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0202 	orr.w	r2, r2, #2
 800117c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 800117e:	e062      	b.n	8001246 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured == 1) // if the first is already captured
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001182:	7b1b      	ldrb	r3, [r3, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d15e      	bne.n	8001246 <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f005 f93e 	bl	800640c <HAL_TIM_ReadCapturedValue>
 8001190:	4603      	mov	r3, r0
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001194:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1) {
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d907      	bls.n	80011ba <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011ac:	685a      	ldr	r2, [r3, #4]
						- ultrasonic1.IC_Val1;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1ad3      	subs	r3, r2, r3
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b6:	6093      	str	r3, [r2, #8]
 80011b8:	e00f      	b.n	80011da <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2) {
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d909      	bls.n	80011da <HAL_TIM_IC_CaptureCallback+0xaa>
						+ ultrasonic1.IC_Val2;
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011c8:	685a      	ldr	r2, [r3, #4]
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011cc:	681b      	ldr	r3, [r3, #0]
						+ ultrasonic1.IC_Val2;
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011d4:	33ff      	adds	r3, #255	; 0xff
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011d8:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034 / 2;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9ac 	bl	800053c <__aeabi_ui2d>
 80011e4:	a31a      	add	r3, pc, #104	; (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff fa21 	bl	8000630 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fe:	f7ff fb41 	bl	8000884 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc4b 	bl	8000aa4 <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001212:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001216:	2200      	movs	r2, #0
 8001218:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a1a      	ldr	r2, [r3, #32]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020a 	bic.w	r2, r2, #10
 8001228:	621a      	str	r2, [r3, #32]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a12      	ldr	r2, [r2, #32]
 8001234:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0202 	bic.w	r2, r2, #2
 8001244:	60da      	str	r2, [r3, #12]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	b020c49c 	.word	0xb020c49c
 8001254:	3fa16872 	.word	0x3fa16872
 8001258:	20000098 	.word	0x20000098
 800125c:	20000500 	.word	0x20000500

08001260 <HAL_CAN_RxFifo1MsgPendingCallback>:
extern uint32_t mode;

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 800126a:	4a32      	ldr	r2, [pc, #200]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 800126c:	2101      	movs	r1, #1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 f97f 	bl	8003572 <HAL_CAN_GetRxMessage>

	if (RxHeader.IDE == CAN_ID_EXT) {
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d152      	bne.n	8001322 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
		uint8_t id = RxHeader.ExtId & 0xFF;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	73fb      	strb	r3, [r7, #15]
		uint8_t cmd = RxHeader.ExtId >> 8;
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	73bb      	strb	r3, [r7, #14]

		if (id == 255 || id == selfID) {
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2bff      	cmp	r3, #255	; 0xff
 800128e:	d004      	beq.n	800129a <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d143      	bne.n	8001322 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			switch (cmd) {
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	2b23      	cmp	r3, #35	; 0x23
 800129e:	d006      	beq.n	80012ae <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 80012a0:	2b23      	cmp	r3, #35	; 0x23
 80012a2:	dc41      	bgt.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d012      	beq.n	80012ce <HAL_CAN_RxFifo1MsgPendingCallback+0x6e>
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d01d      	beq.n	80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>

		}
	}
	//}

}
 80012ac:	e03c      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				canSetMode = -1;
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	601a      	str	r2, [r3, #0]
				ind = 0;
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
				mode = buffer_get_int32(RxData, &ind);
 80012bc:	4920      	ldr	r1, [pc, #128]	; (8001340 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80012be:	481c      	ldr	r0, [pc, #112]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012c0:	f000 f884 	bl	80013cc <buffer_get_int32>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 80012ca:	601a      	str	r2, [r3, #0]
				break;
 80012cc:	e02c      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 80012d6:	18d0      	adds	r0, r2, r3
 80012d8:	491c      	ldr	r1, [pc, #112]	; (800134c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	3b01      	subs	r3, #1
 80012e0:	461a      	mov	r2, r3
 80012e2:	f006 ff83 	bl	80081ec <memcpy>
				break;
 80012e6:	e01f      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				rxbuf_ind = (unsigned int) RxData[0] << 8;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80012f0:	6013      	str	r3, [r2, #0]
				rxbuf_ind |= RxData[1];
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001300:	6013      	str	r3, [r2, #0]
				if (rxbuf_ind < RX_BUFFER_SIZE) {
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b3f      	cmp	r3, #63	; 0x3f
 8001308:	d80d      	bhi.n	8001326 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
					memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8001310:	1898      	adds	r0, r3, r2
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	3b02      	subs	r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	f006 ff66 	bl	80081ec <memcpy>
				break;
 8001320:	e001      	b.n	8001326 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
		}
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				break;
 8001326:	bf00      	nop
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200000e8 	.word	0x200000e8
 8001334:	200000ac 	.word	0x200000ac
 8001338:	20000000 	.word	0x20000000
 800133c:	2000013c 	.word	0x2000013c
 8001340:	200000f4 	.word	0x200000f4
 8001344:	20000430 	.word	0x20000430
 8001348:	200000f8 	.word	0x200000f8
 800134c:	200000e9 	.word	0x200000e9
 8001350:	20000138 	.word	0x20000138
 8001354:	200000ea 	.word	0x200000ea

08001358 <buffer_append_int32>:

void buffer_append_int32(uint8_t *buffer, int32_t number, int32_t *index) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1618      	asrs	r0, r3, #24
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6011      	str	r1, [r2, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	b2c2      	uxtb	r2, r0
 800137a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1418      	asrs	r0, r3, #16
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6011      	str	r1, [r2, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	b2c2      	uxtb	r2, r0
 8001392:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1218      	asrs	r0, r3, #8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6011      	str	r1, [r2, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	b2c2      	uxtb	r2, r0
 80013aa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1c59      	adds	r1, r3, #1
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6011      	str	r1, [r2, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	int32_t res = ((uint32_t) buffer[*index]) << 24
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	061a      	lsls	r2, r3, #24
			| ((uint32_t) buffer[*index + 1]) << 16
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	440b      	add	r3, r1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	041b      	lsls	r3, r3, #16
 80013f2:	431a      	orrs	r2, r3
			| ((uint32_t) buffer[*index + 2]) << 8
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3302      	adds	r3, #2
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	4313      	orrs	r3, r2
			| ((uint32_t) buffer[*index + 3]);
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	3203      	adds	r2, #3
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	440a      	add	r2, r1
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	4313      	orrs	r3, r2
	int32_t res = ((uint32_t) buffer[*index]) << 24
 8001412:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	601a      	str	r2, [r3, #0]
	return res;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
	...

0800142c <comm_can_transmit_eid>:

void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d901      	bls.n	8001444 <comm_can_transmit_eid+0x18>
		len = 8;
 8001440:	2308      	movs	r3, #8
 8001442:	71fb      	strb	r3, [r7, #7]
	}

	TxHeader.IDE = CAN_ID_EXT;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <comm_can_transmit_eid+0x50>)
 8001446:	2204      	movs	r2, #4
 8001448:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = id;
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <comm_can_transmit_eid+0x50>)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <comm_can_transmit_eid+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = len;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <comm_can_transmit_eid+0x50>)
 800145a:	6113      	str	r3, [r2, #16]
	memcpy(TxData, data, len);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	461a      	mov	r2, r3
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <comm_can_transmit_eid+0x54>)
 8001464:	f006 fec2 	bl	80081ec <memcpy>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <comm_can_transmit_eid+0x58>)
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <comm_can_transmit_eid+0x54>)
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <comm_can_transmit_eid+0x50>)
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <comm_can_transmit_eid+0x5c>)
 8001470:	f001 ffa5 	bl	80033be <HAL_CAN_AddTxMessage>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200000c8 	.word	0x200000c8
 8001480:	200000e0 	.word	0x200000e0
 8001484:	200000f0 	.word	0x200000f0
 8001488:	20000484 	.word	0x20000484

0800148c <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) (duty * 100.0), &send_index);
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff f86f 	bl	8000580 <__aeabi_f2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <comm_can_set_duty+0x58>)
 80014a8:	f7ff f8c2 	bl	8000630 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff face 	bl	8000a54 <__aeabi_d2iz>
 80014b8:	4601      	mov	r1, r0
 80014ba:	f107 020c 	add.w	r2, r7, #12
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff48 	bl	8001358 <buffer_append_int32>
	comm_can_transmit_eid(
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f107 0108 	add.w	r1, r7, #8
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffa8 	bl	800142c <comm_can_transmit_eid>
			controller_id | ((uint32_t) CAN_PACKET_SET_DUTY_GEN << 8), buffer,
			send_index);
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40590000 	.word	0x40590000

080014e8 <comm_can_db_signal>:

void comm_can_db_signal(uint8_t controller_id, int command) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) command, &send_index);
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff28 	bl	8001358 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t) 35 << 8), buffer,
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f107 0108 	add.w	r1, r7, #8
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff88 	bl	800142c <comm_can_transmit_eid>
			send_index);
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <comm_can_send_buffer>:
			controller_id | ((uint32_t) CAN_PACKET_ERRORMASSAGE << 8), buffer,
			send_index);
}

void comm_can_send_buffer(uint8_t controller_id, uint8_t *data,
		unsigned int len, uint8_t send) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	461a      	mov	r2, r3
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	4613      	mov	r3, r2
 8001536:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d829      	bhi.n	8001592 <comm_can_send_buffer+0x6e>
		uint32_t ind = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = controller_id;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	61ba      	str	r2, [r7, #24]
 8001548:	3328      	adds	r3, #40	; 0x28
 800154a:	443b      	add	r3, r7
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	f803 2c18 	strb.w	r2, [r3, #-24]
		send_buffer[ind++] = send;	     // untuk memilih commands pada receiver
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	61ba      	str	r2, [r7, #24]
 8001558:	3328      	adds	r3, #40	; 0x28
 800155a:	443b      	add	r3, r7
 800155c:	7bba      	ldrb	r2, [r7, #14]
 800155e:	f803 2c18 	strb.w	r2, [r3, #-24]
		memcpy(send_buffer + ind, data, len);
 8001562:	f107 0210 	add.w	r2, r7, #16
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4413      	add	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4618      	mov	r0, r3
 8001570:	f006 fe3c 	bl	80081ec <memcpy>
		ind += len;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
		comm_can_transmit_eid(
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f107 0110 	add.w	r1, r7, #16
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff4e 	bl	800142c <comm_can_transmit_eid>
					send_buffer, send_len + 1);
		}
		//------------------------------------------------

	}
}
 8001590:	e048      	b.n	8001624 <comm_can_send_buffer+0x100>
		unsigned int end_a = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
		for (unsigned int i = 0; i < len; i += 7) {
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	e03d      	b.n	8001618 <comm_can_send_buffer+0xf4>
			if (i > 255) {
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	2bff      	cmp	r3, #255	; 0xff
 80015a0:	d83f      	bhi.n	8001622 <comm_can_send_buffer+0xfe>
			end_a = i + 7;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	3307      	adds	r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
			uint8_t send_len = 7;
 80015a8:	2307      	movs	r3, #7
 80015aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			send_buffer[0] = i;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3307      	adds	r3, #7
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d30b      	bcc.n	80015d6 <comm_can_send_buffer+0xb2>
				memcpy(send_buffer + 1, data + i, send_len);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	3301      	adds	r3, #1
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4411      	add	r1, r2
 80015ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 fe0c 	bl	80081ec <memcpy>
 80015d4:	e011      	b.n	80015fa <comm_can_send_buffer+0xd6>
				send_len = len - i;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				memcpy(send_buffer + 1, data + i, send_len);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	3301      	adds	r3, #1
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	4411      	add	r1, r2
 80015f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fdf9 	bl	80081ec <memcpy>
			comm_can_transmit_eid(
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f443 5020 	orr.w	r0, r3, #10240	; 0x2800
 8001600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff ff0d 	bl	800142c <comm_can_transmit_eid>
		for (unsigned int i = 0; i < len; i += 7) {
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3307      	adds	r3, #7
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3bd      	bcc.n	800159c <comm_can_send_buffer+0x78>
}
 8001620:	e000      	b.n	8001624 <comm_can_send_buffer+0x100>
				break;
 8001622:	bf00      	nop
}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <vApplicationGetIdleTaskMemory+0x28>)
 800163c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <vApplicationGetIdleTaskMemory+0x2c>)
 8001642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000140 	.word	0x20000140
 8001658:	200001f4 	.word	0x200001f4

0800165c <delay_s>:

	return value * 60 * 1000;

}

void delay_s(uint8_t value) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	osDelay(value * 1000);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fbf7 	bl	8006e64 <osDelay>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <backWash>:

void delay_m(uint8_t value) {
	osDelay(value * 1000 * 60);
}

void backWash(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

	Control_Valve_1(OFF);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 fca2 	bl	8001fd0 <Control_Valve_1>
	//osDelay(1000); // delay menghabiskan air pada selang
	Pump_1(OFF);
 800168c:	2001      	movs	r0, #1
 800168e:	f000 fcf9 	bl	8002084 <Pump_1>
	delay_s(2); // delay menghabiskan air pada selang
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff ffe2 	bl	800165c <delay_s>
	Ozone(OFF);
 8001698:	2001      	movs	r0, #1
 800169a:	f000 fcd5 	bl	8002048 <Ozone>
	Compressor(OFF);
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 fcb4 	bl	800200c <Compressor>
	flagBackwash = 0; // memulai rekam waktu filtrasi rdf sampai tersumbat
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <backWash+0x88>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	//Pump_2(OFF);

	delay_s(10);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f7ff ffd6 	bl	800165c <delay_s>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80016b0:	2100      	movs	r1, #0
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff ff18 	bl	80014e8 <comm_can_db_signal>
	delay_s(5);
 80016b8:	2005      	movs	r0, #5
 80016ba:	f7ff ffcf 	bl	800165c <delay_s>
	comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 80016be:	2104      	movs	r1, #4
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff ff11 	bl	80014e8 <comm_can_db_signal>
	delay_s(1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff ffc8 	bl	800165c <delay_s>
	Pump_3(ON); // pompa backwash menyala
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fd15 	bl	80020fc <Pump_3>

	uint8_t i = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]

	while (i <= 20) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80016d6:	e006      	b.n	80016e6 <backWash+0x66>
		osDelay(1000);
 80016d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016dc:	f005 fbc2 	bl	8006e64 <osDelay>
		i++;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3301      	adds	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
	while (i <= 20) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b14      	cmp	r3, #20
 80016ea:	d9f5      	bls.n	80016d8 <backWash+0x58>
	}
	Pump_3(OFF); //pompa backwash mati
 80016ec:	2001      	movs	r0, #1
 80016ee:	f000 fd05 	bl	80020fc <Pump_3>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fef7 	bl	80014e8 <comm_can_db_signal>
	delay_s(5);
 80016fa:	2005      	movs	r0, #5
 80016fc:	f7ff ffae 	bl	800165c <delay_s>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000409 	.word	0x20000409

0800170c <process>:

void process(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

	delay_s(7);
 8001710:	2007      	movs	r0, #7
 8001712:	f7ff ffa3 	bl	800165c <delay_s>
//		mode = 0;
//		comm_can_db_signal(0, 0);
//		return;
//	}

	flagTimerEAB = 1; // flag untuk memulai timer EAB
 8001716:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <process+0x188>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]

	while (timerEAB < 1800) {
 800171c:	e00a      	b.n	8001734 <process+0x28>
		EAB(ON);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 fc30 	bl	8001f84 <EAB>
		delay_s(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff ff99 	bl	800165c <delay_s>
		if (mode == 0) {
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <process+0x18c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 808b 	beq.w	800184a <process+0x13e>
	while (timerEAB < 1800) {
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <process+0x190>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800173c:	d3ef      	bcc.n	800171e <process+0x12>
//
//		if (clean) {
//			break;
//		}
//	}
	EAB(OFF);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fc20 	bl	8001f84 <EAB>

	flagTimerEAB = 0; // flag untuk menghentikan timer EAB
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <process+0x188>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]

	flagRecoveryEAB = 1; // flag untuk recover EAB
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <process+0x194>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]

	while (timerRecoveryEAB < 100) {
 8001750:	e006      	b.n	8001760 <process+0x54>
		delay_s(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff ff82 	bl	800165c <delay_s>
		if (mode == 0) {
 8001758:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <process+0x18c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d076      	beq.n	800184e <process+0x142>
	while (timerRecoveryEAB < 100) {
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <process+0x198>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b63      	cmp	r3, #99	; 0x63
 8001766:	d9f4      	bls.n	8001752 <process+0x46>
			goto end;
		}
	}

	flagRecoveryEAB = 0; // flag untuk recover EAB
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <process+0x194>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]

	label2: // balik lagi ke sini jika air masih penuh

	comm_can_set_duty(0, 95);
 800176e:	494e      	ldr	r1, [pc, #312]	; (80018a8 <process+0x19c>)
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fe8b 	bl	800148c <comm_can_set_duty>
	comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 8001776:	2102      	movs	r1, #2
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff feb5 	bl	80014e8 <comm_can_db_signal>

	delay_s(7); //delay untuk menunggu rdf putaran penuh
 800177e:	2007      	movs	r0, #7
 8001780:	f7ff ff6c 	bl	800165c <delay_s>

	Control_Valve_1(ON);
 8001784:	2000      	movs	r0, #0
 8001786:	f000 fc23 	bl	8001fd0 <Control_Valve_1>
	Pump_1(ON);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 fc7a 	bl	8002084 <Pump_1>
	Ozone(ON);
 8001790:	2000      	movs	r0, #0
 8001792:	f000 fc59 	bl	8002048 <Ozone>
	Compressor(ON);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 fc38 	bl	800200c <Compressor>
	Pump_2(ON);
 800179c:	2000      	movs	r0, #0
 800179e:	f000 fc8f 	bl	80020c0 <Pump_2>

	flagBackwash = 1; // penanda start backwash untuk perhitungan lamanya filter tersumbat
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <process+0x1a0>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
	lamaMampet = 0; // reset waktu mampet filter
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <process+0x1a4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	801a      	strh	r2, [r3, #0]

	delay_s(10);
 80017ae:	200a      	movs	r0, #10
 80017b0:	f7ff ff54 	bl	800165c <delay_s>

	while (1) {

		osDelay(1000);
 80017b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b8:	f005 fb54 	bl	8006e64 <osDelay>

		if (flow < 4 //|| level == 1
 80017bc:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <process+0x1a8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fb19 	bl	8000dfc <__aeabi_fcmplt>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <process+0xcc>
		|| mode == 0) {
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <process+0x18c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ed      	bne.n	80017b4 <process+0xa8>
			countBackwash++;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <process+0x1ac>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <process+0x1ac>)
 80017e2:	801a      	strh	r2, [r3, #0]
			delay_s(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ff39 	bl	800165c <delay_s>
			setCountBackwash(countBackwash);
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <process+0x1ac>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f8ac 	bl	800194c <setCountBackwash>
			dataCan[0] = countBackwash & 0x0ff;
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <process+0x1ac>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <process+0x1b0>)
 80017fc:	701a      	strb	r2, [r3, #0]
			dataCan[1] = (countBackwash & 0xff00) >> 8;
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <process+0x1ac>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <process+0x1b0>)
 800180a:	705a      	strb	r2, [r3, #1]
			dataCan[2] = lamaMampet & 0x00ff;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <process+0x1a4>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <process+0x1b0>)
 8001814:	709a      	strb	r2, [r3, #2]
			dataCan[3] = (lamaMampet & 0xff00) >> 8;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <process+0x1a4>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29b      	uxth	r3, r3
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <process+0x1b0>)
 8001822:	70da      	strb	r2, [r3, #3]
			comm_can_transmit_eid(4, dataCan, 8);
 8001824:	2208      	movs	r2, #8
 8001826:	4925      	ldr	r1, [pc, #148]	; (80018bc <process+0x1b0>)
 8001828:	2004      	movs	r0, #4
 800182a:	f7ff fdff 	bl	800142c <comm_can_transmit_eid>
			Ozone(OFF);
 800182e:	2001      	movs	r0, #1
 8001830:	f000 fc0a 	bl	8002048 <Ozone>
			Compressor(OFF);
 8001834:	2001      	movs	r0, #1
 8001836:	f000 fbe9 	bl	800200c <Compressor>
			backWash();
 800183a:	f7ff ff21 	bl	8001680 <backWash>
			break;
 800183e:	bf00      	nop
		}
	}

	if (mode == 0) {
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <process+0x18c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d192      	bne.n	800176e <process+0x62>
		goto end;
 8001848:	e002      	b.n	8001850 <process+0x144>
			goto end;
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <process+0x144>
			goto end;
 800184e:	bf00      	nop
//	}
	goto label2;

	end:

	EAB(OFF);
 8001850:	2001      	movs	r0, #1
 8001852:	f000 fb97 	bl	8001f84 <EAB>
	delay_s(3);
 8001856:	2003      	movs	r0, #3
 8001858:	f7ff ff00 	bl	800165c <delay_s>
	Pump_2(OFF);
 800185c:	2001      	movs	r0, #1
 800185e:	f000 fc2f 	bl	80020c0 <Pump_2>
	mode = 0;
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <process+0x18c>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
	countProcess++;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <process+0x1b4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <process+0x1b4>)
 8001870:	6013      	str	r3, [r2, #0]
	setCountProcess(countProcess);
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <process+0x1b4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f879 	bl	800196e <setCountProcess>
	comm_can_db_signal(0, 0);
 800187c:	2100      	movs	r1, #0
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fe32 	bl	80014e8 <comm_can_db_signal>

	flagTimerEAB = 0;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <process+0x188>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
	flagRecoveryEAB = 0;
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <process+0x194>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000040a 	.word	0x2000040a
 8001898:	20000430 	.word	0x20000430
 800189c:	20000428 	.word	0x20000428
 80018a0:	2000040b 	.word	0x2000040b
 80018a4:	2000042c 	.word	0x2000042c
 80018a8:	42be0000 	.word	0x42be0000
 80018ac:	20000409 	.word	0x20000409
 80018b0:	20000434 	.word	0x20000434
 80018b4:	20000444 	.word	0x20000444
 80018b8:	20000436 	.word	0x20000436
 80018bc:	20000410 	.word	0x20000410
 80018c0:	20000438 	.word	0x20000438

080018c4 <setMode>:

void setMode(uint32_t value) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, MODE, value);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff f9ef 	bl	8000cb0 <__aeabi_ui2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	2100      	movs	r1, #0
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff fb93 	bl	8001004 <EEPROM_Write_NUM>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <setTimerEAB>:

void setTimerEAB(uint32_t value) {
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMEREAB, value);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff f9de 	bl	8000cb0 <__aeabi_ui2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	2104      	movs	r1, #4
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff fb82 	bl	8001004 <EEPROM_Write_NUM>

}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <setLamaPakaiEAB>:

void setLamaPakaiEAB(uint32_t value) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPAKAIEAB, value);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff f9cd 	bl	8000cb0 <__aeabi_ui2f>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	2118      	movs	r1, #24
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff fb71 	bl	8001004 <EEPROM_Write_NUM>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <setTimerRcoveryEAB>:

void setTimerRcoveryEAB(uint32_t value) {
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMERRECOVERYEAB, value);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff f9bc 	bl	8000cb0 <__aeabi_ui2f>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	211c      	movs	r1, #28
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fb60 	bl	8001004 <EEPROM_Write_NUM>

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <setCountBackwash>:
//	dataWrite[2] = value;
//	Flash_Write_Data(ADDRESS, (uint32_t*) value, 10);

}

void setCountBackwash(uint32_t value) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTBACKWASH, value);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff f9ab 	bl	8000cb0 <__aeabi_ui2f>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	210c      	movs	r1, #12
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff fb4f 	bl	8001004 <EEPROM_Write_NUM>

}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <setCountProcess>:

void setCountProcess(uint32_t value) {
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTPROCESS, value);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff f99a 	bl	8000cb0 <__aeabi_ui2f>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	2110      	movs	r1, #16
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff fb3e 	bl	8001004 <EEPROM_Write_NUM>

}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <setLamaProcess>:

void setLamaProcess(uint32_t value) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPROCESS, value);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff f989 	bl	8000cb0 <__aeabi_ui2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	2114      	movs	r1, #20
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fb2d 	bl	8001004 <EEPROM_Write_NUM>

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <Task2>:

// kumpulan task freeRTOS

void Task2(void const *argument) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <Task2+0x68>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d102      	bne.n	80019ca <Task2+0x16>
				{
			process();
 80019c4:	f7ff fea2 	bl	800170c <process>
 80019c8:	e023      	b.n	8001a12 <Task2+0x5e>
		}

		else if (mode == 2) // mode 2 untuk opsi menggunakan sensor water level
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <Task2+0x68>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d01f      	beq.n	8001a12 <Task2+0x5e>
				{

		}

		else if (mode == 3) // mode 2 untuk opsi menggunakan sensor water level
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <Task2+0x68>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d01b      	beq.n	8001a12 <Task2+0x5e>
				{
		}

		else if (mode == 0) {
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <Task2+0x68>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d117      	bne.n	8001a12 <Task2+0x5e>
			lamaProcess = 0;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <Task2+0x6c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
			setLamaProcess(lamaProcess);
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <Task2+0x6c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ffcf 	bl	8001990 <setLamaProcess>
			timerEAB = 0;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <Task2+0x70>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
			setTimerEAB(timerEAB);
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <Task2+0x70>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff72 	bl	80018e6 <setTimerEAB>
			timerRecoveryEAB = 0;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <Task2+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <Task2+0x74>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff8c 	bl	800192a <setTimerRcoveryEAB>
		}

		osDelay(1000);
 8001a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a16:	f005 fa25 	bl	8006e64 <osDelay>
		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001a1a:	e7cf      	b.n	80019bc <Task2+0x8>
 8001a1c:	20000430 	.word	0x20000430
 8001a20:	2000043c 	.word	0x2000043c
 8001a24:	20000428 	.word	0x20000428
 8001a28:	2000042c 	.word	0x2000042c

08001a2c <TaskTimer>:

	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <TaskTimer+0xec>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d120      	bne.n	8001a7e <TaskTimer+0x52>

			timerEAB++;
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <TaskTimer+0xf0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <TaskTimer+0xf0>)
 8001a44:	6013      	str	r3, [r2, #0]
			setTimerEAB(timerEAB);
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <TaskTimer+0xf0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff4b 	bl	80018e6 <setTimerEAB>
			if (timerEAB % 60 == 0) {
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <TaskTimer+0xf0>)
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <TaskTimer+0xf4>)
 8001a56:	fba3 2301 	umull	r2, r3, r3, r1
 8001a5a:	095a      	lsrs	r2, r3, #5
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	1aca      	subs	r2, r1, r3
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d109      	bne.n	8001a7e <TaskTimer+0x52>
				lamaPakaiEAB++;
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <TaskTimer+0xf8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a2c      	ldr	r2, [pc, #176]	; (8001b24 <TaskTimer+0xf8>)
 8001a72:	6013      	str	r3, [r2, #0]
				setLamaPakaiEAB(lamaPakaiEAB);
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <TaskTimer+0xf8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff45 	bl	8001908 <setLamaPakaiEAB>
			}

		}

		if (flagRecoveryEAB == 1) {
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <TaskTimer+0xfc>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d109      	bne.n	8001a9a <TaskTimer+0x6e>
			timerRecoveryEAB++;
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <TaskTimer+0x100>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <TaskTimer+0x100>)
 8001a8e:	6013      	str	r3, [r2, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <TaskTimer+0x100>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff48 	bl	800192a <setTimerRcoveryEAB>
		}

		if (flagBackwash == 1) {
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <TaskTimer+0x104>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <TaskTimer+0x82>
			lamaMampet++;
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <TaskTimer+0x108>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <TaskTimer+0x108>)
 8001aac:	801a      	strh	r2, [r3, #0]
		}

		if (mode == 2) {
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <TaskTimer+0x10c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d109      	bne.n	8001aca <TaskTimer+0x9e>
			lamaProcess++;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <TaskTimer+0x110>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <TaskTimer+0x110>)
 8001abe:	6013      	str	r3, [r2, #0]
			setLamaProcess(lamaProcess);
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <TaskTimer+0x110>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff63 	bl	8001990 <setLamaProcess>
		}

		flow = signalCounter / 7.5;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <TaskTimer+0x114>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd44 	bl	800055c <__aeabi_i2d>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <TaskTimer+0x118>)
 8001ada:	f7fe fed3 	bl	8000884 <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7fe ffdd 	bl	8000aa4 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <TaskTimer+0x11c>)
 8001aee:	6013      	str	r3, [r2, #0]
		signalCounter = 0;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <TaskTimer+0x114>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
		cobaTaskTimer++;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <TaskTimer+0x120>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <TaskTimer+0x120>)
 8001b00:	701a      	strb	r2, [r3, #0]
		currentEAB = 4.56; //Get_Current_EAB();
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <TaskTimer+0x124>)
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <TaskTimer+0x128>)
 8001b06:	601a      	str	r2, [r3, #0]
		voltEAB = 12.11; //Get_Volt_EAB();
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <TaskTimer+0x12c>)
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <TaskTimer+0x130>)
 8001b0c:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b12:	f005 f9a7 	bl	8006e64 <osDelay>
		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001b16:	e78d      	b.n	8001a34 <TaskTimer+0x8>
 8001b18:	2000040a 	.word	0x2000040a
 8001b1c:	20000428 	.word	0x20000428
 8001b20:	88888889 	.word	0x88888889
 8001b24:	20000440 	.word	0x20000440
 8001b28:	2000040b 	.word	0x2000040b
 8001b2c:	2000042c 	.word	0x2000042c
 8001b30:	20000409 	.word	0x20000409
 8001b34:	20000434 	.word	0x20000434
 8001b38:	20000430 	.word	0x20000430
 8001b3c:	2000043c 	.word	0x2000043c
 8001b40:	20000450 	.word	0x20000450
 8001b44:	401e0000 	.word	0x401e0000
 8001b48:	20000444 	.word	0x20000444
 8001b4c:	2000040d 	.word	0x2000040d
 8001b50:	20000448 	.word	0x20000448
 8001b54:	4091eb85 	.word	0x4091eb85
 8001b58:	2000044c 	.word	0x2000044c
 8001b5c:	4141c28f 	.word	0x4141c28f

08001b60 <TaskFlow>:

	}
	/* USER CODE END 5 */
}

void TaskFlow(void const *argument) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001b68:	2120      	movs	r1, #32
 8001b6a:	4812      	ldr	r0, [pc, #72]	; (8001bb4 <TaskFlow+0x54>)
 8001b6c:	f002 fabe 	bl	80040ec <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73bb      	strb	r3, [r7, #14]
	uint8_t stateSensorPrv = -1;
 8001b74:	23ff      	movs	r3, #255	; 0xff
 8001b76:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001b78:	2120      	movs	r1, #32
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <TaskFlow+0x54>)
 8001b7c:	f002 fab6 	bl	80040ec <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73bb      	strb	r3, [r7, #14]
		level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));
 8001b84:	2110      	movs	r1, #16
 8001b86:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <TaskFlow+0x54>)
 8001b88:	f002 fab0 	bl	80040ec <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <TaskFlow+0x58>)
 8001b92:	701a      	strb	r2, [r3, #0]
		if (stateSensorNow != stateSensorPrv) {
 8001b94:	7bba      	ldrb	r2, [r7, #14]
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d006      	beq.n	8001baa <TaskFlow+0x4a>
			signalCounter++;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <TaskFlow+0x5c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <TaskFlow+0x5c>)
 8001ba4:	6013      	str	r3, [r2, #0]
			stateSensorPrv = stateSensorNow;
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
 8001ba8:	73fb      	strb	r3, [r7, #15]
		}
		//cobaTaskFlow++;
		osDelay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f005 f95a 	bl	8006e64 <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001bb0:	e7e2      	b.n	8001b78 <TaskFlow+0x18>
 8001bb2:	bf00      	nop
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	20000408 	.word	0x20000408
 8001bbc:	20000450 	.word	0x20000450

08001bc0 <TaskButton>:
	}
	/* USER CODE END 5 */
}

void TaskButton(void const *argument) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bcc:	4818      	ldr	r0, [pc, #96]	; (8001c30 <TaskButton+0x70>)
 8001bce:	f002 fa8d 	bl	80040ec <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73bb      	strb	r3, [r7, #14]
	uint8_t stateButtonPrv = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]

	/* Infinite loop */
	for (;;) {
		stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <TaskButton+0x70>)
 8001be0:	f002 fa84 	bl	80040ec <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73bb      	strb	r3, [r7, #14]
		if (stateButtonNow == 1 && stateButtonPrv == 0) {
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d111      	bne.n	8001c12 <TaskButton+0x52>
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10e      	bne.n	8001c12 <TaskButton+0x52>
			mode++;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <TaskButton+0x74>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <TaskButton+0x74>)
 8001bfc:	6013      	str	r3, [r2, #0]
			if (mode > 1) {
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <TaskButton+0x74>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d902      	bls.n	8001c0c <TaskButton+0x4c>
				mode = 0;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <TaskButton+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
			}
			stateButtonPrv = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e004      	b.n	8001c1c <TaskButton+0x5c>
		} else if (stateButtonNow == 0) {
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <TaskButton+0x5c>
			stateButtonPrv = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(10);
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f005 f921 	bl	8006e64 <osDelay>
		//cobaTaskButton++;
		setMode(mode);
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <TaskButton+0x74>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe4c 	bl	80018c4 <setMode>
		stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001c2c:	e7d5      	b.n	8001bda <TaskButton+0x1a>
 8001c2e:	bf00      	nop
 8001c30:	40011000 	.word	0x40011000
 8001c34:	20000430 	.word	0x20000430

08001c38 <TaskCanTx>:
	}
	/* USER CODE END 5 */
}

void TaskCanTx(void const *argument) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		manageData();
 8001c40:	f000 fd3a 	bl	80026b8 <manageData>
		comm_can_send_buffer(7, bufferCanTx, sizeof(bufferCanTx), 1);
 8001c44:	2301      	movs	r3, #1
 8001c46:	2220      	movs	r2, #32
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <TaskCanTx+0x4c>)
 8001c4a:	2007      	movs	r0, #7
 8001c4c:	f7ff fc6a 	bl	8001524 <comm_can_send_buffer>
		HAL_UART_Receive(&huart1, dataUart, sizeof(dataUart), 500);
 8001c50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c54:	220c      	movs	r2, #12
 8001c56:	490c      	ldr	r1, [pc, #48]	; (8001c88 <TaskCanTx+0x50>)
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <TaskCanTx+0x54>)
 8001c5a:	f004 ff1e 	bl	8006a9a <HAL_UART_Receive>
		if ((dataUart[0] == 50)) {
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <TaskCanTx+0x50>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b32      	cmp	r3, #50	; 0x32
 8001c64:	d103      	bne.n	8001c6e <TaskCanTx+0x36>
			clean = dataUart[1];
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <TaskCanTx+0x50>)
 8001c68:	785a      	ldrb	r2, [r3, #1]
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <TaskCanTx+0x58>)
 8001c6c:	701a      	strb	r2, [r3, #0]
		}
		osDelay(500);
 8001c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c72:	f005 f8f7 	bl	8006e64 <osDelay>
		cobaTask2++;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <TaskCanTx+0x5c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <TaskCanTx+0x5c>)
 8001c80:	701a      	strb	r2, [r3, #0]
		manageData();
 8001c82:	e7dd      	b.n	8001c40 <TaskCanTx+0x8>
 8001c84:	200005dc 	.word	0x200005dc
 8001c88:	20000418 	.word	0x20000418
 8001c8c:	20000590 	.word	0x20000590
 8001c90:	20000424 	.word	0x20000424
 8001c94:	2000040c 	.word	0x2000040c

08001c98 <fungsiInit>:

	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b0a4      	sub	sp, #144	; 0x90
 8001c9c:	af00      	add	r7, sp, #0

	gpio_init();
 8001c9e:	f000 f8e7 	bl	8001e70 <gpio_init>

	// pembacaan eeprom
	mode = EEPROM_Read_NUM(1, MODE);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f9c5 	bl	8001034 <EEPROM_Read_NUM>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f8cd 	bl	8000e4c <__aeabi_f2uiz>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <fungsiInit+0x194>)
 8001cb6:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f001 f83b 	bl	8002d34 <HAL_Delay>
	timerEAB = EEPROM_Read_NUM(1, TIMEREAB);
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff f9b7 	bl	8001034 <EEPROM_Read_NUM>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f8bf 	bl	8000e4c <__aeabi_f2uiz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <fungsiInit+0x198>)
 8001cd2:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001cd4:	200a      	movs	r0, #10
 8001cd6:	f001 f82d 	bl	8002d34 <HAL_Delay>
	countBackwash = EEPROM_Read_NUM(1, COUNTBACKWASH);
 8001cda:	210c      	movs	r1, #12
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff f9a9 	bl	8001034 <EEPROM_Read_NUM>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f8b1 	bl	8000e4c <__aeabi_f2uiz>
 8001cea:	4603      	mov	r3, r0
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <fungsiInit+0x19c>)
 8001cf0:	801a      	strh	r2, [r3, #0]
	HAL_Delay(10);
 8001cf2:	200a      	movs	r0, #10
 8001cf4:	f001 f81e 	bl	8002d34 <HAL_Delay>
	countProcess = EEPROM_Read_NUM(1, COUNTPROCESS);
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff f99a 	bl	8001034 <EEPROM_Read_NUM>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f8a2 	bl	8000e4c <__aeabi_f2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a4b      	ldr	r2, [pc, #300]	; (8001e38 <fungsiInit+0x1a0>)
 8001d0c:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f001 f810 	bl	8002d34 <HAL_Delay>
	lamaProcess = EEPROM_Read_NUM(1, LAMAPROCESS);
 8001d14:	2114      	movs	r1, #20
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff f98c 	bl	8001034 <EEPROM_Read_NUM>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f894 	bl	8000e4c <__aeabi_f2uiz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <fungsiInit+0x1a4>)
 8001d28:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d2a:	200a      	movs	r0, #10
 8001d2c:	f001 f802 	bl	8002d34 <HAL_Delay>
	lamaPakaiEAB = EEPROM_Read_NUM(1, LAMAPAKAIEAB);
 8001d30:	2118      	movs	r1, #24
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff f97e 	bl	8001034 <EEPROM_Read_NUM>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f886 	bl	8000e4c <__aeabi_f2uiz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a3f      	ldr	r2, [pc, #252]	; (8001e40 <fungsiInit+0x1a8>)
 8001d44:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d46:	200a      	movs	r0, #10
 8001d48:	f000 fff4 	bl	8002d34 <HAL_Delay>
	timerRecoveryEAB = EEPROM_Read_NUM(1, TIMERRECOVERYEAB);
 8001d4c:	211c      	movs	r1, #28
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff f970 	bl	8001034 <EEPROM_Read_NUM>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f878 	bl	8000e4c <__aeabi_f2uiz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a39      	ldr	r2, [pc, #228]	; (8001e44 <fungsiInit+0x1ac>)
 8001d60:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d62:	200a      	movs	r0, #10
 8001d64:	f000 ffe6 	bl	8002d34 <HAL_Delay>

//	setMode(mode);
//	setLamaPakaiEAB(660);
//	setCountBackwash(173);

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 64);
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <fungsiInit+0x1b0>)
 8001d6a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001d6e:	461d      	mov	r5, r3
 8001d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8001d7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f005 f822 	bl	8006dcc <osThreadCreate>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <fungsiInit+0x1b4>)
 8001d8c:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 64);
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <fungsiInit+0x1b8>)
 8001d90:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001d94:	461d      	mov	r5, r3
 8001d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8001da2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 f80f 	bl	8006dcc <osThreadCreate>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <fungsiInit+0x1bc>)
 8001db2:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskFlow, TaskFlow, osPriorityBelowNormal, 0, 32);
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <fungsiInit+0x1c0>)
 8001db6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001dba:	461d      	mov	r5, r3
 8001dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFlowHandle = osThreadCreate(osThread(TaskFlow), NULL);
 8001dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fffc 	bl	8006dcc <osThreadCreate>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <fungsiInit+0x1c4>)
 8001dd8:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskButton, TaskButton, osPriorityBelowNormal, 0, 32);
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <fungsiInit+0x1c8>)
 8001ddc:	f107 0420 	add.w	r4, r7, #32
 8001de0:	461d      	mov	r5, r3
 8001de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskButtonHandle = osThreadCreate(osThread(TaskButton), NULL);
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 ffe9 	bl	8006dcc <osThreadCreate>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <fungsiInit+0x1cc>)
 8001dfe:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskCanTx, TaskCanTx, osPriorityBelowNormal, 0, 64);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <fungsiInit+0x1d0>)
 8001e02:	1d3c      	adds	r4, r7, #4
 8001e04:	461d      	mov	r5, r3
 8001e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskCanTxHandle = osThreadCreate(osThread(TaskCanTx), NULL);
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 ffd8 	bl	8006dcc <osThreadCreate>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <fungsiInit+0x1d4>)
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	3790      	adds	r7, #144	; 0x90
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000430 	.word	0x20000430
 8001e30:	20000428 	.word	0x20000428
 8001e34:	20000436 	.word	0x20000436
 8001e38:	20000438 	.word	0x20000438
 8001e3c:	2000043c 	.word	0x2000043c
 8001e40:	20000440 	.word	0x20000440
 8001e44:	2000042c 	.word	0x2000042c
 8001e48:	080083e4 	.word	0x080083e4
 8001e4c:	200003f8 	.word	0x200003f8
 8001e50:	08008400 	.word	0x08008400
 8001e54:	200003f4 	.word	0x200003f4
 8001e58:	0800841c 	.word	0x0800841c
 8001e5c:	200003fc 	.word	0x200003fc
 8001e60:	08008438 	.word	0x08008438
 8001e64:	20000400 	.word	0x20000400
 8001e68:	08008454 	.word	0x08008454
 8001e6c:	20000404 	.word	0x20000404

08001e70 <gpio_init>:

extern uint16_t indicator;
extern uint8_t indicator1, indicator2;
extern uint8_t bufferCanTx[32];

void gpio_init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <gpio_init+0x104>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <gpio_init+0x104>)
 8001e8a:	f043 0320 	orr.w	r3, r3, #32
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <gpio_init+0x104>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <gpio_init+0x104>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <gpio_init+0x104>)
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <gpio_init+0x104>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <gpio_init+0x104>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <gpio_init+0x104>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <gpio_init+0x104>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <gpio_init+0x104>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <gpio_init+0x104>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <gpio_init+0x104>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f64f 4103 	movw	r1, #64515	; 0xfc03
 8001eea:	4823      	ldr	r0, [pc, #140]	; (8001f78 <gpio_init+0x108>)
 8001eec:	f002 f915 	bl	800411a <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001ef6:	4821      	ldr	r0, [pc, #132]	; (8001f7c <gpio_init+0x10c>)
 8001ef8:	f002 f90f 	bl	800411a <HAL_GPIO_WritePin>
	GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 8001efc:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8001f00:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4619      	mov	r1, r3
 8001f14:	4818      	ldr	r0, [pc, #96]	; (8001f78 <gpio_init+0x108>)
 8001f16:	f001 ff65 	bl	8003de4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001f1a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001f1e:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	4812      	ldr	r0, [pc, #72]	; (8001f7c <gpio_init+0x10c>)
 8001f34:	f001 ff56 	bl	8003de4 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_4;
 8001f38:	2330      	movs	r3, #48	; 0x30
 8001f3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480b      	ldr	r0, [pc, #44]	; (8001f78 <gpio_init+0x108>)
 8001f4c:	f001 ff4a 	bl	8003de4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4619      	mov	r1, r3
 8001f64:	4806      	ldr	r0, [pc, #24]	; (8001f80 <gpio_init+0x110>)
 8001f66:	f001 ff3d 	bl	8003de4 <HAL_GPIO_Init>
//
//	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001f6a:	bf00      	nop
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40011000 	.word	0x40011000

08001f84 <EAB>:
//
//void Pump_3(uint8_t value) {
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
//}

void EAB(uint8_t value) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, value);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	461a      	mov	r2, r3
 8001f92:	2101      	movs	r1, #1
 8001f94:	480b      	ldr	r0, [pc, #44]	; (8001fc4 <EAB+0x40>)
 8001f96:	f002 f8c0 	bl	800411a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, value);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <EAB+0x44>)
 8001fa2:	f002 f8ba 	bl	800411a <HAL_GPIO_WritePin>
	if (value == 1) {
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d103      	bne.n	8001fb4 <EAB+0x30>
		bufferCanTx[12] = 0;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <EAB+0x48>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	731a      	strb	r2, [r3, #12]
	} else {
		bufferCanTx[12] = 1;
	}

}
 8001fb2:	e002      	b.n	8001fba <EAB+0x36>
		bufferCanTx[12] = 1;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <EAB+0x48>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	731a      	strb	r2, [r3, #12]
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40010c00 	.word	0x40010c00
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	200005dc 	.word	0x200005dc

08001fd0 <Control_Valve_1>:

void Control_Valve_1(uint8_t value) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, value);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe2:	4808      	ldr	r0, [pc, #32]	; (8002004 <Control_Valve_1+0x34>)
 8001fe4:	f002 f899 	bl	800411a <HAL_GPIO_WritePin>
	if (value == 1) {
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d103      	bne.n	8001ff6 <Control_Valve_1+0x26>
		bufferCanTx[11] = 0;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <Control_Valve_1+0x38>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	72da      	strb	r2, [r3, #11]
	} else {
		bufferCanTx[11] = 1;
	}

}
 8001ff4:	e002      	b.n	8001ffc <Control_Valve_1+0x2c>
		bufferCanTx[11] = 1;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <Control_Valve_1+0x38>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	72da      	strb	r2, [r3, #11]
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40010800 	.word	0x40010800
 8002008:	200005dc 	.word	0x200005dc

0800200c <Compressor>:
//	} else {
//		bufferCanTx[8] = 1;
//	}
}

void Compressor(uint8_t value) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, value);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	461a      	mov	r2, r3
 800201a:	2110      	movs	r1, #16
 800201c:	4808      	ldr	r0, [pc, #32]	; (8002040 <Compressor+0x34>)
 800201e:	f002 f87c 	bl	800411a <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
	if (value == 1) {
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d103      	bne.n	8002030 <Compressor+0x24>
		bufferCanTx[13] = 0;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <Compressor+0x38>)
 800202a:	2200      	movs	r2, #0
 800202c:	735a      	strb	r2, [r3, #13]
	} else {
		bufferCanTx[13] = 1;
	}

}
 800202e:	e002      	b.n	8002036 <Compressor+0x2a>
		bufferCanTx[13] = 1;
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <Compressor+0x38>)
 8002032:	2201      	movs	r2, #1
 8002034:	735a      	strb	r2, [r3, #13]
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40010800 	.word	0x40010800
 8002044:	200005dc 	.word	0x200005dc

08002048 <Ozone>:

void Ozone(uint8_t value) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, value);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	461a      	mov	r2, r3
 8002056:	2104      	movs	r1, #4
 8002058:	4808      	ldr	r0, [pc, #32]	; (800207c <Ozone+0x34>)
 800205a:	f002 f85e 	bl	800411a <HAL_GPIO_WritePin>
	if (value == 1) {
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d103      	bne.n	800206c <Ozone+0x24>
		bufferCanTx[14] = 0;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <Ozone+0x38>)
 8002066:	2200      	movs	r2, #0
 8002068:	739a      	strb	r2, [r3, #14]
	} else {
		bufferCanTx[14] = 1;
	}
}
 800206a:	e002      	b.n	8002072 <Ozone+0x2a>
		bufferCanTx[14] = 1;
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <Ozone+0x38>)
 800206e:	2201      	movs	r2, #1
 8002070:	739a      	strb	r2, [r3, #14]
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40010800 	.word	0x40010800
 8002080:	200005dc 	.word	0x200005dc

08002084 <Pump_1>:

void Pump_1(uint8_t value) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	461a      	mov	r2, r3
 8002092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <Pump_1+0x34>)
 8002098:	f002 f83f 	bl	800411a <HAL_GPIO_WritePin>
	if (value == 1) {
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d103      	bne.n	80020aa <Pump_1+0x26>
		bufferCanTx[8] = 0;
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <Pump_1+0x38>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	721a      	strb	r2, [r3, #8]
	} else {
		bufferCanTx[8] = 1;
	}
}
 80020a8:	e002      	b.n	80020b0 <Pump_1+0x2c>
		bufferCanTx[8] = 1;
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <Pump_1+0x38>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	721a      	strb	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	200005dc 	.word	0x200005dc

080020c0 <Pump_2>:

void Pump_2(uint8_t value) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	461a      	mov	r2, r3
 80020ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <Pump_2+0x34>)
 80020d4:	f002 f821 	bl	800411a <HAL_GPIO_WritePin>

	if (value == 1) {
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d103      	bne.n	80020e6 <Pump_2+0x26>
		bufferCanTx[7] = 0;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <Pump_2+0x38>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	71da      	strb	r2, [r3, #7]
	} else {
		bufferCanTx[7] = 1;
	}
}
 80020e4:	e002      	b.n	80020ec <Pump_2+0x2c>
		bufferCanTx[7] = 1;
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <Pump_2+0x38>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	71da      	strb	r2, [r3, #7]
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	200005dc 	.word	0x200005dc

080020fc <Pump_3>:

void Pump_3(uint8_t value) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210e:	4808      	ldr	r0, [pc, #32]	; (8002130 <Pump_3+0x34>)
 8002110:	f002 f803 	bl	800411a <HAL_GPIO_WritePin>
	if (value == 1) {
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d103      	bne.n	8002122 <Pump_3+0x26>
		bufferCanTx[6] = 0;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <Pump_3+0x38>)
 800211c:	2200      	movs	r2, #0
 800211e:	719a      	strb	r2, [r3, #6]
	} else {
		bufferCanTx[6] = 1;
	}
}
 8002120:	e002      	b.n	8002128 <Pump_3+0x2c>
		bufferCanTx[6] = 1;
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <Pump_3+0x38>)
 8002124:	2201      	movs	r2, #1
 8002126:	719a      	strb	r2, [r3, #6]
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40010c00 	.word	0x40010c00
 8002134:	200005dc 	.word	0x200005dc

08002138 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800213e:	f000 fdc7 	bl	8002cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002142:	f000 f829 	bl	8002198 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002146:	f000 fa25 	bl	8002594 <MX_GPIO_Init>
	MX_CAN_Init();
 800214a:	f000 f8b1 	bl	80022b0 <MX_CAN_Init>
	MX_TIM2_Init();
 800214e:	f000 f935 	bl	80023bc <MX_TIM2_Init>
	MX_TIM3_Init();
 8002152:	f000 f9a7 	bl	80024a4 <MX_TIM3_Init>
	MX_I2C1_Init();
 8002156:	f000 f903 	bl	8002360 <MX_I2C1_Init>
	MX_ADC1_Init();
 800215a:	f000 f879 	bl	8002250 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800215e:	f000 f9ef 	bl	8002540 <MX_USART1_UART_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	fungsiInit();
 8002162:	f7ff fd99 	bl	8001c98 <fungsiInit>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <main+0x58>)
 8002168:	1d3c      	adds	r4, r7, #4
 800216a:	461d      	mov	r5, r3
 800216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fe25 	bl	8006dcc <osThreadCreate>
 8002182:	4603      	mov	r3, r0
 8002184:	4a03      	ldr	r2, [pc, #12]	; (8002194 <main+0x5c>)
 8002186:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8002188:	f004 fe19 	bl	8006dbe <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800218c:	e7fe      	b.n	800218c <main+0x54>
 800218e:	bf00      	nop
 8002190:	0800847c 	.word	0x0800847c
 8002194:	200005d4 	.word	0x200005d4

08002198 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b094      	sub	sp, #80	; 0x50
 800219c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800219e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a2:	2228      	movs	r2, #40	; 0x28
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 f82e 	bl	8008208 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d6:	2301      	movs	r3, #1
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021da:	2302      	movs	r3, #2
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 ffac 	bl	800514c <HAL_RCC_OscConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0x66>
		Error_Handler();
 80021fa:	f000 fa57 	bl	80026ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021fe:	230f      	movs	r3, #15
 8002200:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2102      	movs	r1, #2
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fa18 	bl	8005650 <HAL_RCC_ClockConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <SystemClock_Config+0x92>
		Error_Handler();
 8002226:	f000 fa41 	bl	80026ac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800222a:	2302      	movs	r3, #2
 800222c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800222e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002232:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fbd2 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0xae>
		Error_Handler();
 8002242:	f000 fa33 	bl	80026ac <Error_Handler>
	}
}
 8002246:	bf00      	nop
 8002248:	3750      	adds	r7, #80	; 0x50
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_ADC1_Init+0x58>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <MX_ADC1_Init+0x5c>)
 8002264:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_ADC1_Init+0x58>)
 8002268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_ADC1_Init+0x58>)
 8002270:	2201      	movs	r2, #1
 8002272:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_ADC1_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_ADC1_Init+0x58>)
 800227c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002280:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_ADC1_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <MX_ADC1_Init+0x58>)
 800228a:	2201      	movs	r2, #1
 800228c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <MX_ADC1_Init+0x58>)
 8002290:	f000 fd74 	bl	8002d7c <HAL_ADC_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_ADC1_Init+0x4e>
		Error_Handler();
 800229a:	f000 fa07 	bl	80026ac <Error_Handler>
//  }
//  /* USER CODE BEGIN ADC1_Init 2 */
//
//  /* USER CODE END ADC1_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000454 	.word	0x20000454
 80022ac:	40012400 	.word	0x40012400

080022b0 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <MX_CAN_Init+0xa8>)
 80022b8:	4a28      	ldr	r2, [pc, #160]	; (800235c <MX_CAN_Init+0xac>)
 80022ba:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 18;
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <MX_CAN_Init+0xa8>)
 80022be:	2212      	movs	r2, #18
 80022c0:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <MX_CAN_Init+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <MX_CAN_Init+0xa8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <MX_CAN_Init+0xa8>)
 80022d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022d4:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <MX_CAN_Init+0xa8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_CAN_Init+0xa8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_CAN_Init+0xa8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_CAN_Init+0xa8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_CAN_Init+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_CAN_Init+0xa8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_CAN_Init+0xa8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8002300:	4815      	ldr	r0, [pc, #84]	; (8002358 <MX_CAN_Init+0xa8>)
 8002302:	f000 fe54 	bl	8002fae <HAL_CAN_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_CAN_Init+0x60>
		Error_Handler();
 800230c:	f000 f9ce 	bl	80026ac <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002310:	2301      	movs	r3, #1
 8002312:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8002314:	230a      	movs	r3, #10
 8002316:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002318:	2301      	movs	r3, #1
 800231a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 800231c:	2300      	movs	r3, #0
 800231e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002330:	2301      	movs	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_CAN_Init+0xa8>)
 800233e:	f000 ff31 	bl	80031a4 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_CAN_Init+0xa8>)
 8002344:	f000 fff7 	bl	8003336 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002348:	2110      	movs	r1, #16
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <MX_CAN_Init+0xa8>)
 800234c:	f001 fa22 	bl	8003794 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000484 	.word	0x20000484
 800235c:	40006400 	.word	0x40006400

08002360 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <MX_I2C1_Init+0x50>)
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <MX_I2C1_Init+0x54>)
 8002368:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_I2C1_Init+0x50>)
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <MX_I2C1_Init+0x58>)
 800236e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_I2C1_Init+0x50>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_I2C1_Init+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_I2C1_Init+0x50>)
 800237e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002382:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <MX_I2C1_Init+0x50>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_I2C1_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <MX_I2C1_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_I2C1_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <MX_I2C1_Init+0x50>)
 800239e:	f001 fed5 	bl	800414c <HAL_I2C_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_I2C1_Init+0x4c>
		Error_Handler();
 80023a8:	f000 f980 	bl	80026ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200004ac 	.word	0x200004ac
 80023b4:	40005400 	.word	0x40005400
 80023b8:	00061a80 	.word	0x00061a80

080023bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80023c2:	f107 0318 	add.w	r3, r7, #24
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80023da:	463b      	mov	r3, r7
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <MX_TIM2_Init+0xe4>)
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ec:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <MX_TIM2_Init+0xe4>)
 80023f0:	2247      	movs	r2, #71	; 0x47
 80023f2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MX_TIM2_Init+0xe4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535 - 1;
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <MX_TIM2_Init+0xe4>)
 80023fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002400:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <MX_TIM2_Init+0xe4>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <MX_TIM2_Init+0xe4>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800240e:	4824      	ldr	r0, [pc, #144]	; (80024a0 <MX_TIM2_Init+0xe4>)
 8002410:	f003 fb9c 	bl	8005b4c <HAL_TIM_Base_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM2_Init+0x62>
		Error_Handler();
 800241a:	f000 f947 	bl	80026ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800241e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002422:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	4619      	mov	r1, r3
 800242a:	481d      	ldr	r0, [pc, #116]	; (80024a0 <MX_TIM2_Init+0xe4>)
 800242c:	f003 ff2a 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002436:	f000 f939 	bl	80026ac <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800243a:	4819      	ldr	r0, [pc, #100]	; (80024a0 <MX_TIM2_Init+0xe4>)
 800243c:	f003 fc28 	bl	8005c90 <HAL_TIM_IC_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8002446:	f000 f931 	bl	80026ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4619      	mov	r1, r3
 8002458:	4811      	ldr	r0, [pc, #68]	; (80024a0 <MX_TIM2_Init+0xe4>)
 800245a:	f004 fa61 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8002464:	f000 f922 	bl	80026ac <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002468:	2300      	movs	r3, #0
 800246a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800246c:	2301      	movs	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002478:	463b      	mov	r3, r7
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	4808      	ldr	r0, [pc, #32]	; (80024a0 <MX_TIM2_Init+0xe4>)
 8002480:	f003 fe6c 	bl	800615c <HAL_TIM_IC_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM2_Init+0xd2>
		Error_Handler();
 800248a:	f000 f90f 	bl	80026ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800248e:	2100      	movs	r1, #0
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM2_Init+0xe4>)
 8002492:	f003 fc55 	bl	8005d40 <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000500 	.word	0x20000500

080024a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80024aa:	f107 0308 	add.w	r3, r7, #8
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <MX_TIM3_Init+0x94>)
 80024c2:	4a1e      	ldr	r2, [pc, #120]	; (800253c <MX_TIM3_Init+0x98>)
 80024c4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80024c6:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <MX_TIM3_Init+0x94>)
 80024c8:	2247      	movs	r2, #71	; 0x47
 80024ca:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_TIM3_Init+0x94>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <MX_TIM3_Init+0x94>)
 80024d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024d8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_TIM3_Init+0x94>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_TIM3_Init+0x94>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80024e6:	4814      	ldr	r0, [pc, #80]	; (8002538 <MX_TIM3_Init+0x94>)
 80024e8:	f003 fb30 	bl	8005b4c <HAL_TIM_Base_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80024f2:	f000 f8db 	bl	80026ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	4619      	mov	r1, r3
 8002502:	480d      	ldr	r0, [pc, #52]	; (8002538 <MX_TIM3_Init+0x94>)
 8002504:	f003 febe 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0x6e>
		Error_Handler();
 800250e:	f000 f8cd 	bl	80026ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800251a:	463b      	mov	r3, r7
 800251c:	4619      	mov	r1, r3
 800251e:	4806      	ldr	r0, [pc, #24]	; (8002538 <MX_TIM3_Init+0x94>)
 8002520:	f004 f9fe 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800252a:	f000 f8bf 	bl	80026ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000548 	.word	0x20000548
 800253c:	40000400 	.word	0x40000400

08002540 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <MX_USART1_UART_Init+0x4c>)
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <MX_USART1_UART_Init+0x50>)
 8002548:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_USART1_UART_Init+0x4c>)
 800254c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002550:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_USART1_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_USART1_UART_Init+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <MX_USART1_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_USART1_UART_Init+0x4c>)
 8002566:	220c      	movs	r2, #12
 8002568:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <MX_USART1_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_USART1_UART_Init+0x4c>)
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_USART1_UART_Init+0x4c>)
 8002578:	f004 fa42 	bl	8006a00 <HAL_UART_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002582:	f000 f893 	bl	80026ac <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000590 	.word	0x20000590
 8002590:	40013800 	.word	0x40013800

08002594 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025ae:	f043 0320 	orr.w	r3, r3, #32
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a24      	ldr	r2, [pc, #144]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <MX_GPIO_Init+0xc4>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80025f0:	2201      	movs	r2, #1
 80025f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f6:	4819      	ldr	r0, [pc, #100]	; (800265c <MX_GPIO_Init+0xc8>)
 80025f8:	f001 fd8f 	bl	800411a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002602:	4817      	ldr	r0, [pc, #92]	; (8002660 <MX_GPIO_Init+0xcc>)
 8002604:	f001 fd89 	bl	800411a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	2118      	movs	r1, #24
 800260c:	4813      	ldr	r0, [pc, #76]	; (800265c <MX_GPIO_Init+0xc8>)
 800260e:	f001 fd84 	bl	800411a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB11 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_3 | GPIO_PIN_4;
 8002612:	f640 0318 	movw	r3, #2072	; 0x818
 8002616:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002618:	2301      	movs	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2302      	movs	r3, #2
 8002622:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4619      	mov	r1, r3
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <MX_GPIO_Init+0xc8>)
 800262c:	f001 fbda 	bl	8003de4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002634:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2302      	movs	r3, #2
 8002640:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_GPIO_Init+0xcc>)
 800264a:	f001 fbcb 	bl	8003de4 <HAL_GPIO_Init>

}
 800264e:	bf00      	nop
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40010800 	.word	0x40010800

08002664 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
//		for (uint8_t a = 0; a < 8; a++) {
//			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			osDelay(50);
//		}
//		comm_can_transmit_eid(4, send, 8);
		cobaTask1++;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <StartDefaultTask+0x20>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <StartDefaultTask+0x20>)
 8002676:	701a      	strb	r2, [r3, #0]
		osDelay(10000);
 8002678:	f242 7010 	movw	r0, #10000	; 0x2710
 800267c:	f004 fbf2 	bl	8006e64 <osDelay>
		cobaTask1++;
 8002680:	e7f4      	b.n	800266c <StartDefaultTask+0x8>
 8002682:	bf00      	nop
 8002684:	200005d8 	.word	0x200005d8

08002688 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800269a:	f000 fb2f 	bl	8002cfc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40000800 	.word	0x40000800

080026ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026b4:	e7fe      	b.n	80026b4 <Error_Handler+0x8>
	...

080026b8 <manageData>:
extern uint8_t indicator1, indicator2;
extern uint32_t mode;

uint8_t bufferCanTx[32];

void manageData(void) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

	// data timer proses EAB
	bufferCanTx[0] = timerEAB & 0xff;
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <manageData+0x9c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <manageData+0xa0>)
 80026c4:	701a      	strb	r2, [r3, #0]
	bufferCanTx[1] = timerEAB >> 8;
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <manageData+0x9c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <manageData+0xa0>)
 80026d0:	705a      	strb	r2, [r3, #1]

	// data arus eab karena float dikali 100 dulu
	bufferCanTx[2] = (uint32_t) (currentEAB * 100) & 0xff;
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <manageData+0xa4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4922      	ldr	r1, [pc, #136]	; (8002760 <manageData+0xa8>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fd39 	bl	8000150 <__aeabi_fmul>
 80026de:	4603      	mov	r3, r0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fbb3 	bl	8000e4c <__aeabi_f2uiz>
 80026e6:	4603      	mov	r3, r0
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <manageData+0xa0>)
 80026ec:	709a      	strb	r2, [r3, #2]
	bufferCanTx[3] = (uint32_t) (currentEAB * 100) >> 8;
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <manageData+0xa4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	491b      	ldr	r1, [pc, #108]	; (8002760 <manageData+0xa8>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fd2b 	bl	8000150 <__aeabi_fmul>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fba5 	bl	8000e4c <__aeabi_f2uiz>
 8002702:	4603      	mov	r3, r0
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <manageData+0xa0>)
 800270a:	70da      	strb	r2, [r3, #3]

	// data teganagn eab karena float dikali 100 dulu
	bufferCanTx[4] = (uint32_t) (voltEAB * 100) & 0xff;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <manageData+0xac>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4913      	ldr	r1, [pc, #76]	; (8002760 <manageData+0xa8>)
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fd1c 	bl	8000150 <__aeabi_fmul>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fb96 	bl	8000e4c <__aeabi_f2uiz>
 8002720:	4603      	mov	r3, r0
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <manageData+0xa0>)
 8002726:	711a      	strb	r2, [r3, #4]
	bufferCanTx[5] = (uint32_t) (voltEAB * 100) >> 8;
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <manageData+0xac>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <manageData+0xa8>)
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fd0e 	bl	8000150 <__aeabi_fmul>
 8002734:	4603      	mov	r3, r0
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fb88 	bl	8000e4c <__aeabi_f2uiz>
 800273c:	4603      	mov	r3, r0
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <manageData+0xa0>)
 8002744:	715a      	strb	r2, [r3, #5]

	//data indicator
//	bufferCanTx[6] = indicator1;
//	bufferCanTx[7] = indicator2;

	bufferCanTx[15] = (uint8_t) mode;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <manageData+0xb0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <manageData+0xa0>)
 800274e:	73da      	strb	r2, [r3, #15]

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000428 	.word	0x20000428
 8002758:	200005dc 	.word	0x200005dc
 800275c:	20000448 	.word	0x20000448
 8002760:	42c80000 	.word	0x42c80000
 8002764:	2000044c 	.word	0x2000044c
 8002768:	20000430 	.word	0x20000430

0800276c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_MspInit+0x68>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_MspInit+0x68>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6193      	str	r3, [r2, #24]
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_MspInit+0x68>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_MspInit+0x68>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_MspInit+0x68>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_MspInit+0x68>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	210f      	movs	r1, #15
 80027a6:	f06f 0001 	mvn.w	r0, #1
 80027aa:	f001 faf0 	bl	8003d8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_MspInit+0x6c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_MspInit+0x6c>)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000

080027dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_ADC_MspInit+0x6c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d121      	bne.n	8002840 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_ADC_MspInit+0x70>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_ADC_MspInit+0x70>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_ADC_MspInit+0x70>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_ADC_MspInit+0x70>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_ADC_MspInit+0x70>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_ADC_MspInit+0x70>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 800282c:	23c1      	movs	r3, #193	; 0xc1
 800282e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002830:	2303      	movs	r3, #3
 8002832:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <HAL_ADC_MspInit+0x74>)
 800283c:	f001 fad2 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40012400 	.word	0x40012400
 800284c:	40021000 	.word	0x40021000
 8002850:	40010800 	.word	0x40010800

08002854 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_CAN_MspInit+0xc0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d14b      	bne.n	800290c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002874:	4b28      	ldr	r3, [pc, #160]	; (8002918 <HAL_CAN_MspInit+0xc4>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_CAN_MspInit+0xc4>)
 800287a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800287e:	61d3      	str	r3, [r2, #28]
 8002880:	4b25      	ldr	r3, [pc, #148]	; (8002918 <HAL_CAN_MspInit+0xc4>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_CAN_MspInit+0xc4>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a21      	ldr	r2, [pc, #132]	; (8002918 <HAL_CAN_MspInit+0xc4>)
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_CAN_MspInit+0xc4>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4818      	ldr	r0, [pc, #96]	; (800291c <HAL_CAN_MspInit+0xc8>)
 80028ba:	f001 fa93 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	4812      	ldr	r0, [pc, #72]	; (800291c <HAL_CAN_MspInit+0xc8>)
 80028d4:	f001 fa86 	bl	8003de4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_CAN_MspInit+0xcc>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_CAN_MspInit+0xcc>)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2105      	movs	r1, #5
 8002900:	2015      	movs	r0, #21
 8002902:	f001 fa44 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002906:	2015      	movs	r0, #21
 8002908:	f001 fa5d 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40006400 	.word	0x40006400
 8002918:	40021000 	.word	0x40021000
 800291c:	40010c00 	.word	0x40010c00
 8002920:	40010000 	.word	0x40010000

08002924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_I2C_MspInit+0x70>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d123      	bne.n	800298c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_I2C_MspInit+0x74>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_I2C_MspInit+0x74>)
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_I2C_MspInit+0x74>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800295c:	23c0      	movs	r3, #192	; 0xc0
 800295e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002960:	2312      	movs	r3, #18
 8002962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4619      	mov	r1, r3
 800296e:	480b      	ldr	r0, [pc, #44]	; (800299c <HAL_I2C_MspInit+0x78>)
 8002970:	f001 fa38 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_I2C_MspInit+0x74>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_I2C_MspInit+0x74>)
 800297a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_I2C_MspInit+0x74>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40005400 	.word	0x40005400
 8002998:	40021000 	.word	0x40021000
 800299c:	40010c00 	.word	0x40010c00

080029a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d13f      	bne.n	8002a40 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	61d3      	str	r3, [r2, #28]
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	481a      	ldr	r0, [pc, #104]	; (8002a70 <HAL_TIM_Base_MspInit+0xd0>)
 8002a06:	f001 f9ed 	bl	8003de4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_TIM_Base_MspInit+0xd4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIM_Base_MspInit+0xd4>)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	201c      	movs	r0, #28
 8002a34:	f001 f9ab 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a38:	201c      	movs	r0, #28
 8002a3a:	f001 f9c4 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a3e:	e010      	b.n	8002a62 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_TIM_Base_MspInit+0xd8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10b      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	61d3      	str	r3, [r2, #28]
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_TIM_Base_MspInit+0xcc>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400

08002a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_UART_MspInit+0x8c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d131      	bne.n	8002b00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa6:	6193      	str	r3, [r2, #24]
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6193      	str	r3, [r2, #24]
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <HAL_UART_MspInit+0x94>)
 8002ae2:	f001 f97f 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	4619      	mov	r1, r3
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <HAL_UART_MspInit+0x94>)
 8002afc:	f001 f972 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b00:	bf00      	nop
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010800 	.word	0x40010800

08002b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002b2a:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_InitTick+0xe8>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <HAL_InitTick+0xe8>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	61d3      	str	r3, [r2, #28]
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_InitTick+0xe8>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b42:	f107 0210 	add.w	r2, r7, #16
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fef9 	bl	8005944 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d103      	bne.n	8002b64 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b5c:	f002 feca 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8002b60:	6378      	str	r0, [r7, #52]	; 0x34
 8002b62:	e004      	b.n	8002b6e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b64:	f002 fec6 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_InitTick+0xec>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0c9b      	lsrs	r3, r3, #18
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_InitTick+0xf0>)
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <HAL_InitTick+0xf4>)
 8002b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_InitTick+0xf0>)
 8002b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b88:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_InitTick+0xf0>)
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_InitTick+0xf0>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_InitTick+0xf0>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_InitTick+0xf0>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002ba2:	4818      	ldr	r0, [pc, #96]	; (8002c04 <HAL_InitTick+0xf0>)
 8002ba4:	f002 ffd2 	bl	8005b4c <HAL_TIM_Base_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11b      	bne.n	8002bee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002bb6:	4813      	ldr	r0, [pc, #76]	; (8002c04 <HAL_InitTick+0xf0>)
 8002bb8:	f003 f818 	bl	8005bec <HAL_TIM_Base_Start_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d111      	bne.n	8002bee <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bca:	201e      	movs	r0, #30
 8002bcc:	f001 f8fb 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	d808      	bhi.n	8002be8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	201e      	movs	r0, #30
 8002bdc:	f001 f8d7 	bl	8003d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_InitTick+0xf8>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e002      	b.n	8002bee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3738      	adds	r7, #56	; 0x38
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	200005fc 	.word	0x200005fc
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	20000008 	.word	0x20000008

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <NMI_Handler+0x4>

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <MemManage_Handler+0x4>

08002c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
	...

08002c3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <CAN1_RX1_IRQHandler+0x10>)
 8002c42:	f000 fdcc 	bl	80037de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000484 	.word	0x20000484

08002c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM2_IRQHandler+0x10>)
 8002c56:	f003 f979 	bl	8005f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000500 	.word	0x20000500

08002c64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM4_IRQHandler+0x10>)
 8002c6a:	f003 f96f 	bl	8005f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200005fc 	.word	0x200005fc

08002c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	; (8002cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	; (8002cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002caa:	f7ff ffe5 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cae:	f005 fa77 	bl	80081a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cb2:	f7ff fa41 	bl	8002138 <main>
  bx lr
 8002cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002cc0:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 8002cc4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002cc8:	2000139c 	.word	0x2000139c

08002ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_2_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x28>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f001 f849 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f7ff ff14 	bl	8002b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fd3e 	bl	800276c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_IncTick+0x1c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_IncTick+0x20>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_IncTick+0x20>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	20000644 	.word	0x20000644

08002d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return uwTick;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_GetTick+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	20000644 	.word	0x20000644

08002d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_GetTick>
 8002d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d005      	beq.n	8002d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_Delay+0x44>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4413      	add	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d5a:	bf00      	nop
 8002d5c:	f7ff ffe0 	bl	8002d20 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d8f7      	bhi.n	8002d5c <HAL_Delay+0x28>
  {
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000000c 	.word	0x2000000c

08002d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0be      	b.n	8002f1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fd0e 	bl	80027dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8b3 	bl	8002f2c <ADC_ConversionStop_Disable>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 8099 	bne.w	8002f0a <HAL_ADC_Init+0x18e>
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 8095 	bne.w	8002f0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de8:	f023 0302 	bic.w	r3, r3, #2
 8002dec:	f043 0202 	orr.w	r2, r3, #2
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7b1b      	ldrb	r3, [r3, #12]
 8002e02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e14:	d003      	beq.n	8002e1e <HAL_ADC_Init+0xa2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_ADC_Init+0xa8>
 8002e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e22:	e000      	b.n	8002e26 <HAL_ADC_Init+0xaa>
 8002e24:	2300      	movs	r3, #0
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7d1b      	ldrb	r3, [r3, #20]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d119      	bne.n	8002e68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7b1b      	ldrb	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	035a      	lsls	r2, r3, #13
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	e00b      	b.n	8002e68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <HAL_ADC_Init+0x1a8>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d003      	beq.n	8002ea2 <HAL_ADC_Init+0x126>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d104      	bne.n	8002eac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	051b      	lsls	r3, r3, #20
 8002eaa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_ADC_Init+0x1ac>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d10b      	bne.n	8002ee8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ee6:	e018      	b.n	8002f1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f023 0312 	bic.w	r3, r3, #18
 8002ef0:	f043 0210 	orr.w	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f08:	e007      	b.n	8002f1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	ffe1f7fd 	.word	0xffe1f7fd
 8002f28:	ff1f0efe 	.word	0xff1f0efe

08002f2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12e      	bne.n	8002fa4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f56:	f7ff fee3 	bl	8002d20 <HAL_GetTick>
 8002f5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f5c:	e01b      	b.n	8002f96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f5e:	f7ff fedf 	bl	8002d20 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d914      	bls.n	8002f96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e007      	b.n	8002fa6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d0dc      	beq.n	8002f5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0ed      	b.n	800319c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fc41 	bl	8002854 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe2:	f7ff fe9d 	bl	8002d20 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fe8:	e012      	b.n	8003010 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fea:	f7ff fe99 	bl	8002d20 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b0a      	cmp	r3, #10
 8002ff6:	d90b      	bls.n	8003010 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2205      	movs	r2, #5
 8003008:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0c5      	b.n	800319c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0e5      	beq.n	8002fea <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0202 	bic.w	r2, r2, #2
 800302c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800302e:	f7ff fe77 	bl	8002d20 <HAL_GetTick>
 8003032:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003034:	e012      	b.n	800305c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003036:	f7ff fe73 	bl	8002d20 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b0a      	cmp	r3, #10
 8003042:	d90b      	bls.n	800305c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2205      	movs	r2, #5
 8003054:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e09f      	b.n	800319c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e5      	bne.n	8003036 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e1b      	ldrb	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e007      	b.n	8003094 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7e5b      	ldrb	r3, [r3, #25]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d108      	bne.n	80030ae <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e007      	b.n	80030be <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7e9b      	ldrb	r3, [r3, #26]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0220 	orr.w	r2, r2, #32
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e007      	b.n	80030e8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0220 	bic.w	r2, r2, #32
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7edb      	ldrb	r3, [r3, #27]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d108      	bne.n	8003102 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e007      	b.n	8003112 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0210 	orr.w	r2, r2, #16
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f1b      	ldrb	r3, [r3, #28]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e007      	b.n	800313c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0208 	bic.w	r2, r2, #8
 800313a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7f5b      	ldrb	r3, [r3, #29]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d108      	bne.n	8003156 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0204 	orr.w	r2, r2, #4
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e007      	b.n	8003166 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0204 	bic.w	r2, r2, #4
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	ea42 0103 	orr.w	r1, r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d003      	beq.n	80031ca <HAL_CAN_ConfigFilter+0x26>
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 80aa 	bne.w	800331e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2201      	movs	r2, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	401a      	ands	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d123      	bne.n	800324c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003226:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3248      	adds	r2, #72	; 0x48
 800322c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003240:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	3348      	adds	r3, #72	; 0x48
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d122      	bne.n	800329a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	431a      	orrs	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003274:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3248      	adds	r2, #72	; 0x48
 800327a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800328e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003290:	6979      	ldr	r1, [r7, #20]
 8003292:	3348      	adds	r3, #72	; 0x48
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	401a      	ands	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032b4:	e007      	b.n	80032c6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	401a      	ands	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80032e0:	e007      	b.n	80032f2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	431a      	orrs	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003310:	f023 0201 	bic.w	r2, r3, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e006      	b.n	800332c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d12e      	bne.n	80033a8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003362:	f7ff fcdd 	bl	8002d20 <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003368:	e012      	b.n	8003390 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800336a:	f7ff fcd9 	bl	8002d20 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b0a      	cmp	r3, #10
 8003376:	d90b      	bls.n	8003390 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2205      	movs	r2, #5
 8003388:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e012      	b.n	80033b6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e5      	bne.n	800336a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e006      	b.n	80033b6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80033be:	b480      	push	{r7}
 80033c0:	b089      	sub	sp, #36	; 0x24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d003      	beq.n	80033ea <HAL_CAN_AddTxMessage+0x2c>
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	f040 80b8 	bne.w	800355a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a0 	beq.w	800354a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	0e1b      	lsrs	r3, r3, #24
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d907      	bls.n	800342a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09e      	b.n	8003568 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800342a:	2201      	movs	r2, #1
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	6809      	ldr	r1, [r1, #0]
 800344a:	431a      	orrs	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3318      	adds	r3, #24
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	440b      	add	r3, r1
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00f      	b.n	8003478 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003462:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800346c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3318      	adds	r3, #24
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	440b      	add	r3, r1
 8003476:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6819      	ldr	r1, [r3, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3318      	adds	r3, #24
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	440b      	add	r3, r1
 8003488:	3304      	adds	r3, #4
 800348a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	7d1b      	ldrb	r3, [r3, #20]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d111      	bne.n	80034b8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3318      	adds	r3, #24
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	3304      	adds	r3, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	6811      	ldr	r1, [r2, #0]
 80034a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3318      	adds	r3, #24
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	440b      	add	r3, r1
 80034b4:	3304      	adds	r3, #4
 80034b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3307      	adds	r3, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	061a      	lsls	r2, r3, #24
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3306      	adds	r3, #6
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3305      	adds	r3, #5
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	4313      	orrs	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	3204      	adds	r2, #4
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	4610      	mov	r0, r2
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	ea43 0200 	orr.w	r2, r3, r0
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	440b      	add	r3, r1
 80034ea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3303      	adds	r3, #3
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	061a      	lsls	r2, r3, #24
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3302      	adds	r3, #2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3301      	adds	r3, #1
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	4313      	orrs	r3, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	4610      	mov	r0, r2
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6811      	ldr	r1, [r2, #0]
 8003516:	ea43 0200 	orr.w	r2, r3, r0
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	440b      	add	r3, r1
 8003520:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003524:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3318      	adds	r3, #24
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4413      	add	r3, r2
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	6811      	ldr	r1, [r2, #0]
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3318      	adds	r3, #24
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	440b      	add	r3, r1
 8003544:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e00e      	b.n	8003568 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e006      	b.n	8003568 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3724      	adds	r7, #36	; 0x24
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003572:	b480      	push	{r7}
 8003574:	b087      	sub	sp, #28
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003586:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d003      	beq.n	8003596 <HAL_CAN_GetRxMessage+0x24>
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b02      	cmp	r3, #2
 8003592:	f040 80f3 	bne.w	800377c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10e      	bne.n	80035ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0e7      	b.n	800378a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d8      	b.n	800378a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	331b      	adds	r3, #27
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0204 	and.w	r2, r3, #4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	331b      	adds	r3, #27
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	4413      	add	r3, r2
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0d5b      	lsrs	r3, r3, #21
 8003606:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e00b      	b.n	8003628 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	331b      	adds	r3, #27
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	4413      	add	r3, r2
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	08db      	lsrs	r3, r3, #3
 8003620:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	331b      	adds	r3, #27
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0202 	and.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	331b      	adds	r3, #27
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	331b      	adds	r3, #27
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b2da      	uxtb	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	331b      	adds	r3, #27
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	3304      	adds	r3, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4413      	add	r3, r2
 8003690:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0a1a      	lsrs	r2, r3, #8
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0c1a      	lsrs	r2, r3, #16
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3302      	adds	r3, #2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e1a      	lsrs	r2, r3, #24
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	3303      	adds	r3, #3
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	3304      	adds	r3, #4
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4413      	add	r3, r2
 800370c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	0a1a      	lsrs	r2, r3, #8
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	3305      	adds	r3, #5
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0c1a      	lsrs	r2, r3, #16
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	3306      	adds	r3, #6
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e1a      	lsrs	r2, r3, #24
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	3307      	adds	r3, #7
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	e007      	b.n	8003778 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0220 	orr.w	r2, r2, #32
 8003776:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e006      	b.n	800378a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <HAL_CAN_ActivateNotification+0x1e>
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d109      	bne.n	80037c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6959      	ldr	r1, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e006      	b.n	80037d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08a      	sub	sp, #40	; 0x28
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d07c      	beq.n	800391e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d023      	beq.n	8003876 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f983 	bl	8003b4c <HAL_CAN_TxMailbox0CompleteCallback>
 8003846:	e016      	b.n	8003876 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e00c      	b.n	8003876 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e002      	b.n	8003876 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f986 	bl	8003b82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d024      	beq.n	80038ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f962 	bl	8003b5e <HAL_CAN_TxMailbox1CompleteCallback>
 800389a:	e016      	b.n	80038ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	e00c      	b.n	80038ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	e002      	b.n	80038ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f965 	bl	8003b94 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d024      	beq.n	800391e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f941 	bl	8003b70 <HAL_CAN_TxMailbox2CompleteCallback>
 80038ee:	e016      	b.n	800391e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e00c      	b.n	800391e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e002      	b.n	800391e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f944 	bl	8003ba6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00c      	beq.n	8003942 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003938:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2208      	movs	r2, #8
 800395c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f933 	bl	8003bca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f91b 	bl	8003bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2208      	movs	r2, #8
 80039c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f90a 	bl	8003bdc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd fc3d 	bl	8001260 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2210      	movs	r2, #16
 8003a00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8f3 	bl	8003bee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2208      	movs	r2, #8
 8003a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8eb 	bl	8003c00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d07b      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d072      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d043      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03e      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aac:	2b60      	cmp	r3, #96	; 0x60
 8003aae:	d02b      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x32a>
 8003ab0:	2b60      	cmp	r3, #96	; 0x60
 8003ab2:	d82e      	bhi.n	8003b12 <HAL_CAN_IRQHandler+0x334>
 8003ab4:	2b50      	cmp	r3, #80	; 0x50
 8003ab6:	d022      	beq.n	8003afe <HAL_CAN_IRQHandler+0x320>
 8003ab8:	2b50      	cmp	r3, #80	; 0x50
 8003aba:	d82a      	bhi.n	8003b12 <HAL_CAN_IRQHandler+0x334>
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d019      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x316>
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d826      	bhi.n	8003b12 <HAL_CAN_IRQHandler+0x334>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d010      	beq.n	8003aea <HAL_CAN_IRQHandler+0x30c>
 8003ac8:	2b30      	cmp	r3, #48	; 0x30
 8003aca:	d822      	bhi.n	8003b12 <HAL_CAN_IRQHandler+0x334>
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d002      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x2f8>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d005      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ad4:	e01d      	b.n	8003b12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ade:	e019      	b.n	8003b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f043 0310 	orr.w	r3, r3, #16
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ae8:	e014      	b.n	8003b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af2:	e00f      	b.n	8003b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003afc:	e00a      	b.n	8003b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b06:	e005      	b.n	8003b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b10:	e000      	b.n	8003b14 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f867 	bl	8003c12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b44:	bf00      	nop
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c56:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	60d3      	str	r3, [r2, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <__NVIC_GetPriorityGrouping+0x18>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0307 	and.w	r3, r3, #7
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db0b      	blt.n	8003cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4906      	ldr	r1, [pc, #24]	; (8003cbc <__NVIC_EnableIRQ+0x34>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	; (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	; (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
         );
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff4f 	bl	8003c24 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da0:	f7ff ff64 	bl	8003c6c <__NVIC_GetPriorityGrouping>
 8003da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ffb2 	bl	8003d14 <NVIC_EncodePriority>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff81 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff57 	bl	8003c88 <__NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b08b      	sub	sp, #44	; 0x2c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df6:	e169      	b.n	80040cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003df8:	2201      	movs	r2, #1
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	f040 8158 	bne.w	80040c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4a9a      	ldr	r2, [pc, #616]	; (8004084 <HAL_GPIO_Init+0x2a0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d05e      	beq.n	8003ede <HAL_GPIO_Init+0xfa>
 8003e20:	4a98      	ldr	r2, [pc, #608]	; (8004084 <HAL_GPIO_Init+0x2a0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d875      	bhi.n	8003f12 <HAL_GPIO_Init+0x12e>
 8003e26:	4a98      	ldr	r2, [pc, #608]	; (8004088 <HAL_GPIO_Init+0x2a4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d058      	beq.n	8003ede <HAL_GPIO_Init+0xfa>
 8003e2c:	4a96      	ldr	r2, [pc, #600]	; (8004088 <HAL_GPIO_Init+0x2a4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d86f      	bhi.n	8003f12 <HAL_GPIO_Init+0x12e>
 8003e32:	4a96      	ldr	r2, [pc, #600]	; (800408c <HAL_GPIO_Init+0x2a8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d052      	beq.n	8003ede <HAL_GPIO_Init+0xfa>
 8003e38:	4a94      	ldr	r2, [pc, #592]	; (800408c <HAL_GPIO_Init+0x2a8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d869      	bhi.n	8003f12 <HAL_GPIO_Init+0x12e>
 8003e3e:	4a94      	ldr	r2, [pc, #592]	; (8004090 <HAL_GPIO_Init+0x2ac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04c      	beq.n	8003ede <HAL_GPIO_Init+0xfa>
 8003e44:	4a92      	ldr	r2, [pc, #584]	; (8004090 <HAL_GPIO_Init+0x2ac>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d863      	bhi.n	8003f12 <HAL_GPIO_Init+0x12e>
 8003e4a:	4a92      	ldr	r2, [pc, #584]	; (8004094 <HAL_GPIO_Init+0x2b0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d046      	beq.n	8003ede <HAL_GPIO_Init+0xfa>
 8003e50:	4a90      	ldr	r2, [pc, #576]	; (8004094 <HAL_GPIO_Init+0x2b0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d85d      	bhi.n	8003f12 <HAL_GPIO_Init+0x12e>
 8003e56:	2b12      	cmp	r3, #18
 8003e58:	d82a      	bhi.n	8003eb0 <HAL_GPIO_Init+0xcc>
 8003e5a:	2b12      	cmp	r3, #18
 8003e5c:	d859      	bhi.n	8003f12 <HAL_GPIO_Init+0x12e>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <HAL_GPIO_Init+0x80>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003edf 	.word	0x08003edf
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003ecb 	.word	0x08003ecb
 8003e70:	08003f0d 	.word	0x08003f0d
 8003e74:	08003f13 	.word	0x08003f13
 8003e78:	08003f13 	.word	0x08003f13
 8003e7c:	08003f13 	.word	0x08003f13
 8003e80:	08003f13 	.word	0x08003f13
 8003e84:	08003f13 	.word	0x08003f13
 8003e88:	08003f13 	.word	0x08003f13
 8003e8c:	08003f13 	.word	0x08003f13
 8003e90:	08003f13 	.word	0x08003f13
 8003e94:	08003f13 	.word	0x08003f13
 8003e98:	08003f13 	.word	0x08003f13
 8003e9c:	08003f13 	.word	0x08003f13
 8003ea0:	08003f13 	.word	0x08003f13
 8003ea4:	08003f13 	.word	0x08003f13
 8003ea8:	08003ec1 	.word	0x08003ec1
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	4a79      	ldr	r2, [pc, #484]	; (8004098 <HAL_GPIO_Init+0x2b4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003eb6:	e02c      	b.n	8003f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	623b      	str	r3, [r7, #32]
          break;
 8003ebe:	e029      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	623b      	str	r3, [r7, #32]
          break;
 8003ec8:	e024      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	623b      	str	r3, [r7, #32]
          break;
 8003ed2:	e01f      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	623b      	str	r3, [r7, #32]
          break;
 8003edc:	e01a      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	623b      	str	r3, [r7, #32]
          break;
 8003eea:	e013      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	611a      	str	r2, [r3, #16]
          break;
 8003efe:	e009      	b.n	8003f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f00:	2308      	movs	r3, #8
 8003f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	615a      	str	r2, [r3, #20]
          break;
 8003f0a:	e003      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	623b      	str	r3, [r7, #32]
          break;
 8003f10:	e000      	b.n	8003f14 <HAL_GPIO_Init+0x130>
          break;
 8003f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2bff      	cmp	r3, #255	; 0xff
 8003f18:	d801      	bhi.n	8003f1e <HAL_GPIO_Init+0x13a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	e001      	b.n	8003f22 <HAL_GPIO_Init+0x13e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2bff      	cmp	r3, #255	; 0xff
 8003f28:	d802      	bhi.n	8003f30 <HAL_GPIO_Init+0x14c>
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_Init+0x152>
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	3b08      	subs	r3, #8
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	210f      	movs	r1, #15
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	431a      	orrs	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80b1 	beq.w	80040c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f64:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_GPIO_Init+0x2b8>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a4c      	ldr	r2, [pc, #304]	; (800409c <HAL_GPIO_Init+0x2b8>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_GPIO_Init+0x2b8>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_GPIO_Init+0x2bc>)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3302      	adds	r3, #2
 8003f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <HAL_GPIO_Init+0x2c0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_GPIO_Init+0x1ec>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <HAL_GPIO_Init+0x2c4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00d      	beq.n	8003fcc <HAL_GPIO_Init+0x1e8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3e      	ldr	r2, [pc, #248]	; (80040ac <HAL_GPIO_Init+0x2c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <HAL_GPIO_Init+0x1e4>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_GPIO_Init+0x2cc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_GPIO_Init+0x1e0>
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e006      	b.n	8003fd2 <HAL_GPIO_Init+0x1ee>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	e004      	b.n	8003fd2 <HAL_GPIO_Init+0x1ee>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e002      	b.n	8003fd2 <HAL_GPIO_Init+0x1ee>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_GPIO_Init+0x1ee>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	f002 0203 	and.w	r2, r2, #3
 8003fd8:	0092      	lsls	r2, r2, #2
 8003fda:	4093      	lsls	r3, r2
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fe2:	492f      	ldr	r1, [pc, #188]	; (80040a0 <HAL_GPIO_Init+0x2bc>)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ffc:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	492c      	ldr	r1, [pc, #176]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
 8004008:	e006      	b.n	8004018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	43db      	mvns	r3, r3
 8004012:	4928      	ldr	r1, [pc, #160]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004014:	4013      	ands	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	4922      	ldr	r1, [pc, #136]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	43db      	mvns	r3, r3
 800403a:	491e      	ldr	r1, [pc, #120]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 800403c:	4013      	ands	r3, r2
 800403e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4918      	ldr	r1, [pc, #96]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800405a:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	43db      	mvns	r3, r3
 8004062:	4914      	ldr	r1, [pc, #80]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004064:	4013      	ands	r3, r2
 8004066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d021      	beq.n	80040b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	60cb      	str	r3, [r1, #12]
 8004080:	e021      	b.n	80040c6 <HAL_GPIO_Init+0x2e2>
 8004082:	bf00      	nop
 8004084:	10320000 	.word	0x10320000
 8004088:	10310000 	.word	0x10310000
 800408c:	10220000 	.word	0x10220000
 8004090:	10210000 	.word	0x10210000
 8004094:	10120000 	.word	0x10120000
 8004098:	10110000 	.word	0x10110000
 800409c:	40021000 	.word	0x40021000
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010800 	.word	0x40010800
 80040a8:	40010c00 	.word	0x40010c00
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_GPIO_Init+0x304>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	43db      	mvns	r3, r3
 80040c0:	4909      	ldr	r1, [pc, #36]	; (80040e8 <HAL_GPIO_Init+0x304>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	3301      	adds	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f47f ae8e 	bne.w	8003df8 <HAL_GPIO_Init+0x14>
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	372c      	adds	r7, #44	; 0x2c
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40010400 	.word	0x40010400

080040ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	e001      	b.n	800410e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	807b      	strh	r3, [r7, #2]
 8004126:	4613      	mov	r3, r2
 8004128:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800412a:	787b      	ldrb	r3, [r7, #1]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004130:	887a      	ldrh	r2, [r7, #2]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004136:	e003      	b.n	8004140 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004138:	887b      	ldrh	r3, [r7, #2]
 800413a:	041a      	lsls	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	611a      	str	r2, [r3, #16]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
	...

0800414c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e12b      	b.n	80043b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe fbd6 	bl	8002924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041b0:	f001 fba0 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 80041b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4a81      	ldr	r2, [pc, #516]	; (80043c0 <HAL_I2C_Init+0x274>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d807      	bhi.n	80041d0 <HAL_I2C_Init+0x84>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a80      	ldr	r2, [pc, #512]	; (80043c4 <HAL_I2C_Init+0x278>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e006      	b.n	80041de <HAL_I2C_Init+0x92>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a7d      	ldr	r2, [pc, #500]	; (80043c8 <HAL_I2C_Init+0x27c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	bf94      	ite	ls
 80041d8:	2301      	movls	r3, #1
 80041da:	2300      	movhi	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0e7      	b.n	80043b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a78      	ldr	r2, [pc, #480]	; (80043cc <HAL_I2C_Init+0x280>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	0c9b      	lsrs	r3, r3, #18
 80041f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a6a      	ldr	r2, [pc, #424]	; (80043c0 <HAL_I2C_Init+0x274>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d802      	bhi.n	8004220 <HAL_I2C_Init+0xd4>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3301      	adds	r3, #1
 800421e:	e009      	b.n	8004234 <HAL_I2C_Init+0xe8>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	4a69      	ldr	r2, [pc, #420]	; (80043d0 <HAL_I2C_Init+0x284>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	3301      	adds	r3, #1
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	495c      	ldr	r1, [pc, #368]	; (80043c0 <HAL_I2C_Init+0x274>)
 8004250:	428b      	cmp	r3, r1
 8004252:	d819      	bhi.n	8004288 <HAL_I2C_Init+0x13c>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1e59      	subs	r1, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004268:	400b      	ands	r3, r1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_I2C_Init+0x138>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1e59      	subs	r1, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fbb1 f3f3 	udiv	r3, r1, r3
 800427c:	3301      	adds	r3, #1
 800427e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004282:	e051      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 8004284:	2304      	movs	r3, #4
 8004286:	e04f      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d111      	bne.n	80042b4 <HAL_I2C_Init+0x168>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e58      	subs	r0, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	440b      	add	r3, r1
 800429e:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e012      	b.n	80042da <HAL_I2C_Init+0x18e>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	0099      	lsls	r1, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Init+0x196>
 80042de:	2301      	movs	r3, #1
 80042e0:	e022      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <HAL_I2C_Init+0x1bc>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e58      	subs	r0, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	440b      	add	r3, r1
 80042f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	e00f      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e58      	subs	r0, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	0099      	lsls	r1, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	fbb0 f3f3 	udiv	r3, r0, r3
 800431e:	3301      	adds	r3, #1
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	6809      	ldr	r1, [r1, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6911      	ldr	r1, [r2, #16]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	430b      	orrs	r3, r1
 800436a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	000186a0 	.word	0x000186a0
 80043c4:	001e847f 	.word	0x001e847f
 80043c8:	003d08ff 	.word	0x003d08ff
 80043cc:	431bde83 	.word	0x431bde83
 80043d0:	10624dd3 	.word	0x10624dd3

080043d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	460b      	mov	r3, r1
 80043e8:	813b      	strh	r3, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ee:	f7fe fc97 	bl	8002d20 <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	f040 80d9 	bne.w	80045b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2319      	movs	r3, #25
 8004408:	2201      	movs	r2, #1
 800440a:	496d      	ldr	r1, [pc, #436]	; (80045c0 <HAL_I2C_Mem_Write+0x1ec>)
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fcc1 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
 800441a:	e0cc      	b.n	80045b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_I2C_Mem_Write+0x56>
 8004426:	2302      	movs	r3, #2
 8004428:	e0c5      	b.n	80045b6 <HAL_I2C_Mem_Write+0x1e2>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d007      	beq.n	8004450 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2221      	movs	r2, #33	; 0x21
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2240      	movs	r2, #64	; 0x40
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a4d      	ldr	r2, [pc, #308]	; (80045c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004492:	88f8      	ldrh	r0, [r7, #6]
 8004494:	893a      	ldrh	r2, [r7, #8]
 8004496:	8979      	ldrh	r1, [r7, #10]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	4603      	mov	r3, r0
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 faf8 	bl	8004a98 <I2C_RequestMemoryWrite>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d052      	beq.n	8004554 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e081      	b.n	80045b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fd42 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d107      	bne.n	80044da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06b      	b.n	80045b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d11b      	bne.n	8004554 <HAL_I2C_Mem_Write+0x180>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1aa      	bne.n	80044b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fd2e 	bl	8004fc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b04      	cmp	r3, #4
 8004572:	d107      	bne.n	8004584 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e016      	b.n	80045b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	00100002 	.word	0x00100002
 80045c4:	ffff0000 	.word	0xffff0000

080045c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	; 0x30
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	461a      	mov	r2, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	817b      	strh	r3, [r7, #10]
 80045da:	460b      	mov	r3, r1
 80045dc:	813b      	strh	r3, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045e6:	f7fe fb9b 	bl	8002d20 <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	f040 8244 	bne.w	8004a82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2319      	movs	r3, #25
 8004600:	2201      	movs	r2, #1
 8004602:	4982      	ldr	r1, [pc, #520]	; (800480c <HAL_I2C_Mem_Read+0x244>)
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fbc5 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
 8004612:	e237      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Mem_Read+0x5a>
 800461e:	2302      	movs	r3, #2
 8004620:	e230      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d007      	beq.n	8004648 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2222      	movs	r2, #34	; 0x22
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a62      	ldr	r2, [pc, #392]	; (8004810 <HAL_I2C_Mem_Read+0x248>)
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468a:	88f8      	ldrh	r0, [r7, #6]
 800468c:	893a      	ldrh	r2, [r7, #8]
 800468e:	8979      	ldrh	r1, [r7, #10]
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	4603      	mov	r3, r0
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa92 	bl	8004bc4 <I2C_RequestMemoryRead>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1ec      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d113      	bne.n	80046da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e1c0      	b.n	8004a5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d11e      	bne.n	8004720 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046f2:	b672      	cpsid	i
}
 80046f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800471c:	b662      	cpsie	i
}
 800471e:	e035      	b.n	800478c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11e      	bne.n	8004766 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004738:	b672      	cpsid	i
}
 800473a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004762:	b662      	cpsie	i
}
 8004764:	e012      	b.n	800478c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004774:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800478c:	e166      	b.n	8004a5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	2b03      	cmp	r3, #3
 8004794:	f200 811f 	bhi.w	80049d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	2b01      	cmp	r3, #1
 800479e:	d123      	bne.n	80047e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fc4d 	bl	8005044 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e167      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047e6:	e139      	b.n	8004a5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d152      	bne.n	8004896 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	2200      	movs	r2, #0
 80047f8:	4906      	ldr	r1, [pc, #24]	; (8004814 <HAL_I2C_Mem_Read+0x24c>)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 faca 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e13c      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
 800480a:	bf00      	nop
 800480c:	00100002 	.word	0x00100002
 8004810:	ffff0000 	.word	0xffff0000
 8004814:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004818:	b672      	cpsid	i
}
 800481a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800485e:	b662      	cpsie	i
}
 8004860:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004894:	e0e2      	b.n	8004a5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	2200      	movs	r2, #0
 800489e:	497b      	ldr	r1, [pc, #492]	; (8004a8c <HAL_I2C_Mem_Read+0x4c4>)
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fa77 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0e9      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048c0:	b672      	cpsid	i
}
 80048c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048f6:	4b66      	ldr	r3, [pc, #408]	; (8004a90 <HAL_I2C_Mem_Read+0x4c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	4a65      	ldr	r2, [pc, #404]	; (8004a94 <HAL_I2C_Mem_Read+0x4cc>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0a1a      	lsrs	r2, r3, #8
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	3b01      	subs	r3, #1
 8004914:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d118      	bne.n	800494e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800493e:	b662      	cpsie	i
}
 8004940:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e09a      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d1d9      	bne.n	8004910 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800499e:	b662      	cpsie	i
}
 80049a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049d4:	e042      	b.n	8004a5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fb32 	bl	8005044 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e04c      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d118      	bne.n	8004a5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f ae94 	bne.w	800478e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3728      	adds	r7, #40	; 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	00010004 	.word	0x00010004
 8004a90:	20000004 	.word	0x20000004
 8004a94:	14f8b589 	.word	0x14f8b589

08004a98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f960 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae8:	d103      	bne.n	8004af2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e05f      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	492d      	ldr	r1, [pc, #180]	; (8004bc0 <I2C_RequestMemoryWrite+0x128>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f998 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e04c      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fa02 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e02b      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	e021      	b.n	8004bb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	6a39      	ldr	r1, [r7, #32]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f9dc 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d107      	bne.n	8004ba6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e005      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004baa:	893b      	ldrh	r3, [r7, #8]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	00010002 	.word	0x00010002

08004bc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	4608      	mov	r0, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	817b      	strh	r3, [r7, #10]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	813b      	strh	r3, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f8c2 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d103      	bne.n	8004c2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0aa      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	4952      	ldr	r1, [pc, #328]	; (8004d90 <I2C_RequestMemoryRead+0x1cc>)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f8fa 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e097      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f964 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e076      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca0:	893b      	ldrh	r3, [r7, #8]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e021      	b.n	8004cf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f93e 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e050      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce6:	893b      	ldrh	r3, [r7, #8]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf2:	6a39      	ldr	r1, [r7, #32]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f923 	bl	8004f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d107      	bne.n	8004d18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e035      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f82b 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d103      	bne.n	8004d5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e013      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	4906      	ldr	r1, [pc, #24]	; (8004d90 <I2C_RequestMemoryRead+0x1cc>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f863 	bl	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	00010002 	.word	0x00010002

08004d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da4:	e025      	b.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d021      	beq.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	f7fd ffb7 	bl	8002d20 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d116      	bne.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e023      	b.n	8004e3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10d      	bne.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	43da      	mvns	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	e00c      	b.n	8004e32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d0b6      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e50:	e051      	b.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d123      	bne.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e046      	b.n	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d021      	beq.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fd ff35 	bl	8002d20 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e020      	b.n	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10c      	bne.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	43da      	mvns	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf14      	ite	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	2300      	moveq	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e00b      	b.n	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	43da      	mvns	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d18d      	bne.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f4c:	e02d      	b.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f8ce 	bl	80050f0 <I2C_IsAcknowledgeFailed>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e02d      	b.n	8004fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d021      	beq.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fd fedb 	bl	8002d20 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d116      	bne.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f043 0220 	orr.w	r2, r3, #32
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e007      	b.n	8004fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b80      	cmp	r3, #128	; 0x80
 8004fb6:	d1ca      	bne.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fce:	e02d      	b.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f88d 	bl	80050f0 <I2C_IsAcknowledgeFailed>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e02d      	b.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d021      	beq.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fd fe9a 	bl	8002d20 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e007      	b.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d1ca      	bne.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005050:	e042      	b.n	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b10      	cmp	r3, #16
 800505e:	d119      	bne.n	8005094 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0210 	mvn.w	r2, #16
 8005068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e029      	b.n	80050e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7fd fe44 	bl	8002d20 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d116      	bne.n	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e007      	b.n	80050e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d1b5      	bne.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005106:	d11b      	bne.n	8005140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f043 0204 	orr.w	r2, r3, #4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e272      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8087 	beq.w	800527a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800516c:	4b92      	ldr	r3, [pc, #584]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b04      	cmp	r3, #4
 8005176:	d00c      	beq.n	8005192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005178:	4b8f      	ldr	r3, [pc, #572]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 030c 	and.w	r3, r3, #12
 8005180:	2b08      	cmp	r3, #8
 8005182:	d112      	bne.n	80051aa <HAL_RCC_OscConfig+0x5e>
 8005184:	4b8c      	ldr	r3, [pc, #560]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d10b      	bne.n	80051aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005192:	4b89      	ldr	r3, [pc, #548]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d06c      	beq.n	8005278 <HAL_RCC_OscConfig+0x12c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d168      	bne.n	8005278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e24c      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_OscConfig+0x76>
 80051b4:	4b80      	ldr	r3, [pc, #512]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a7f      	ldr	r2, [pc, #508]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e02e      	b.n	8005220 <HAL_RCC_OscConfig+0xd4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x98>
 80051ca:	4b7b      	ldr	r3, [pc, #492]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7a      	ldr	r2, [pc, #488]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b78      	ldr	r3, [pc, #480]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a77      	ldr	r2, [pc, #476]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e01d      	b.n	8005220 <HAL_RCC_OscConfig+0xd4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0xbc>
 80051ee:	4b72      	ldr	r3, [pc, #456]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a71      	ldr	r2, [pc, #452]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b6f      	ldr	r3, [pc, #444]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6e      	ldr	r2, [pc, #440]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e00b      	b.n	8005220 <HAL_RCC_OscConfig+0xd4>
 8005208:	4b6b      	ldr	r3, [pc, #428]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a6a      	ldr	r2, [pc, #424]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a67      	ldr	r2, [pc, #412]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800521a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d013      	beq.n	8005250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fd fd7a 	bl	8002d20 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005230:	f7fd fd76 	bl	8002d20 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e200      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b5d      	ldr	r3, [pc, #372]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0xe4>
 800524e:	e014      	b.n	800527a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd fd66 	bl	8002d20 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005258:	f7fd fd62 	bl	8002d20 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1ec      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x10c>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d063      	beq.n	800534e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005286:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005292:	4b49      	ldr	r3, [pc, #292]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 030c 	and.w	r3, r3, #12
 800529a:	2b08      	cmp	r3, #8
 800529c:	d11c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x18c>
 800529e:	4b46      	ldr	r3, [pc, #280]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d116      	bne.n	80052d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	4b43      	ldr	r3, [pc, #268]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_RCC_OscConfig+0x176>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e1c0      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4939      	ldr	r1, [pc, #228]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	e03a      	b.n	800534e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7fd fd1b 	bl	8002d20 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ee:	f7fd fd17 	bl	8002d20 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e1a1      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005300:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4927      	ldr	r1, [pc, #156]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
 8005320:	e015      	b.n	800534e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005322:	4b26      	ldr	r3, [pc, #152]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fd fcfa 	bl	8002d20 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005330:	f7fd fcf6 	bl	8002d20 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e180      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d03a      	beq.n	80053d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d019      	beq.n	8005396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <HAL_RCC_OscConfig+0x274>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fd fcda 	bl	8002d20 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005370:	f7fd fcd6 	bl	8002d20 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e160      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <HAL_RCC_OscConfig+0x26c>)
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800538e:	2001      	movs	r0, #1
 8005390:	f000 fb08 	bl	80059a4 <RCC_Delay>
 8005394:	e01c      	b.n	80053d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <HAL_RCC_OscConfig+0x274>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539c:	f7fd fcc0 	bl	8002d20 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a2:	e00f      	b.n	80053c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a4:	f7fd fcbc 	bl	8002d20 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d908      	bls.n	80053c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e146      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	42420000 	.word	0x42420000
 80053c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c4:	4b92      	ldr	r3, [pc, #584]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e9      	bne.n	80053a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80a6 	beq.w	800552a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e2:	4b8b      	ldr	r3, [pc, #556]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10d      	bne.n	800540a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ee:	4b88      	ldr	r3, [pc, #544]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	4a87      	ldr	r2, [pc, #540]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80053f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f8:	61d3      	str	r3, [r2, #28]
 80053fa:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005406:	2301      	movs	r3, #1
 8005408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540a:	4b82      	ldr	r3, [pc, #520]	; (8005614 <HAL_RCC_OscConfig+0x4c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d118      	bne.n	8005448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005416:	4b7f      	ldr	r3, [pc, #508]	; (8005614 <HAL_RCC_OscConfig+0x4c8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a7e      	ldr	r2, [pc, #504]	; (8005614 <HAL_RCC_OscConfig+0x4c8>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005422:	f7fd fc7d 	bl	8002d20 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542a:	f7fd fc79 	bl	8002d20 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	; 0x64
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e103      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543c:	4b75      	ldr	r3, [pc, #468]	; (8005614 <HAL_RCC_OscConfig+0x4c8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d106      	bne.n	800545e <HAL_RCC_OscConfig+0x312>
 8005450:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	4a6e      	ldr	r2, [pc, #440]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6213      	str	r3, [r2, #32]
 800545c:	e02d      	b.n	80054ba <HAL_RCC_OscConfig+0x36e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10c      	bne.n	8005480 <HAL_RCC_OscConfig+0x334>
 8005466:	4b6a      	ldr	r3, [pc, #424]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	4a69      	ldr	r2, [pc, #420]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	6213      	str	r3, [r2, #32]
 8005472:	4b67      	ldr	r3, [pc, #412]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	4a66      	ldr	r2, [pc, #408]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005478:	f023 0304 	bic.w	r3, r3, #4
 800547c:	6213      	str	r3, [r2, #32]
 800547e:	e01c      	b.n	80054ba <HAL_RCC_OscConfig+0x36e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b05      	cmp	r3, #5
 8005486:	d10c      	bne.n	80054a2 <HAL_RCC_OscConfig+0x356>
 8005488:	4b61      	ldr	r3, [pc, #388]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	4a60      	ldr	r2, [pc, #384]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	6213      	str	r3, [r2, #32]
 8005494:	4b5e      	ldr	r3, [pc, #376]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	4a5d      	ldr	r2, [pc, #372]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6213      	str	r3, [r2, #32]
 80054a0:	e00b      	b.n	80054ba <HAL_RCC_OscConfig+0x36e>
 80054a2:	4b5b      	ldr	r3, [pc, #364]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4a5a      	ldr	r2, [pc, #360]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6213      	str	r3, [r2, #32]
 80054ae:	4b58      	ldr	r3, [pc, #352]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	4a57      	ldr	r2, [pc, #348]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d015      	beq.n	80054ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c2:	f7fd fc2d 	bl	8002d20 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fd fc29 	bl	8002d20 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0b1      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e0:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ee      	beq.n	80054ca <HAL_RCC_OscConfig+0x37e>
 80054ec:	e014      	b.n	8005518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ee:	f7fd fc17 	bl	8002d20 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f4:	e00a      	b.n	800550c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fd fc13 	bl	8002d20 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e09b      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550c:	4b40      	ldr	r3, [pc, #256]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ee      	bne.n	80054f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551e:	4b3c      	ldr	r3, [pc, #240]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4a3b      	ldr	r2, [pc, #236]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8087 	beq.w	8005642 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005534:	4b36      	ldr	r3, [pc, #216]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b08      	cmp	r3, #8
 800553e:	d061      	beq.n	8005604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d146      	bne.n	80055d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b33      	ldr	r3, [pc, #204]	; (8005618 <HAL_RCC_OscConfig+0x4cc>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fd fbe7 	bl	8002d20 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005556:	f7fd fbe3 	bl	8002d20 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e06d      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005568:	4b29      	ldr	r3, [pc, #164]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d108      	bne.n	8005590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800557e:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	4921      	ldr	r1, [pc, #132]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005590:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a19      	ldr	r1, [r3, #32]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	430b      	orrs	r3, r1
 80055a2:	491b      	ldr	r1, [pc, #108]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_RCC_OscConfig+0x4cc>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ae:	f7fd fbb7 	bl	8002d20 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b6:	f7fd fbb3 	bl	8002d20 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e03d      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x46a>
 80055d4:	e035      	b.n	8005642 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <HAL_RCC_OscConfig+0x4cc>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fd fba0 	bl	8002d20 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fd fb9c 	bl	8002d20 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e026      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCC_OscConfig+0x4c4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x498>
 8005602:	e01e      	b.n	8005642 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d107      	bne.n	800561c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e019      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
 8005610:	40021000 	.word	0x40021000
 8005614:	40007000 	.word	0x40007000
 8005618:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <HAL_RCC_OscConfig+0x500>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	429a      	cmp	r2, r3
 800562e:	d106      	bne.n	800563e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d001      	beq.n	8005642 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000

08005650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0d0      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005664:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d910      	bls.n	8005694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 0207 	bic.w	r2, r3, #7
 800567a:	4965      	ldr	r1, [pc, #404]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b63      	ldr	r3, [pc, #396]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0b8      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ac:	4b59      	ldr	r3, [pc, #356]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a58      	ldr	r2, [pc, #352]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056c4:	4b53      	ldr	r3, [pc, #332]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a52      	ldr	r2, [pc, #328]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d0:	4b50      	ldr	r3, [pc, #320]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	494d      	ldr	r1, [pc, #308]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d040      	beq.n	8005770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d115      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e07f      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570e:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e073      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571e:	4b3d      	ldr	r3, [pc, #244]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e06b      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572e:	4b39      	ldr	r3, [pc, #228]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4936      	ldr	r1, [pc, #216]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005740:	f7fd faee 	bl	8002d20 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	e00a      	b.n	800575e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fd faea 	bl	8002d20 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e053      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 020c 	and.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	429a      	cmp	r2, r3
 800576e:	d1eb      	bne.n	8005748 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005770:	4b27      	ldr	r3, [pc, #156]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d210      	bcs.n	80057a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 0207 	bic.w	r2, r3, #7
 8005786:	4922      	ldr	r1, [pc, #136]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e032      	b.n	8005806 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4916      	ldr	r1, [pc, #88]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	490e      	ldr	r1, [pc, #56]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057de:	f000 f821 	bl	8005824 <HAL_RCC_GetSysClockFreq>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	490a      	ldr	r1, [pc, #40]	; (8005818 <HAL_RCC_ClockConfig+0x1c8>)
 80057f0:	5ccb      	ldrb	r3, [r1, r3]
 80057f2:	fa22 f303 	lsr.w	r3, r2, r3
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <HAL_RCC_ClockConfig+0x1cc>)
 80057f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <HAL_RCC_ClockConfig+0x1d0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fd f988 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40022000 	.word	0x40022000
 8005814:	40021000 	.word	0x40021000
 8005818:	080084b0 	.word	0x080084b0
 800581c:	20000004 	.word	0x20000004
 8005820:	20000008 	.word	0x20000008

08005824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005824:	b490      	push	{r4, r7}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800582a:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800582c:	1d3c      	adds	r4, r7, #4
 800582e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005834:	f240 2301 	movw	r3, #513	; 0x201
 8005838:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	2b04      	cmp	r3, #4
 800585c:	d002      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x40>
 800585e:	2b08      	cmp	r3, #8
 8005860:	d003      	beq.n	800586a <HAL_RCC_GetSysClockFreq+0x46>
 8005862:	e02b      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005864:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005866:	623b      	str	r3, [r7, #32]
      break;
 8005868:	e02b      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	0c9b      	lsrs	r3, r3, #18
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	3328      	adds	r3, #40	; 0x28
 8005874:	443b      	add	r3, r7
 8005876:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800587a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d012      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005886:	4b13      	ldr	r3, [pc, #76]	; (80058d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	0c5b      	lsrs	r3, r3, #17
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	3328      	adds	r3, #40	; 0x28
 8005892:	443b      	add	r3, r7
 8005894:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005898:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4a0e      	ldr	r2, [pc, #56]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800589e:	fb03 f202 	mul.w	r2, r3, r2
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e004      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4a0b      	ldr	r2, [pc, #44]	; (80058dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	623b      	str	r3, [r7, #32]
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80058be:	623b      	str	r3, [r7, #32]
      break;
 80058c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c2:	6a3b      	ldr	r3, [r7, #32]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3728      	adds	r7, #40	; 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc90      	pop	{r4, r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	08008498 	.word	0x08008498
 80058d4:	40021000 	.word	0x40021000
 80058d8:	007a1200 	.word	0x007a1200
 80058dc:	003d0900 	.word	0x003d0900

080058e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e4:	4b02      	ldr	r3, [pc, #8]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	20000004 	.word	0x20000004

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff2 	bl	80058e0 <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4903      	ldr	r1, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	080084c0 	.word	0x080084c0

0800591c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005920:	f7ff ffde 	bl	80058e0 <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	0adb      	lsrs	r3, r3, #11
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4903      	ldr	r1, [pc, #12]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	080084c0 	.word	0x080084c0

08005944 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	220f      	movs	r2, #15
 8005952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <HAL_RCC_GetClockConfig+0x58>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0203 	and.w	r2, r3, #3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <HAL_RCC_GetClockConfig+0x58>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCC_GetClockConfig+0x58>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <HAL_RCC_GetClockConfig+0x58>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0207 	and.w	r2, r3, #7
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	40021000 	.word	0x40021000
 80059a0:	40022000 	.word	0x40022000

080059a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <RCC_Delay+0x34>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <RCC_Delay+0x38>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	0a5b      	lsrs	r3, r3, #9
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059c0:	bf00      	nop
  }
  while (Delay --);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	60fa      	str	r2, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f9      	bne.n	80059c0 <RCC_Delay+0x1c>
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	20000004 	.word	0x20000004
 80059dc:	10624dd3 	.word	0x10624dd3

080059e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d07d      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80059fc:	2300      	movs	r3, #0
 80059fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a00:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10d      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0c:	4b4c      	ldr	r3, [pc, #304]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	4a4b      	ldr	r2, [pc, #300]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a16:	61d3      	str	r3, [r2, #28]
 8005a18:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a28:	4b46      	ldr	r3, [pc, #280]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d118      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a34:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a42      	ldr	r2, [pc, #264]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a40:	f7fd f96e 	bl	8002d20 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a46:	e008      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a48:	f7fd f96a 	bl	8002d20 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e06d      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5a:	4b3a      	ldr	r3, [pc, #232]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02e      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d027      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a84:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a8e:	4b2e      	ldr	r3, [pc, #184]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a9a:	4a29      	ldr	r2, [pc, #164]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d014      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aaa:	f7fd f939 	bl	8002d20 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fd f935 	bl	8002d20 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e036      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0ee      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4917      	ldr	r1, [pc, #92]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aec:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	490b      	ldr	r1, [pc, #44]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40007000 	.word	0x40007000
 8005b48:	42420440 	.word	0x42420440

08005b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e041      	b.n	8005be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fc ff14 	bl	80029a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f000 fc9e 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e03a      	b.n	8005c7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIM_Base_Start_IT+0x98>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x58>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x58>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x58>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d111      	bne.n	8005c68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b06      	cmp	r3, #6
 8005c54:	d010      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	e007      	b.n	8005c78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800

08005c90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e041      	b.n	8005d26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f839 	bl	8005d2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f000 fbfc 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_IC_Start_IT+0x1a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	e013      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x42>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_IC_Start_IT+0x2a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	e00b      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x42>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d104      	bne.n	8005d7a <HAL_TIM_IC_Start_IT+0x3a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	e003      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x42>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <HAL_TIM_IC_Start_IT+0x54>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	e013      	b.n	8005dbc <HAL_TIM_IC_Start_IT+0x7c>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d104      	bne.n	8005da4 <HAL_TIM_IC_Start_IT+0x64>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e00b      	b.n	8005dbc <HAL_TIM_IC_Start_IT+0x7c>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d104      	bne.n	8005db4 <HAL_TIM_IC_Start_IT+0x74>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e003      	b.n	8005dbc <HAL_TIM_IC_Start_IT+0x7c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d001      	beq.n	8005dce <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0b3      	b.n	8005f36 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_TIM_IC_Start_IT+0x9e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ddc:	e013      	b.n	8005e06 <HAL_TIM_IC_Start_IT+0xc6>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_IC_Start_IT+0xae>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dec:	e00b      	b.n	8005e06 <HAL_TIM_IC_Start_IT+0xc6>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_IC_Start_IT+0xbe>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfc:	e003      	b.n	8005e06 <HAL_TIM_IC_Start_IT+0xc6>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <HAL_TIM_IC_Start_IT+0xd6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e14:	e013      	b.n	8005e3e <HAL_TIM_IC_Start_IT+0xfe>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d104      	bne.n	8005e26 <HAL_TIM_IC_Start_IT+0xe6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e24:	e00b      	b.n	8005e3e <HAL_TIM_IC_Start_IT+0xfe>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_IC_Start_IT+0xf6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e34:	e003      	b.n	8005e3e <HAL_TIM_IC_Start_IT+0xfe>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d841      	bhi.n	8005ec8 <HAL_TIM_IC_Start_IT+0x188>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_TIM_IC_Start_IT+0x10c>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005ec9 	.word	0x08005ec9
 8005e54:	08005ec9 	.word	0x08005ec9
 8005e58:	08005ec9 	.word	0x08005ec9
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005ec9 	.word	0x08005ec9
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005ec9 	.word	0x08005ec9
 8005e7c:	08005eb7 	.word	0x08005eb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0202 	orr.w	r2, r2, #2
 8005e8e:	60da      	str	r2, [r3, #12]
      break;
 8005e90:	e01b      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0204 	orr.w	r2, r2, #4
 8005ea0:	60da      	str	r2, [r3, #12]
      break;
 8005ea2:	e012      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0208 	orr.w	r2, r2, #8
 8005eb2:	60da      	str	r2, [r3, #12]
      break;
 8005eb4:	e009      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0210 	orr.w	r2, r2, #16
 8005ec4:	60da      	str	r2, [r3, #12]
      break;
 8005ec6:	e000      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005ec8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fcff 	bl	80068d6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <HAL_TIM_IC_Start_IT+0x200>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_TIM_IC_Start_IT+0x1c0>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d009      	beq.n	8005f00 <HAL_TIM_IC_Start_IT+0x1c0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <HAL_TIM_IC_Start_IT+0x204>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIM_IC_Start_IT+0x1c0>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <HAL_TIM_IC_Start_IT+0x208>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b06      	cmp	r3, #6
 8005f10:	d010      	beq.n	8005f34 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f22:	e007      	b.n	8005f34 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40000400 	.word	0x40000400
 8005f48:	40000800 	.word	0x40000800

08005f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d122      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0202 	mvn.w	r2, #2
 8005f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb f8ce 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa7c 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa82 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d122      	bne.n	8005ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0204 	mvn.w	r2, #4
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb f8a4 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa52 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa58 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b08      	cmp	r3, #8
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b08      	cmp	r3, #8
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0208 	mvn.w	r2, #8
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2204      	movs	r2, #4
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb f87a 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa28 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa2e 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0310 	and.w	r3, r3, #16
 800605a:	2b10      	cmp	r3, #16
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b10      	cmp	r3, #16
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0210 	mvn.w	r2, #16
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2208      	movs	r2, #8
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb f850 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9fe 	bl	8006494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fa04 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d10e      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0201 	mvn.w	r2, #1
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc fadc 	bl	8002688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc79 	bl	80069ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d10e      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d107      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9c8 	bl	80064b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b20      	cmp	r3, #32
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0220 	mvn.w	r2, #32
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fc44 	bl	80069dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006172:	2302      	movs	r3, #2
 8006174:	e082      	b.n	800627c <HAL_TIM_IC_ConfigChannel+0x120>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f000 f9fc 	bl	8006590 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 020c 	bic.w	r2, r2, #12
 80061a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	619a      	str	r2, [r3, #24]
 80061ba:	e05a      	b.n	8006272 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d11c      	bne.n	80061fc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f000 fa65 	bl	80066a0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6999      	ldr	r1, [r3, #24]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	021a      	lsls	r2, r3, #8
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
 80061fa:	e03a      	b.n	8006272 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d11b      	bne.n	800623a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f000 fab0 	bl	8006776 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 020c 	bic.w	r2, r2, #12
 8006224:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69d9      	ldr	r1, [r3, #28]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	61da      	str	r2, [r3, #28]
 8006238:	e01b      	b.n	8006272 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f000 facf 	bl	80067ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800625c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69d9      	ldr	r1, [r3, #28]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	021a      	lsls	r2, r3, #8
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_TIM_ConfigClockSource+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e0b3      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x180>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d4:	d03e      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0xd0>
 80062d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062da:	f200 8087 	bhi.w	80063ec <HAL_TIM_ConfigClockSource+0x168>
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	f000 8085 	beq.w	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ea:	d87f      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 80062ec:	2b70      	cmp	r3, #112	; 0x70
 80062ee:	d01a      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0xa2>
 80062f0:	2b70      	cmp	r3, #112	; 0x70
 80062f2:	d87b      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 80062f4:	2b60      	cmp	r3, #96	; 0x60
 80062f6:	d050      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x116>
 80062f8:	2b60      	cmp	r3, #96	; 0x60
 80062fa:	d877      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 80062fc:	2b50      	cmp	r3, #80	; 0x50
 80062fe:	d03c      	beq.n	800637a <HAL_TIM_ConfigClockSource+0xf6>
 8006300:	2b50      	cmp	r3, #80	; 0x50
 8006302:	d873      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d058      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x136>
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d86f      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 800630c:	2b30      	cmp	r3, #48	; 0x30
 800630e:	d064      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x156>
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d86b      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 8006314:	2b20      	cmp	r3, #32
 8006316:	d060      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x156>
 8006318:	2b20      	cmp	r3, #32
 800631a:	d867      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d05c      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x156>
 8006320:	2b10      	cmp	r3, #16
 8006322:	d05a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006324:	e062      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6899      	ldr	r1, [r3, #8]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f000 faaf 	bl	8006898 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006348:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	609a      	str	r2, [r3, #8]
      break;
 8006352:	e04e      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6899      	ldr	r1, [r3, #8]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f000 fa98 	bl	8006898 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006376:	609a      	str	r2, [r3, #8]
      break;
 8006378:	e03b      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6859      	ldr	r1, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	461a      	mov	r2, r3
 8006388:	f000 f95c 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2150      	movs	r1, #80	; 0x50
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa66 	bl	8006864 <TIM_ITRx_SetConfig>
      break;
 8006398:	e02b      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f000 f9b6 	bl	8006718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2160      	movs	r1, #96	; 0x60
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fa56 	bl	8006864 <TIM_ITRx_SetConfig>
      break;
 80063b8:	e01b      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 f93c 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2140      	movs	r1, #64	; 0x40
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fa46 	bl	8006864 <TIM_ITRx_SetConfig>
      break;
 80063d8:	e00b      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f000 fa3d 	bl	8006864 <TIM_ITRx_SetConfig>
        break;
 80063ea:	e002      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80063f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d831      	bhi.n	8006484 <HAL_TIM_ReadCapturedValue+0x78>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800645d 	.word	0x0800645d
 800642c:	08006485 	.word	0x08006485
 8006430:	08006485 	.word	0x08006485
 8006434:	08006485 	.word	0x08006485
 8006438:	08006467 	.word	0x08006467
 800643c:	08006485 	.word	0x08006485
 8006440:	08006485 	.word	0x08006485
 8006444:	08006485 	.word	0x08006485
 8006448:	08006471 	.word	0x08006471
 800644c:	08006485 	.word	0x08006485
 8006450:	08006485 	.word	0x08006485
 8006454:	08006485 	.word	0x08006485
 8006458:	0800647b 	.word	0x0800647b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	60fb      	str	r3, [r7, #12]

      break;
 8006464:	e00f      	b.n	8006486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	60fb      	str	r3, [r7, #12]

      break;
 800646e:	e00a      	b.n	8006486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	60fb      	str	r3, [r7, #12]

      break;
 8006478:	e005      	b.n	8006486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	60fb      	str	r3, [r7, #12]

      break;
 8006482:	e000      	b.n	8006486 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006484:	bf00      	nop
  }

  return tmpreg;
 8006486:	68fb      	ldr	r3, [r7, #12]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop

08006494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr

080064a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr
	...

080064cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a29      	ldr	r2, [pc, #164]	; (8006584 <TIM_Base_SetConfig+0xb8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00b      	beq.n	80064fc <TIM_Base_SetConfig+0x30>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ea:	d007      	beq.n	80064fc <TIM_Base_SetConfig+0x30>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a26      	ldr	r2, [pc, #152]	; (8006588 <TIM_Base_SetConfig+0xbc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_Base_SetConfig+0x30>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a25      	ldr	r2, [pc, #148]	; (800658c <TIM_Base_SetConfig+0xc0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d108      	bne.n	800650e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1c      	ldr	r2, [pc, #112]	; (8006584 <TIM_Base_SetConfig+0xb8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_Base_SetConfig+0x62>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651c:	d007      	beq.n	800652e <TIM_Base_SetConfig+0x62>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a19      	ldr	r2, [pc, #100]	; (8006588 <TIM_Base_SetConfig+0xbc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_Base_SetConfig+0x62>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a18      	ldr	r2, [pc, #96]	; (800658c <TIM_Base_SetConfig+0xc0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d108      	bne.n	8006540 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <TIM_Base_SetConfig+0xb8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d103      	bne.n	8006574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	615a      	str	r2, [r3, #20]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800

08006590 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0201 	bic.w	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a1f      	ldr	r2, [pc, #124]	; (8006638 <TIM_TI1_SetConfig+0xa8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <TIM_TI1_SetConfig+0x46>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c4:	d007      	beq.n	80065d6 <TIM_TI1_SetConfig+0x46>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <TIM_TI1_SetConfig+0xac>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_TI1_SetConfig+0x46>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <TIM_TI1_SetConfig+0xb0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <TIM_TI1_SetConfig+0x4a>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <TIM_TI1_SetConfig+0x4c>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d008      	beq.n	80065f2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e003      	b.n	80065fa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f043 0301 	orr.w	r3, r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	b2db      	uxtb	r3, r3
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f023 030a 	bic.w	r3, r3, #10
 8006614:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 030a 	and.w	r3, r3, #10
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800

08006644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 030a 	bic.w	r3, r3, #10
 8006680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	031b      	lsls	r3, r3, #12
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f023 0210 	bic.w	r2, r3, #16
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	031b      	lsls	r3, r3, #12
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006818:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800682a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	031b      	lsls	r3, r3, #12
 8006830:	b29b      	uxth	r3, r3
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800683e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	031b      	lsls	r3, r3, #12
 8006844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	f043 0307 	orr.w	r3, r3, #7
 8006886:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	609a      	str	r2, [r3, #8]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	021a      	lsls	r2, r3, #8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4313      	orrs	r3, r2
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b087      	sub	sp, #28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	2201      	movs	r2, #1
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	401a      	ands	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1a      	ldr	r2, [r3, #32]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	fa01 f303 	lsl.w	r3, r1, r3
 800690e:	431a      	orrs	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
	...

08006920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e046      	b.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006984:	d009      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a10      	ldr	r2, [pc, #64]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10c      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40000800 	.word	0x40000800

080069dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e03f      	b.n	8006a92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fc f828 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2224      	movs	r2, #36	; 0x24
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f915 	bl	8006c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b08a      	sub	sp, #40	; 0x28
 8006a9e:	af02      	add	r7, sp, #8
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	f040 808c 	bne.w	8006bd4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_UART_Receive+0x2e>
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e084      	b.n	8006bd6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Receive+0x40>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	e07d      	b.n	8006bd6 <HAL_UART_Receive+0x13c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2222      	movs	r2, #34	; 0x22
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af6:	f7fc f913 	bl	8002d20 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d108      	bne.n	8006b24 <HAL_UART_Receive+0x8a>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e003      	b.n	8006b2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b34:	e043      	b.n	8006bbe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2120      	movs	r1, #32
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f84c 	bl	8006bde <UART_WaitOnFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e042      	b.n	8006bd6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	e01f      	b.n	8006bb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d007      	beq.n	8006b8a <HAL_UART_Receive+0xf0>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <HAL_UART_Receive+0xfe>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e008      	b.n	8006baa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3301      	adds	r3, #1
 8006bae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1b6      	bne.n	8006b36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e000      	b.n	8006bd6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3720      	adds	r7, #32
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bee:	e02c      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d028      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8006bfe:	f7fc f88f 	bl	8002d20 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d21d      	bcs.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695a      	ldr	r2, [r3, #20]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e00f      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4013      	ands	r3, r2
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	bf0c      	ite	eq
 8006c5a:	2301      	moveq	r3, #1
 8006c5c:	2300      	movne	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d0c3      	beq.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006cae:	f023 030c 	bic.w	r3, r3, #12
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <UART_SetConfig+0x114>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d103      	bne.n	8006ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cdc:	f7fe fe1e 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	e002      	b.n	8006cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fe fe06 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8006ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009a      	lsls	r2, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <UART_SetConfig+0x118>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	0119      	lsls	r1, r3, #4
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009a      	lsls	r2, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d20:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <UART_SetConfig+0x118>)
 8006d22:	fba3 0302 	umull	r0, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	2064      	movs	r0, #100	; 0x64
 8006d2a:	fb00 f303 	mul.w	r3, r0, r3
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	3332      	adds	r3, #50	; 0x32
 8006d34:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <UART_SetConfig+0x118>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d40:	4419      	add	r1, r3
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009a      	lsls	r2, r3, #2
 8006d4c:	441a      	add	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <UART_SetConfig+0x118>)
 8006d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	2064      	movs	r0, #100	; 0x64
 8006d62:	fb00 f303 	mul.w	r3, r0, r3
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	3332      	adds	r3, #50	; 0x32
 8006d6c:	4a07      	ldr	r2, [pc, #28]	; (8006d8c <UART_SetConfig+0x118>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40013800 	.word	0x40013800
 8006d8c:	51eb851f 	.word	0x51eb851f

08006d90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006da2:	2b84      	cmp	r3, #132	; 0x84
 8006da4:	d005      	beq.n	8006db2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006da6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	3303      	adds	r3, #3
 8006db0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr

08006dbe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006dc2:	f000 fae7 	bl	8007394 <vTaskStartScheduler>
  
  return osOK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dce:	b089      	sub	sp, #36	; 0x24
 8006dd0:	af04      	add	r7, sp, #16
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d020      	beq.n	8006e20 <osThreadCreate+0x54>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01c      	beq.n	8006e20 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685c      	ldr	r4, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681d      	ldr	r5, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691e      	ldr	r6, [r3, #16]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff ffc9 	bl	8006d90 <makeFreeRtosPriority>
 8006dfe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e08:	9202      	str	r2, [sp, #8]
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	9100      	str	r1, [sp, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	4632      	mov	r2, r6
 8006e12:	4629      	mov	r1, r5
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f8e8 	bl	8006fea <xTaskCreateStatic>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	e01c      	b.n	8006e5a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685c      	ldr	r4, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e2c:	b29e      	uxth	r6, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ffab 	bl	8006d90 <makeFreeRtosPriority>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	f107 030c 	add.w	r3, r7, #12
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	9200      	str	r2, [sp, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	4632      	mov	r2, r6
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f929 	bl	80070a2 <xTaskCreate>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d001      	beq.n	8006e5a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e000      	b.n	8006e5c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <osDelay+0x16>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	e000      	b.n	8006e7c <osDelay+0x18>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fa55 	bl	800732c <vTaskDelay>
  
  return osOK;
 8006e82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f103 0208 	add.w	r2, r3, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f103 0208 	add.w	r2, r3, #8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f103 0208 	add.w	r2, r3, #8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr

08006eca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d103      	bne.n	8006f48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e00c      	b.n	8006f62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e002      	b.n	8006f56 <vListInsert+0x2e>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d2f6      	bcs.n	8006f50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6892      	ldr	r2, [r2, #8]
 8006fae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6852      	ldr	r2, [r2, #4]
 8006fb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d103      	bne.n	8006fcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	1e5a      	subs	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08e      	sub	sp, #56	; 0x38
 8006fee:	af04      	add	r7, sp, #16
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <xTaskCreateStatic+0x46>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61fb      	str	r3, [r7, #28]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007030:	23b4      	movs	r3, #180	; 0xb4
 8007032:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2bb4      	cmp	r3, #180	; 0xb4
 8007038:	d00a      	beq.n	8007050 <xTaskCreateStatic+0x66>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	61bb      	str	r3, [r7, #24]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	2b00      	cmp	r3, #0
 8007054:	d01e      	beq.n	8007094 <xTaskCreateStatic+0xaa>
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01b      	beq.n	8007094 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007064:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	2202      	movs	r2, #2
 800706a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800706e:	2300      	movs	r3, #0
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	f107 0314 	add.w	r3, r7, #20
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f850 	bl	800712c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800708c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800708e:	f000 f8e3 	bl	8007258 <prvAddNewTaskToReadyList>
 8007092:	e001      	b.n	8007098 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007098:	697b      	ldr	r3, [r7, #20]
	}
 800709a:	4618      	mov	r0, r3
 800709c:	3728      	adds	r7, #40	; 0x28
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b08c      	sub	sp, #48	; 0x30
 80070a6:	af04      	add	r7, sp, #16
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	603b      	str	r3, [r7, #0]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fe9a 	bl	8007df0 <pvPortMalloc>
 80070bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00e      	beq.n	80070e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80070c4:	20b4      	movs	r0, #180	; 0xb4
 80070c6:	f000 fe93 	bl	8007df0 <pvPortMalloc>
 80070ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
 80070d8:	e005      	b.n	80070e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	f000 ff4c 	bl	8007f78 <vPortFree>
 80070e0:	e001      	b.n	80070e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d017      	beq.n	800711c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	2300      	movs	r3, #0
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f80e 	bl	800712c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007110:	69f8      	ldr	r0, [r7, #28]
 8007112:	f000 f8a1 	bl	8007258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007116:	2301      	movs	r3, #1
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	e002      	b.n	8007122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800711c:	f04f 33ff 	mov.w	r3, #4294967295
 8007120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007122:	69bb      	ldr	r3, [r7, #24]
	}
 8007124:	4618      	mov	r0, r3
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007144:	3b01      	subs	r3, #1
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f023 0307 	bic.w	r3, r3, #7
 8007152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <prvInitialiseNewTask+0x48>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	617b      	str	r3, [r7, #20]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	e012      	b.n	80071a0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	7819      	ldrb	r1, [r3, #0]
 8007182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	3334      	adds	r3, #52	; 0x34
 800718a:	460a      	mov	r2, r1
 800718c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3301      	adds	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b0f      	cmp	r3, #15
 80071a4:	d9e9      	bls.n	800717a <prvInitialiseNewTask+0x4e>
 80071a6:	e000      	b.n	80071aa <prvInitialiseNewTask+0x7e>
		{
			break;
 80071a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	2b06      	cmp	r3, #6
 80071b6:	d901      	bls.n	80071bc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071b8:	2306      	movs	r3, #6
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	2200      	movs	r2, #0
 80071cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	3304      	adds	r3, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fe79 	bl	8006eca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	3318      	adds	r3, #24
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fe74 	bl	8006eca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f1c3 0207 	rsb	r2, r3, #7
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	334c      	adds	r3, #76	; 0x4c
 800720c:	2260      	movs	r2, #96	; 0x60
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fff9 	bl	8008208 <memset>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	4a0c      	ldr	r2, [pc, #48]	; (800724c <prvInitialiseNewTask+0x120>)
 800721a:	651a      	str	r2, [r3, #80]	; 0x50
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	4a0c      	ldr	r2, [pc, #48]	; (8007250 <prvInitialiseNewTask+0x124>)
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	4a0b      	ldr	r2, [pc, #44]	; (8007254 <prvInitialiseNewTask+0x128>)
 8007226:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	69b8      	ldr	r0, [r7, #24]
 800722e:	f000 fc29 	bl	8007a84 <pxPortInitialiseStack>
 8007232:	4602      	mov	r2, r0
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007242:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007244:	bf00      	nop
 8007246:	3720      	adds	r7, #32
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	080084e8 	.word	0x080084e8
 8007250:	08008508 	.word	0x08008508
 8007254:	080084c8 	.word	0x080084c8

08007258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007260:	f000 fd04 	bl	8007c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007264:	4b2a      	ldr	r3, [pc, #168]	; (8007310 <prvAddNewTaskToReadyList+0xb8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3301      	adds	r3, #1
 800726a:	4a29      	ldr	r2, [pc, #164]	; (8007310 <prvAddNewTaskToReadyList+0xb8>)
 800726c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800726e:	4b29      	ldr	r3, [pc, #164]	; (8007314 <prvAddNewTaskToReadyList+0xbc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007276:	4a27      	ldr	r2, [pc, #156]	; (8007314 <prvAddNewTaskToReadyList+0xbc>)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800727c:	4b24      	ldr	r3, [pc, #144]	; (8007310 <prvAddNewTaskToReadyList+0xb8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d110      	bne.n	80072a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007284:	f000 fad2 	bl	800782c <prvInitialiseTaskLists>
 8007288:	e00d      	b.n	80072a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800728a:	4b23      	ldr	r3, [pc, #140]	; (8007318 <prvAddNewTaskToReadyList+0xc0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <prvAddNewTaskToReadyList+0xbc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	429a      	cmp	r2, r3
 800729e:	d802      	bhi.n	80072a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072a0:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <prvAddNewTaskToReadyList+0xbc>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072a6:	4b1d      	ldr	r3, [pc, #116]	; (800731c <prvAddNewTaskToReadyList+0xc4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3301      	adds	r3, #1
 80072ac:	4a1b      	ldr	r2, [pc, #108]	; (800731c <prvAddNewTaskToReadyList+0xc4>)
 80072ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	2201      	movs	r2, #1
 80072b6:	409a      	lsls	r2, r3
 80072b8:	4b19      	ldr	r3, [pc, #100]	; (8007320 <prvAddNewTaskToReadyList+0xc8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4313      	orrs	r3, r2
 80072be:	4a18      	ldr	r2, [pc, #96]	; (8007320 <prvAddNewTaskToReadyList+0xc8>)
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4a15      	ldr	r2, [pc, #84]	; (8007324 <prvAddNewTaskToReadyList+0xcc>)
 80072d0:	441a      	add	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fe02 	bl	8006ee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072de:	f000 fcf5 	bl	8007ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072e2:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <prvAddNewTaskToReadyList+0xc0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072ea:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <prvAddNewTaskToReadyList+0xbc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d207      	bcs.n	8007308 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <prvAddNewTaskToReadyList+0xd0>)
 80072fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000748 	.word	0x20000748
 8007314:	20000648 	.word	0x20000648
 8007318:	20000754 	.word	0x20000754
 800731c:	20000764 	.word	0x20000764
 8007320:	20000750 	.word	0x20000750
 8007324:	2000064c 	.word	0x2000064c
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d017      	beq.n	800736e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <vTaskDelay+0x60>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <vTaskDelay+0x30>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60bb      	str	r3, [r7, #8]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800735c:	f000 f884 	bl	8007468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb28 	bl	80079b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007368:	f000 f88c 	bl	8007484 <xTaskResumeAll>
 800736c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d107      	bne.n	8007384 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <vTaskDelay+0x64>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000770 	.word	0x20000770
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073a2:	463a      	mov	r2, r7
 80073a4:	1d39      	adds	r1, r7, #4
 80073a6:	f107 0308 	add.w	r3, r7, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fa f93e 	bl	800162c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	9202      	str	r2, [sp, #8]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	2300      	movs	r3, #0
 80073c0:	460a      	mov	r2, r1
 80073c2:	4921      	ldr	r1, [pc, #132]	; (8007448 <vTaskStartScheduler+0xb4>)
 80073c4:	4821      	ldr	r0, [pc, #132]	; (800744c <vTaskStartScheduler+0xb8>)
 80073c6:	f7ff fe10 	bl	8006fea <xTaskCreateStatic>
 80073ca:	4603      	mov	r3, r0
 80073cc:	4a20      	ldr	r2, [pc, #128]	; (8007450 <vTaskStartScheduler+0xbc>)
 80073ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <vTaskStartScheduler+0xbc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e001      	b.n	80073e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d11b      	bne.n	8007420 <vTaskStartScheduler+0x8c>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
}
 80073fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073fc:	4b15      	ldr	r3, [pc, #84]	; (8007454 <vTaskStartScheduler+0xc0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	334c      	adds	r3, #76	; 0x4c
 8007402:	4a15      	ldr	r2, [pc, #84]	; (8007458 <vTaskStartScheduler+0xc4>)
 8007404:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007406:	4b15      	ldr	r3, [pc, #84]	; (800745c <vTaskStartScheduler+0xc8>)
 8007408:	f04f 32ff 	mov.w	r2, #4294967295
 800740c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <vTaskStartScheduler+0xcc>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007414:	4b13      	ldr	r3, [pc, #76]	; (8007464 <vTaskStartScheduler+0xd0>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800741a:	f000 fbb5 	bl	8007b88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800741e:	e00e      	b.n	800743e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d10a      	bne.n	800743e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	60fb      	str	r3, [r7, #12]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <vTaskStartScheduler+0xa8>
}
 800743e:	bf00      	nop
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	080084a8 	.word	0x080084a8
 800744c:	080077fd 	.word	0x080077fd
 8007450:	2000076c 	.word	0x2000076c
 8007454:	20000648 	.word	0x20000648
 8007458:	20000014 	.word	0x20000014
 800745c:	20000768 	.word	0x20000768
 8007460:	20000754 	.word	0x20000754
 8007464:	2000074c 	.word	0x2000074c

08007468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <vTaskSuspendAll+0x18>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a03      	ldr	r2, [pc, #12]	; (8007480 <vTaskSuspendAll+0x18>)
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	bf00      	nop
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000770 	.word	0x20000770

08007484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007492:	4b41      	ldr	r3, [pc, #260]	; (8007598 <xTaskResumeAll+0x114>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	603b      	str	r3, [r7, #0]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b0:	f000 fbdc 	bl	8007c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074b4:	4b38      	ldr	r3, [pc, #224]	; (8007598 <xTaskResumeAll+0x114>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	4a37      	ldr	r2, [pc, #220]	; (8007598 <xTaskResumeAll+0x114>)
 80074bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074be:	4b36      	ldr	r3, [pc, #216]	; (8007598 <xTaskResumeAll+0x114>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d161      	bne.n	800758a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074c6:	4b35      	ldr	r3, [pc, #212]	; (800759c <xTaskResumeAll+0x118>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d05d      	beq.n	800758a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074ce:	e02e      	b.n	800752e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80074d0:	4b33      	ldr	r3, [pc, #204]	; (80075a0 <xTaskResumeAll+0x11c>)
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3318      	adds	r3, #24
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fd5b 	bl	8006f98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fd56 	bl	8006f98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	2201      	movs	r2, #1
 80074f2:	409a      	lsls	r2, r3
 80074f4:	4b2b      	ldr	r3, [pc, #172]	; (80075a4 <xTaskResumeAll+0x120>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <xTaskResumeAll+0x120>)
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a27      	ldr	r2, [pc, #156]	; (80075a8 <xTaskResumeAll+0x124>)
 800750c:	441a      	add	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7ff fce4 	bl	8006ee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <xTaskResumeAll+0x128>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	429a      	cmp	r2, r3
 8007526:	d302      	bcc.n	800752e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007528:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <xTaskResumeAll+0x12c>)
 800752a:	2201      	movs	r2, #1
 800752c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <xTaskResumeAll+0x11c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1cc      	bne.n	80074d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800753c:	f000 fa18 	bl	8007970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007540:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <xTaskResumeAll+0x130>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800754c:	f000 f836 	bl	80075bc <xTaskIncrementTick>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007556:	4b16      	ldr	r3, [pc, #88]	; (80075b0 <xTaskResumeAll+0x12c>)
 8007558:	2201      	movs	r2, #1
 800755a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3b01      	subs	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f1      	bne.n	800754c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <xTaskResumeAll+0x130>)
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800756e:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <xTaskResumeAll+0x12c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <xTaskResumeAll+0x134>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800758a:	f000 fb9f 	bl	8007ccc <vPortExitCritical>

	return xAlreadyYielded;
 800758e:	68bb      	ldr	r3, [r7, #8]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000770 	.word	0x20000770
 800759c:	20000748 	.word	0x20000748
 80075a0:	20000708 	.word	0x20000708
 80075a4:	20000750 	.word	0x20000750
 80075a8:	2000064c 	.word	0x2000064c
 80075ac:	20000648 	.word	0x20000648
 80075b0:	2000075c 	.word	0x2000075c
 80075b4:	20000758 	.word	0x20000758
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c6:	4b51      	ldr	r3, [pc, #324]	; (800770c <xTaskIncrementTick+0x150>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 808d 	bne.w	80076ea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d0:	4b4f      	ldr	r3, [pc, #316]	; (8007710 <xTaskIncrementTick+0x154>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075d8:	4a4d      	ldr	r2, [pc, #308]	; (8007710 <xTaskIncrementTick+0x154>)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d120      	bne.n	8007626 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075e4:	4b4b      	ldr	r3, [pc, #300]	; (8007714 <xTaskIncrementTick+0x158>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <xTaskIncrementTick+0x48>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	603b      	str	r3, [r7, #0]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xTaskIncrementTick+0x46>
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <xTaskIncrementTick+0x158>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	4b43      	ldr	r3, [pc, #268]	; (8007718 <xTaskIncrementTick+0x15c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a41      	ldr	r2, [pc, #260]	; (8007714 <xTaskIncrementTick+0x158>)
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4a41      	ldr	r2, [pc, #260]	; (8007718 <xTaskIncrementTick+0x15c>)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b40      	ldr	r3, [pc, #256]	; (800771c <xTaskIncrementTick+0x160>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	4a3f      	ldr	r2, [pc, #252]	; (800771c <xTaskIncrementTick+0x160>)
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	f000 f9a5 	bl	8007970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007626:	4b3e      	ldr	r3, [pc, #248]	; (8007720 <xTaskIncrementTick+0x164>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d34d      	bcc.n	80076cc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007630:	4b38      	ldr	r3, [pc, #224]	; (8007714 <xTaskIncrementTick+0x158>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <xTaskIncrementTick+0x82>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xTaskIncrementTick+0x84>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	4b36      	ldr	r3, [pc, #216]	; (8007720 <xTaskIncrementTick+0x164>)
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	601a      	str	r2, [r3, #0]
					break;
 800764c:	e03e      	b.n	80076cc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800764e:	4b31      	ldr	r3, [pc, #196]	; (8007714 <xTaskIncrementTick+0x158>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	429a      	cmp	r2, r3
 8007664:	d203      	bcs.n	800766e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007666:	4a2e      	ldr	r2, [pc, #184]	; (8007720 <xTaskIncrementTick+0x164>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6013      	str	r3, [r2, #0]
						break;
 800766c:	e02e      	b.n	80076cc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fc90 	bl	8006f98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3318      	adds	r3, #24
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fc87 	bl	8006f98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	2201      	movs	r2, #1
 8007690:	409a      	lsls	r2, r3
 8007692:	4b24      	ldr	r3, [pc, #144]	; (8007724 <xTaskIncrementTick+0x168>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4313      	orrs	r3, r2
 8007698:	4a22      	ldr	r2, [pc, #136]	; (8007724 <xTaskIncrementTick+0x168>)
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4a1f      	ldr	r2, [pc, #124]	; (8007728 <xTaskIncrementTick+0x16c>)
 80076aa:	441a      	add	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f7ff fc15 	bl	8006ee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4b1b      	ldr	r3, [pc, #108]	; (800772c <xTaskIncrementTick+0x170>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3b4      	bcc.n	8007630 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ca:	e7b1      	b.n	8007630 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076cc:	4b17      	ldr	r3, [pc, #92]	; (800772c <xTaskIncrementTick+0x170>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	4915      	ldr	r1, [pc, #84]	; (8007728 <xTaskIncrementTick+0x16c>)
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d907      	bls.n	80076f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e004      	b.n	80076f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076ea:	4b11      	ldr	r3, [pc, #68]	; (8007730 <xTaskIncrementTick+0x174>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3301      	adds	r3, #1
 80076f0:	4a0f      	ldr	r2, [pc, #60]	; (8007730 <xTaskIncrementTick+0x174>)
 80076f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <xTaskIncrementTick+0x178>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007700:	697b      	ldr	r3, [r7, #20]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000770 	.word	0x20000770
 8007710:	2000074c 	.word	0x2000074c
 8007714:	20000700 	.word	0x20000700
 8007718:	20000704 	.word	0x20000704
 800771c:	20000760 	.word	0x20000760
 8007720:	20000768 	.word	0x20000768
 8007724:	20000750 	.word	0x20000750
 8007728:	2000064c 	.word	0x2000064c
 800772c:	20000648 	.word	0x20000648
 8007730:	20000758 	.word	0x20000758
 8007734:	2000075c 	.word	0x2000075c

08007738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <vTaskSwitchContext+0xac>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007746:	4b28      	ldr	r3, [pc, #160]	; (80077e8 <vTaskSwitchContext+0xb0>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800774c:	e044      	b.n	80077d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800774e:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <vTaskSwitchContext+0xb0>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007754:	4b25      	ldr	r3, [pc, #148]	; (80077ec <vTaskSwitchContext+0xb4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	fab3 f383 	clz	r3, r3
 8007760:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	f1c3 031f 	rsb	r3, r3, #31
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	4921      	ldr	r1, [pc, #132]	; (80077f0 <vTaskSwitchContext+0xb8>)
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <vTaskSwitchContext+0x5c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <vTaskSwitchContext+0x5a>
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4a14      	ldr	r2, [pc, #80]	; (80077f0 <vTaskSwitchContext+0xb8>)
 80077a0:	4413      	add	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3308      	adds	r3, #8
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d104      	bne.n	80077c4 <vTaskSwitchContext+0x8c>
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <vTaskSwitchContext+0xbc>)
 80077cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077ce:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <vTaskSwitchContext+0xbc>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	334c      	adds	r3, #76	; 0x4c
 80077d4:	4a08      	ldr	r2, [pc, #32]	; (80077f8 <vTaskSwitchContext+0xc0>)
 80077d6:	6013      	str	r3, [r2, #0]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20000770 	.word	0x20000770
 80077e8:	2000075c 	.word	0x2000075c
 80077ec:	20000750 	.word	0x20000750
 80077f0:	2000064c 	.word	0x2000064c
 80077f4:	20000648 	.word	0x20000648
 80077f8:	20000014 	.word	0x20000014

080077fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007804:	f000 f852 	bl	80078ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <prvIdleTask+0x28>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d9f9      	bls.n	8007804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <prvIdleTask+0x2c>)
 8007812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007820:	e7f0      	b.n	8007804 <prvIdleTask+0x8>
 8007822:	bf00      	nop
 8007824:	2000064c 	.word	0x2000064c
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	e00c      	b.n	8007852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4a12      	ldr	r2, [pc, #72]	; (800788c <prvInitialiseTaskLists+0x60>)
 8007844:	4413      	add	r3, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fb20 	bl	8006e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3301      	adds	r3, #1
 8007850:	607b      	str	r3, [r7, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b06      	cmp	r3, #6
 8007856:	d9ef      	bls.n	8007838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007858:	480d      	ldr	r0, [pc, #52]	; (8007890 <prvInitialiseTaskLists+0x64>)
 800785a:	f7ff fb17 	bl	8006e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800785e:	480d      	ldr	r0, [pc, #52]	; (8007894 <prvInitialiseTaskLists+0x68>)
 8007860:	f7ff fb14 	bl	8006e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007864:	480c      	ldr	r0, [pc, #48]	; (8007898 <prvInitialiseTaskLists+0x6c>)
 8007866:	f7ff fb11 	bl	8006e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800786a:	480c      	ldr	r0, [pc, #48]	; (800789c <prvInitialiseTaskLists+0x70>)
 800786c:	f7ff fb0e 	bl	8006e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007870:	480b      	ldr	r0, [pc, #44]	; (80078a0 <prvInitialiseTaskLists+0x74>)
 8007872:	f7ff fb0b 	bl	8006e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <prvInitialiseTaskLists+0x78>)
 8007878:	4a05      	ldr	r2, [pc, #20]	; (8007890 <prvInitialiseTaskLists+0x64>)
 800787a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <prvInitialiseTaskLists+0x7c>)
 800787e:	4a05      	ldr	r2, [pc, #20]	; (8007894 <prvInitialiseTaskLists+0x68>)
 8007880:	601a      	str	r2, [r3, #0]
}
 8007882:	bf00      	nop
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	2000064c 	.word	0x2000064c
 8007890:	200006d8 	.word	0x200006d8
 8007894:	200006ec 	.word	0x200006ec
 8007898:	20000708 	.word	0x20000708
 800789c:	2000071c 	.word	0x2000071c
 80078a0:	20000734 	.word	0x20000734
 80078a4:	20000700 	.word	0x20000700
 80078a8:	20000704 	.word	0x20000704

080078ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b2:	e019      	b.n	80078e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078b4:	f000 f9da 	bl	8007c6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80078b8:	4b10      	ldr	r3, [pc, #64]	; (80078fc <prvCheckTasksWaitingTermination+0x50>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fb67 	bl	8006f98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078ca:	4b0d      	ldr	r3, [pc, #52]	; (8007900 <prvCheckTasksWaitingTermination+0x54>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	4a0b      	ldr	r2, [pc, #44]	; (8007900 <prvCheckTasksWaitingTermination+0x54>)
 80078d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <prvCheckTasksWaitingTermination+0x58>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	4a0a      	ldr	r2, [pc, #40]	; (8007904 <prvCheckTasksWaitingTermination+0x58>)
 80078dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078de:	f000 f9f5 	bl	8007ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f810 	bl	8007908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <prvCheckTasksWaitingTermination+0x58>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e1      	bne.n	80078b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000071c 	.word	0x2000071c
 8007900:	20000748 	.word	0x20000748
 8007904:	20000730 	.word	0x20000730

08007908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	334c      	adds	r3, #76	; 0x4c
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fc8d 	bl	8008234 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d108      	bne.n	8007936 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fb25 	bl	8007f78 <vPortFree>
				vPortFree( pxTCB );
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fb22 	bl	8007f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007934:	e018      	b.n	8007968 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800793c:	2b01      	cmp	r3, #1
 800793e:	d103      	bne.n	8007948 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fb19 	bl	8007f78 <vPortFree>
	}
 8007946:	e00f      	b.n	8007968 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800794e:	2b02      	cmp	r3, #2
 8007950:	d00a      	beq.n	8007968 <prvDeleteTCB+0x60>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60fb      	str	r3, [r7, #12]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <prvDeleteTCB+0x5e>
	}
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <prvResetNextTaskUnblockTime+0x40>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <prvResetNextTaskUnblockTime+0x14>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <prvResetNextTaskUnblockTime+0x16>
 8007984:	2300      	movs	r3, #0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvResetNextTaskUnblockTime+0x44>)
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007992:	e008      	b.n	80079a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <prvResetNextTaskUnblockTime+0x40>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <prvResetNextTaskUnblockTime+0x44>)
 80079a4:	6013      	str	r3, [r2, #0]
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr
 80079b0:	20000700 	.word	0x20000700
 80079b4:	20000768 	.word	0x20000768

080079b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079c2:	4b29      	ldr	r3, [pc, #164]	; (8007a68 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079c8:	4b28      	ldr	r3, [pc, #160]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fae2 	bl	8006f98 <uxListRemove>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	2201      	movs	r2, #1
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43da      	mvns	r2, r3
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4013      	ands	r3, r2
 80079ee:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d10a      	bne.n	8007a10 <prvAddCurrentTaskToDelayedList+0x58>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	481a      	ldr	r0, [pc, #104]	; (8007a74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a0a:	f7ff fa6a 	bl	8006ee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a0e:	e026      	b.n	8007a5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d209      	bcs.n	8007a3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a28:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7ff fa77 	bl	8006f28 <vListInsert>
}
 8007a3a:	e010      	b.n	8007a5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4619      	mov	r1, r3
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f7ff fa6d 	bl	8006f28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d202      	bcs.n	8007a5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6013      	str	r3, [r2, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000074c 	.word	0x2000074c
 8007a6c:	20000648 	.word	0x20000648
 8007a70:	20000750 	.word	0x20000750
 8007a74:	20000734 	.word	0x20000734
 8007a78:	20000704 	.word	0x20000704
 8007a7c:	20000700 	.word	0x20000700
 8007a80:	20000768 	.word	0x20000768

08007a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b04      	subs	r3, #4
 8007a94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3b04      	subs	r3, #4
 8007aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0201 	bic.w	r2, r3, #1
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ab4:	4a08      	ldr	r2, [pc, #32]	; (8007ad8 <pxPortInitialiseStack+0x54>)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3b14      	subs	r3, #20
 8007abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3b20      	subs	r3, #32
 8007aca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007acc:	68fb      	ldr	r3, [r7, #12]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr
 8007ad8:	08007add 	.word	0x08007add

08007adc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <prvTaskExitError+0x54>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d00a      	beq.n	8007b06 <prvTaskExitError+0x2a>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	60fb      	str	r3, [r7, #12]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <prvTaskExitError+0x28>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b1a:	bf00      	nop
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0fc      	beq.n	8007b1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20000010 	.word	0x20000010
	...

08007b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <pxCurrentTCBConst2>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b4a:	f380 8809 	msr	PSP, r0
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8811 	msr	BASEPRI, r0
 8007b5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b5e:	4770      	bx	lr

08007b60 <pxCurrentTCBConst2>:
 8007b60:	20000648 	.word	0x20000648
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop

08007b68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b68:	4806      	ldr	r0, [pc, #24]	; (8007b84 <prvPortStartFirstTask+0x1c>)
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	f380 8808 	msr	MSP, r0
 8007b72:	b662      	cpsie	i
 8007b74:	b661      	cpsie	f
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	df00      	svc	0
 8007b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b82:	bf00      	nop
 8007b84:	e000ed08 	.word	0xe000ed08

08007b88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b8e:	4b32      	ldr	r3, [pc, #200]	; (8007c58 <xPortStartScheduler+0xd0>)
 8007b90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <xPortStartScheduler+0xd4>)
 8007bb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bb6:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007bb8:	2207      	movs	r2, #7
 8007bba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bbc:	e009      	b.n	8007bd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bbe:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	4a26      	ldr	r2, [pc, #152]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007bc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b80      	cmp	r3, #128	; 0x80
 8007bdc:	d0ef      	beq.n	8007bbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1c3 0307 	rsb	r3, r3, #7
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d00a      	beq.n	8007c00 <xPortStartScheduler+0x78>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60bb      	str	r3, [r7, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c00:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	4a16      	ldr	r2, [pc, #88]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c0a:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c12:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c36:	f000 f8b9 	bl	8007dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <xPortStartScheduler+0xe0>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c40:	f7ff ff92 	bl	8007b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c44:	f7ff fd78 	bl	8007738 <vTaskSwitchContext>
	prvTaskExitError();
 8007c48:	f7ff ff48 	bl	8007adc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	e000e400 	.word	0xe000e400
 8007c5c:	20000774 	.word	0x20000774
 8007c60:	20000778 	.word	0x20000778
 8007c64:	e000ed20 	.word	0xe000ed20
 8007c68:	20000010 	.word	0x20000010

08007c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	607b      	str	r3, [r7, #4]
}
 8007c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c86:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <vPortEnterCritical+0x58>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <vPortEnterCritical+0x58>)
 8007c8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <vPortEnterCritical+0x58>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10f      	bne.n	8007cb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <vPortEnterCritical+0x5c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	603b      	str	r3, [r7, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vPortEnterCritical+0x4a>
	}
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000010 	.word	0x20000010
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <vPortExitCritical+0x24>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	607b      	str	r3, [r7, #4]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	4a08      	ldr	r2, [pc, #32]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cfa:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <vPortExitCritical+0x42>
 8007d02:	2300      	movs	r3, #0
 8007d04:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr
 8007d18:	20000010 	.word	0x20000010
 8007d1c:	00000000 	.word	0x00000000

08007d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d30:	6010      	str	r0, [r2, #0]
 8007d32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d3a:	f380 8811 	msr	BASEPRI, r0
 8007d3e:	f7ff fcfb 	bl	8007738 <vTaskSwitchContext>
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	6808      	ldr	r0, [r1, #0]
 8007d52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d56:	f380 8809 	msr	PSP, r0
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	4770      	bx	lr

08007d60 <pxCurrentTCBConst>:
 8007d60:	20000648 	.word	0x20000648
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d82:	f7ff fc1b 	bl	80075bc <xTaskIncrementTick>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <SysTick_Handler+0x40>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <vPortSetupTimerInterrupt+0x30>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db6:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <vPortSetupTimerInterrupt+0x38>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <vPortSetupTimerInterrupt+0x3c>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	4a08      	ldr	r2, [pc, #32]	; (8007dec <vPortSetupTimerInterrupt+0x40>)
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dce:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <vPortSetupTimerInterrupt+0x30>)
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	601a      	str	r2, [r3, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr
 8007ddc:	e000e010 	.word	0xe000e010
 8007de0:	e000e018 	.word	0xe000e018
 8007de4:	20000004 	.word	0x20000004
 8007de8:	10624dd3 	.word	0x10624dd3
 8007dec:	e000e014 	.word	0xe000e014

08007df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dfc:	f7ff fb34 	bl	8007468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e00:	4b58      	ldr	r3, [pc, #352]	; (8007f64 <pvPortMalloc+0x174>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e08:	f000 f910 	bl	800802c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e0c:	4b56      	ldr	r3, [pc, #344]	; (8007f68 <pvPortMalloc+0x178>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f040 808e 	bne.w	8007f36 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01d      	beq.n	8007e5c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e20:	2208      	movs	r2, #8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4413      	add	r3, r2
 8007e26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d014      	beq.n	8007e5c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	3308      	adds	r3, #8
 8007e3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <pvPortMalloc+0x6c>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	617b      	str	r3, [r7, #20]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d069      	beq.n	8007f36 <pvPortMalloc+0x146>
 8007e62:	4b42      	ldr	r3, [pc, #264]	; (8007f6c <pvPortMalloc+0x17c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d864      	bhi.n	8007f36 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e6c:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <pvPortMalloc+0x180>)
 8007e6e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e70:	4b3f      	ldr	r3, [pc, #252]	; (8007f70 <pvPortMalloc+0x180>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e76:	e004      	b.n	8007e82 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d903      	bls.n	8007e94 <pvPortMalloc+0xa4>
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1f1      	bne.n	8007e78 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e94:	4b33      	ldr	r3, [pc, #204]	; (8007f64 <pvPortMalloc+0x174>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d04b      	beq.n	8007f36 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	4413      	add	r3, r2
 8007ea6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	2308      	movs	r3, #8
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d91f      	bls.n	8007f00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <pvPortMalloc+0xf8>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	613b      	str	r3, [r7, #16]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f000 f8f8 	bl	80080f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <pvPortMalloc+0x17c>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	4a18      	ldr	r2, [pc, #96]	; (8007f6c <pvPortMalloc+0x17c>)
 8007f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <pvPortMalloc+0x17c>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <pvPortMalloc+0x184>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d203      	bcs.n	8007f22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <pvPortMalloc+0x17c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <pvPortMalloc+0x184>)
 8007f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <pvPortMalloc+0x178>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f36:	f7ff faa5 	bl	8007484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <pvPortMalloc+0x16a>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <pvPortMalloc+0x168>
	return pvReturn;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3728      	adds	r7, #40	; 0x28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20001384 	.word	0x20001384
 8007f68:	20001390 	.word	0x20001390
 8007f6c:	20001388 	.word	0x20001388
 8007f70:	2000137c 	.word	0x2000137c
 8007f74:	2000138c 	.word	0x2000138c

08007f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d048      	beq.n	800801c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b21      	ldr	r3, [pc, #132]	; (8008024 <vPortFree+0xac>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <vPortFree+0x44>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <vPortFree+0x62>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60bb      	str	r3, [r7, #8]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <vPortFree+0xac>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d019      	beq.n	800801c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d115      	bne.n	800801c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <vPortFree+0xac>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	401a      	ands	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008000:	f7ff fa32 	bl	8007468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	4b07      	ldr	r3, [pc, #28]	; (8008028 <vPortFree+0xb0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4413      	add	r3, r2
 800800e:	4a06      	ldr	r2, [pc, #24]	; (8008028 <vPortFree+0xb0>)
 8008010:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008012:	6938      	ldr	r0, [r7, #16]
 8008014:	f000 f86c 	bl	80080f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008018:	f7ff fa34 	bl	8007484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800801c:	bf00      	nop
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20001390 	.word	0x20001390
 8008028:	20001388 	.word	0x20001388

0800802c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008032:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008038:	4b27      	ldr	r3, [pc, #156]	; (80080d8 <prvHeapInit+0xac>)
 800803a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00c      	beq.n	8008060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3307      	adds	r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0307 	bic.w	r3, r3, #7
 8008052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	4a1f      	ldr	r2, [pc, #124]	; (80080d8 <prvHeapInit+0xac>)
 800805c:	4413      	add	r3, r2
 800805e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008064:	4a1d      	ldr	r2, [pc, #116]	; (80080dc <prvHeapInit+0xb0>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <prvHeapInit+0xb0>)
 800806c:	2200      	movs	r2, #0
 800806e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	4413      	add	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008078:	2208      	movs	r2, #8
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0307 	bic.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <prvHeapInit+0xb4>)
 800808c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800808e:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <prvHeapInit+0xb4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <prvHeapInit+0xb4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	1ad2      	subs	r2, r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080ac:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <prvHeapInit+0xb4>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a0a      	ldr	r2, [pc, #40]	; (80080e4 <prvHeapInit+0xb8>)
 80080ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <prvHeapInit+0xbc>)
 80080c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <prvHeapInit+0xc0>)
 80080c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080ca:	601a      	str	r2, [r3, #0]
}
 80080cc:	bf00      	nop
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	2000077c 	.word	0x2000077c
 80080dc:	2000137c 	.word	0x2000137c
 80080e0:	20001384 	.word	0x20001384
 80080e4:	2000138c 	.word	0x2000138c
 80080e8:	20001388 	.word	0x20001388
 80080ec:	20001390 	.word	0x20001390

080080f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080f8:	4b27      	ldr	r3, [pc, #156]	; (8008198 <prvInsertBlockIntoFreeList+0xa8>)
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e002      	b.n	8008104 <prvInsertBlockIntoFreeList+0x14>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d8f7      	bhi.n	80080fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	4413      	add	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d108      	bne.n	8008132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	441a      	add	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	441a      	add	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d118      	bne.n	8008178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b14      	ldr	r3, [pc, #80]	; (800819c <prvInsertBlockIntoFreeList+0xac>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d00d      	beq.n	800816e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	441a      	add	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e008      	b.n	8008180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800816e:	4b0b      	ldr	r3, [pc, #44]	; (800819c <prvInsertBlockIntoFreeList+0xac>)
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e003      	b.n	8008180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d002      	beq.n	800818e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr
 8008198:	2000137c 	.word	0x2000137c
 800819c:	20001384 	.word	0x20001384

080081a0 <__libc_init_array>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	2600      	movs	r6, #0
 80081a4:	4d0c      	ldr	r5, [pc, #48]	; (80081d8 <__libc_init_array+0x38>)
 80081a6:	4c0d      	ldr	r4, [pc, #52]	; (80081dc <__libc_init_array+0x3c>)
 80081a8:	1b64      	subs	r4, r4, r5
 80081aa:	10a4      	asrs	r4, r4, #2
 80081ac:	42a6      	cmp	r6, r4
 80081ae:	d109      	bne.n	80081c4 <__libc_init_array+0x24>
 80081b0:	f000 f8f0 	bl	8008394 <_init>
 80081b4:	2600      	movs	r6, #0
 80081b6:	4d0a      	ldr	r5, [pc, #40]	; (80081e0 <__libc_init_array+0x40>)
 80081b8:	4c0a      	ldr	r4, [pc, #40]	; (80081e4 <__libc_init_array+0x44>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	42a6      	cmp	r6, r4
 80081c0:	d105      	bne.n	80081ce <__libc_init_array+0x2e>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c8:	4798      	blx	r3
 80081ca:	3601      	adds	r6, #1
 80081cc:	e7ee      	b.n	80081ac <__libc_init_array+0xc>
 80081ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d2:	4798      	blx	r3
 80081d4:	3601      	adds	r6, #1
 80081d6:	e7f2      	b.n	80081be <__libc_init_array+0x1e>
 80081d8:	08008528 	.word	0x08008528
 80081dc:	08008528 	.word	0x08008528
 80081e0:	08008528 	.word	0x08008528
 80081e4:	0800852c 	.word	0x0800852c

080081e8 <__retarget_lock_acquire_recursive>:
 80081e8:	4770      	bx	lr

080081ea <__retarget_lock_release_recursive>:
 80081ea:	4770      	bx	lr

080081ec <memcpy>:
 80081ec:	440a      	add	r2, r1
 80081ee:	4291      	cmp	r1, r2
 80081f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081f4:	d100      	bne.n	80081f8 <memcpy+0xc>
 80081f6:	4770      	bx	lr
 80081f8:	b510      	push	{r4, lr}
 80081fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081fe:	4291      	cmp	r1, r2
 8008200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008204:	d1f9      	bne.n	80081fa <memcpy+0xe>
 8008206:	bd10      	pop	{r4, pc}

08008208 <memset>:
 8008208:	4603      	mov	r3, r0
 800820a:	4402      	add	r2, r0
 800820c:	4293      	cmp	r3, r2
 800820e:	d100      	bne.n	8008212 <memset+0xa>
 8008210:	4770      	bx	lr
 8008212:	f803 1b01 	strb.w	r1, [r3], #1
 8008216:	e7f9      	b.n	800820c <memset+0x4>

08008218 <cleanup_glue>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	460c      	mov	r4, r1
 800821c:	6809      	ldr	r1, [r1, #0]
 800821e:	4605      	mov	r5, r0
 8008220:	b109      	cbz	r1, 8008226 <cleanup_glue+0xe>
 8008222:	f7ff fff9 	bl	8008218 <cleanup_glue>
 8008226:	4621      	mov	r1, r4
 8008228:	4628      	mov	r0, r5
 800822a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800822e:	f000 b869 	b.w	8008304 <_free_r>
	...

08008234 <_reclaim_reent>:
 8008234:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <_reclaim_reent+0xb4>)
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4604      	mov	r4, r0
 800823c:	4283      	cmp	r3, r0
 800823e:	d051      	beq.n	80082e4 <_reclaim_reent+0xb0>
 8008240:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008242:	b143      	cbz	r3, 8008256 <_reclaim_reent+0x22>
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d14a      	bne.n	80082e0 <_reclaim_reent+0xac>
 800824a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	b111      	cbz	r1, 8008256 <_reclaim_reent+0x22>
 8008250:	4620      	mov	r0, r4
 8008252:	f000 f857 	bl	8008304 <_free_r>
 8008256:	6961      	ldr	r1, [r4, #20]
 8008258:	b111      	cbz	r1, 8008260 <_reclaim_reent+0x2c>
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f852 	bl	8008304 <_free_r>
 8008260:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008262:	b111      	cbz	r1, 800826a <_reclaim_reent+0x36>
 8008264:	4620      	mov	r0, r4
 8008266:	f000 f84d 	bl	8008304 <_free_r>
 800826a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800826c:	b111      	cbz	r1, 8008274 <_reclaim_reent+0x40>
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f848 	bl	8008304 <_free_r>
 8008274:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008276:	b111      	cbz	r1, 800827e <_reclaim_reent+0x4a>
 8008278:	4620      	mov	r0, r4
 800827a:	f000 f843 	bl	8008304 <_free_r>
 800827e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008280:	b111      	cbz	r1, 8008288 <_reclaim_reent+0x54>
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f83e 	bl	8008304 <_free_r>
 8008288:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800828a:	b111      	cbz	r1, 8008292 <_reclaim_reent+0x5e>
 800828c:	4620      	mov	r0, r4
 800828e:	f000 f839 	bl	8008304 <_free_r>
 8008292:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008294:	b111      	cbz	r1, 800829c <_reclaim_reent+0x68>
 8008296:	4620      	mov	r0, r4
 8008298:	f000 f834 	bl	8008304 <_free_r>
 800829c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800829e:	b111      	cbz	r1, 80082a6 <_reclaim_reent+0x72>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 f82f 	bl	8008304 <_free_r>
 80082a6:	69a3      	ldr	r3, [r4, #24]
 80082a8:	b1e3      	cbz	r3, 80082e4 <_reclaim_reent+0xb0>
 80082aa:	4620      	mov	r0, r4
 80082ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082ae:	4798      	blx	r3
 80082b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80082b2:	b1b9      	cbz	r1, 80082e4 <_reclaim_reent+0xb0>
 80082b4:	4620      	mov	r0, r4
 80082b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082ba:	f7ff bfad 	b.w	8008218 <cleanup_glue>
 80082be:	5949      	ldr	r1, [r1, r5]
 80082c0:	b941      	cbnz	r1, 80082d4 <_reclaim_reent+0xa0>
 80082c2:	3504      	adds	r5, #4
 80082c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c6:	2d80      	cmp	r5, #128	; 0x80
 80082c8:	68d9      	ldr	r1, [r3, #12]
 80082ca:	d1f8      	bne.n	80082be <_reclaim_reent+0x8a>
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 f819 	bl	8008304 <_free_r>
 80082d2:	e7ba      	b.n	800824a <_reclaim_reent+0x16>
 80082d4:	680e      	ldr	r6, [r1, #0]
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f814 	bl	8008304 <_free_r>
 80082dc:	4631      	mov	r1, r6
 80082de:	e7ef      	b.n	80082c0 <_reclaim_reent+0x8c>
 80082e0:	2500      	movs	r5, #0
 80082e2:	e7ef      	b.n	80082c4 <_reclaim_reent+0x90>
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	bf00      	nop
 80082e8:	20000014 	.word	0x20000014

080082ec <__malloc_lock>:
 80082ec:	4801      	ldr	r0, [pc, #4]	; (80082f4 <__malloc_lock+0x8>)
 80082ee:	f7ff bf7b 	b.w	80081e8 <__retarget_lock_acquire_recursive>
 80082f2:	bf00      	nop
 80082f4:	20001394 	.word	0x20001394

080082f8 <__malloc_unlock>:
 80082f8:	4801      	ldr	r0, [pc, #4]	; (8008300 <__malloc_unlock+0x8>)
 80082fa:	f7ff bf76 	b.w	80081ea <__retarget_lock_release_recursive>
 80082fe:	bf00      	nop
 8008300:	20001394 	.word	0x20001394

08008304 <_free_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4605      	mov	r5, r0
 8008308:	2900      	cmp	r1, #0
 800830a:	d040      	beq.n	800838e <_free_r+0x8a>
 800830c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008310:	1f0c      	subs	r4, r1, #4
 8008312:	2b00      	cmp	r3, #0
 8008314:	bfb8      	it	lt
 8008316:	18e4      	addlt	r4, r4, r3
 8008318:	f7ff ffe8 	bl	80082ec <__malloc_lock>
 800831c:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <_free_r+0x8c>)
 800831e:	6813      	ldr	r3, [r2, #0]
 8008320:	b933      	cbnz	r3, 8008330 <_free_r+0x2c>
 8008322:	6063      	str	r3, [r4, #4]
 8008324:	6014      	str	r4, [r2, #0]
 8008326:	4628      	mov	r0, r5
 8008328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800832c:	f7ff bfe4 	b.w	80082f8 <__malloc_unlock>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d908      	bls.n	8008346 <_free_r+0x42>
 8008334:	6820      	ldr	r0, [r4, #0]
 8008336:	1821      	adds	r1, r4, r0
 8008338:	428b      	cmp	r3, r1
 800833a:	bf01      	itttt	eq
 800833c:	6819      	ldreq	r1, [r3, #0]
 800833e:	685b      	ldreq	r3, [r3, #4]
 8008340:	1809      	addeq	r1, r1, r0
 8008342:	6021      	streq	r1, [r4, #0]
 8008344:	e7ed      	b.n	8008322 <_free_r+0x1e>
 8008346:	461a      	mov	r2, r3
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	b10b      	cbz	r3, 8008350 <_free_r+0x4c>
 800834c:	42a3      	cmp	r3, r4
 800834e:	d9fa      	bls.n	8008346 <_free_r+0x42>
 8008350:	6811      	ldr	r1, [r2, #0]
 8008352:	1850      	adds	r0, r2, r1
 8008354:	42a0      	cmp	r0, r4
 8008356:	d10b      	bne.n	8008370 <_free_r+0x6c>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	4401      	add	r1, r0
 800835c:	1850      	adds	r0, r2, r1
 800835e:	4283      	cmp	r3, r0
 8008360:	6011      	str	r1, [r2, #0]
 8008362:	d1e0      	bne.n	8008326 <_free_r+0x22>
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4401      	add	r1, r0
 800836a:	6011      	str	r1, [r2, #0]
 800836c:	6053      	str	r3, [r2, #4]
 800836e:	e7da      	b.n	8008326 <_free_r+0x22>
 8008370:	d902      	bls.n	8008378 <_free_r+0x74>
 8008372:	230c      	movs	r3, #12
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	e7d6      	b.n	8008326 <_free_r+0x22>
 8008378:	6820      	ldr	r0, [r4, #0]
 800837a:	1821      	adds	r1, r4, r0
 800837c:	428b      	cmp	r3, r1
 800837e:	bf01      	itttt	eq
 8008380:	6819      	ldreq	r1, [r3, #0]
 8008382:	685b      	ldreq	r3, [r3, #4]
 8008384:	1809      	addeq	r1, r1, r0
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6063      	str	r3, [r4, #4]
 800838a:	6054      	str	r4, [r2, #4]
 800838c:	e7cb      	b.n	8008326 <_free_r+0x22>
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	20001398 	.word	0x20001398

08008394 <_init>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	bf00      	nop
 8008398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839a:	bc08      	pop	{r3}
 800839c:	469e      	mov	lr, r3
 800839e:	4770      	bx	lr

080083a0 <_fini>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	bf00      	nop
 80083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a6:	bc08      	pop	{r3}
 80083a8:	469e      	mov	lr, r3
 80083aa:	4770      	bx	lr
