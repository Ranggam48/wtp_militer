
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800890c  0800890c  0001890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008a70  08008a70  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a70  08008a70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a70  08008a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012fc  20000078  08008af0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  08008af0  00021374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab04  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee5  00000000  00000000  0003aba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  0003ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00040248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b550  00000000  00000000  000418f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a74f  00000000  00000000  0005ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c97a  00000000  00000000  0007758f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000693c  00000000  00000000  00113f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080088f4 	.word	0x080088f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080088f4 	.word	0x080088f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__gesf2>:
 8000d08:	f04f 3cff 	mov.w	ip, #4294967295
 8000d0c:	e006      	b.n	8000d1c <__cmpsf2+0x4>
 8000d0e:	bf00      	nop

08000d10 <__lesf2>:
 8000d10:	f04f 0c01 	mov.w	ip, #1
 8000d14:	e002      	b.n	8000d1c <__cmpsf2+0x4>
 8000d16:	bf00      	nop

08000d18 <__cmpsf2>:
 8000d18:	f04f 0c01 	mov.w	ip, #1
 8000d1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	bf18      	it	ne
 8000d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d32:	d011      	beq.n	8000d58 <__cmpsf2+0x40>
 8000d34:	b001      	add	sp, #4
 8000d36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d3a:	bf18      	it	ne
 8000d3c:	ea90 0f01 	teqne	r0, r1
 8000d40:	bf58      	it	pl
 8000d42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d46:	bf88      	it	hi
 8000d48:	17c8      	asrhi	r0, r1, #31
 8000d4a:	bf38      	it	cc
 8000d4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d50:	bf18      	it	ne
 8000d52:	f040 0001 	orrne.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	d102      	bne.n	8000d64 <__cmpsf2+0x4c>
 8000d5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d62:	d105      	bne.n	8000d70 <__cmpsf2+0x58>
 8000d64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d68:	d1e4      	bne.n	8000d34 <__cmpsf2+0x1c>
 8000d6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d6e:	d0e1      	beq.n	8000d34 <__cmpsf2+0x1c>
 8000d70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_cfrcmple>:
 8000d78:	4684      	mov	ip, r0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	4661      	mov	r1, ip
 8000d7e:	e7ff      	b.n	8000d80 <__aeabi_cfcmpeq>

08000d80 <__aeabi_cfcmpeq>:
 8000d80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d82:	f7ff ffc9 	bl	8000d18 <__cmpsf2>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	bf48      	it	mi
 8000d8a:	f110 0f00 	cmnmi.w	r0, #0
 8000d8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d90 <__aeabi_fcmpeq>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff fff4 	bl	8000d80 <__aeabi_cfcmpeq>
 8000d98:	bf0c      	ite	eq
 8000d9a:	2001      	moveq	r0, #1
 8000d9c:	2000      	movne	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_fcmplt>:
 8000da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da8:	f7ff ffea 	bl	8000d80 <__aeabi_cfcmpeq>
 8000dac:	bf34      	ite	cc
 8000dae:	2001      	movcc	r0, #1
 8000db0:	2000      	movcs	r0, #0
 8000db2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db6:	bf00      	nop

08000db8 <__aeabi_fcmple>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff ffe0 	bl	8000d80 <__aeabi_cfcmpeq>
 8000dc0:	bf94      	ite	ls
 8000dc2:	2001      	movls	r0, #1
 8000dc4:	2000      	movhi	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmpge>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffd2 	bl	8000d78 <__aeabi_cfrcmple>
 8000dd4:	bf94      	ite	ls
 8000dd6:	2001      	movls	r0, #1
 8000dd8:	2000      	movhi	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmpgt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffc8 	bl	8000d78 <__aeabi_cfrcmple>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_f2uiz>:
 8000df4:	0042      	lsls	r2, r0, #1
 8000df6:	d20e      	bcs.n	8000e16 <__aeabi_f2uiz+0x22>
 8000df8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dfc:	d30b      	bcc.n	8000e16 <__aeabi_f2uiz+0x22>
 8000dfe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e06:	d409      	bmi.n	8000e1c <__aeabi_f2uiz+0x28>
 8000e08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e10:	fa23 f002 	lsr.w	r0, r3, r2
 8000e14:	4770      	bx	lr
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	4770      	bx	lr
 8000e1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e20:	d101      	bne.n	8000e26 <__aeabi_f2uiz+0x32>
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	d102      	bne.n	8000e2c <__aeabi_f2uiz+0x38>
 8000e26:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2a:	4770      	bx	lr
 8000e2c:	f04f 0000 	mov.w	r0, #0
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <bytestowrite>:

/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite(uint16_t size, uint16_t offset) {
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	80fb      	strh	r3, [r7, #6]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80bb      	strh	r3, [r7, #4]
	if ((size + offset) < PAGE_SIZE)
 8000e44:	88fa      	ldrh	r2, [r7, #6]
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e4c:	dc01      	bgt.n	8000e52 <bytestowrite+0x1e>
		return size;
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	e003      	b.n	8000e5a <bytestowrite+0x26>
	else
		return PAGE_SIZE - offset;
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000e58:	b29b      	uxth	r3, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <EEPROM_Write>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	60ba      	str	r2, [r7, #8]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	81fb      	strh	r3, [r7, #14]
 8000e72:	460b      	mov	r3, r1
 8000e74:	81bb      	strh	r3, [r7, #12]
 8000e76:	4613      	mov	r3, r2
 8000e78:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE) / log(2);
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000e82:	88fa      	ldrh	r2, [r7, #6]
 8000e84:	89bb      	ldrh	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <EEPROM_Write+0x2a>
 8000e8c:	333f      	adds	r3, #63	; 0x3f
 8000e8e:	119b      	asrs	r3, r3, #6
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	4413      	add	r3, r2
 8000e96:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage - startPage) + 1;
 8000e98:	8b7a      	ldrh	r2, [r7, #26]
 8000e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i = 0; i < numofpages; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	e034      	b.n	8000f18 <EEPROM_Write+0xb4>
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage << paddrposition | offset;
 8000eae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset); // calculate the remaining bytes to be written
 8000ec2:	89ba      	ldrh	r2, [r7, #12]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ffb3 	bl	8000e34 <bytestowrite>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 8000ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	8af9      	ldrh	r1, [r7, #22]
 8000eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ede:	9202      	str	r2, [sp, #8]
 8000ee0:	8aba      	ldrh	r2, [r7, #20]
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	460a      	mov	r2, r1
 8000eea:	21a0      	movs	r1, #160	; 0xa0
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <EEPROM_Write+0xc8>)
 8000eee:	f003 fd4f 	bl	8004990 <HAL_I2C_Mem_Write>
				bytesremaining, 1000);  // write the data to the EEPROM

		startPage += 1; // increment the page, so that a new page address can be selected for further write
 8000ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0; // since we will be writing to a new page, so offset will be 0
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;  // reduce the size of the bytes
 8000efc:	88fa      	ldrh	r2, [r7, #6]
 8000efe:	8abb      	ldrh	r3, [r7, #20]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000f04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f06:	8abb      	ldrh	r3, [r7, #20]
 8000f08:	4413      	add	r3, r2
 8000f0a:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);  // Write cycle delay (5ms)
 8000f0c:	2005      	movs	r0, #5
 8000f0e:	f001 feb1 	bl	8002c74 <HAL_Delay>
	for (int i = 0; i < numofpages; i++) {
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	3301      	adds	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	8b3b      	ldrh	r3, [r7, #24]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbc6      	blt.n	8000eae <EEPROM_Write+0x4a>
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200004a4 	.word	0x200004a4

08000f30 <float2Bytes>:

void float2Bytes(uint8_t *ftoa_bytes_temp, float float_variable) {
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	thing.a = float_variable;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < 4; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e00b      	b.n	8000f5c <float2Bytes+0x2c>
		ftoa_bytes_temp[i] = thing.bytes[i];
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	443a      	add	r2, r7
 8000f50:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f54:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d9f0      	bls.n	8000f44 <float2Bytes+0x14>
	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <Bytes2float>:

float Bytes2float(uint8_t *ftoa_bytes_temp) {
 8000f6e:	b480      	push	{r7}
 8000f70:	b087      	sub	sp, #28
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	for (uint8_t i = 0; i < 4; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
 8000f7a:	e00b      	b.n	8000f94 <Bytes2float+0x26>
		thing.bytes[i] = ftoa_bytes_temp[i];
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	441a      	add	r2, r3
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	3318      	adds	r3, #24
 8000f88:	443b      	add	r3, r7
 8000f8a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++) {
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	3301      	adds	r3, #1
 8000f92:	75fb      	strb	r3, [r7, #23]
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d9f0      	bls.n	8000f7c <Bytes2float+0xe>
	}

	float float_variable = thing.a;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	613b      	str	r3, [r7, #16]
	return float_variable;
 8000f9e:	693b      	ldr	r3, [r7, #16]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <EEPROM_Write_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM(uint16_t page, uint16_t offset, float data) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	603a      	str	r2, [r7, #0]
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <EEPROM_Write_NUM+0x2c>)
 8000fc0:	f7ff ffb6 	bl	8000f30 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000fc4:	88b9      	ldrh	r1, [r7, #4]
 8000fc6:	88f8      	ldrh	r0, [r7, #6]
 8000fc8:	2304      	movs	r3, #4
 8000fca:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <EEPROM_Write_NUM+0x2c>)
 8000fcc:	f7ff ff4a 	bl	8000e64 <EEPROM_Write>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000094 	.word	0x20000094

08000fdc <EEPROM_Read_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM(uint16_t page, uint16_t offset) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	80fb      	strh	r3, [r7, #6]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	88b9      	ldrh	r1, [r7, #4]
 8000ff2:	88f8      	ldrh	r0, [r7, #6]
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	f000 f80b 	bl	8001010 <EEPROM_Read>

	return (Bytes2float(buffer));
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffb5 	bl	8000f6e <Bytes2float>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <EEPROM_Read>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af04      	add	r7, sp, #16
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	461a      	mov	r2, r3
 800101a:	4603      	mov	r3, r0
 800101c:	81fb      	strh	r3, [r7, #14]
 800101e:	460b      	mov	r3, r1
 8001020:	81bb      	strh	r3, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE) / log(2);
 8001026:	2306      	movs	r3, #6
 8001028:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	89bb      	ldrh	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	da00      	bge.n	800103a <EEPROM_Read+0x2a>
 8001038:	333f      	adds	r3, #63	; 0x3f
 800103a:	119b      	asrs	r3, r3, #6
 800103c:	b29a      	uxth	r2, r3
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	4413      	add	r3, r2
 8001042:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage - startPage) + 1;
 8001044:	8b7a      	ldrh	r2, [r7, #26]
 8001046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i < numofpages; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	e031      	b.n	80010be <EEPROM_Read+0xae>
		uint16_t MemAddress = startPage << paddrposition | offset;
 800105a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	b21a      	sxth	r2, r3
 8001064:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800106e:	89ba      	ldrh	r2, [r7, #12]
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fedd 	bl	8000e34 <bytestowrite>
 800107a:	4603      	mov	r3, r0
 800107c:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 800107e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	8af9      	ldrh	r1, [r7, #22]
 8001086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	8aba      	ldrh	r2, [r7, #20]
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2302      	movs	r3, #2
 8001094:	460a      	mov	r2, r1
 8001096:	21a0      	movs	r1, #160	; 0xa0
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <EEPROM_Read+0xc0>)
 800109a:	f003 fd73 	bl	8004b84 <HAL_I2C_Mem_Read>
				bytesremaining, 1000);
		startPage += 1;
 800109e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a0:	3301      	adds	r3, #1
 80010a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	8abb      	ldrh	r3, [r7, #20]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80010b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010b2:	8abb      	ldrh	r3, [r7, #20]
 80010b4:	4413      	add	r3, r2
 80010b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i < numofpages; i++) {
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	3301      	adds	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
 80010be:	8b3b      	ldrh	r3, [r7, #24]
 80010c0:	6a3a      	ldr	r2, [r7, #32]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dbc9      	blt.n	800105a <EEPROM_Read+0x4a>
	}
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200004a4 	.word	0x200004a4
 80010d4:	00000000 	.word	0x00000000

080010d8 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7f1b      	ldrb	r3, [r3, #28]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	f040 8082 	bne.w	80011ee <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (ultrasonic1.Is_First_Captured == 0) // if the first value is not captured
 80010ea:	4b45      	ldr	r3, [pc, #276]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010ec:	7b1b      	ldrb	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d11a      	bne.n	8001128 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f005 fd27 	bl	8006b48 <HAL_TIM_ReadCapturedValue>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a40      	ldr	r2, [pc, #256]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010fe:	6013      	str	r3, [r2, #0]
			TIM_CHANNEL_1); // read the first value
			ultrasonic1.Is_First_Captured = 1; // set the first captured as true
 8001100:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001102:	2201      	movs	r2, #1
 8001104:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020a 	bic.w	r2, r2, #10
 8001114:	621a      	str	r2, [r3, #32]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 0202 	orr.w	r2, r2, #2
 8001124:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 8001126:	e062      	b.n	80011ee <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured == 1) // if the first is already captured
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 800112a:	7b1b      	ldrb	r3, [r3, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d15e      	bne.n	80011ee <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f005 fd08 	bl	8006b48 <HAL_TIM_ReadCapturedValue>
 8001138:	4603      	mov	r3, r0
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 800113c:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1) {
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d907      	bls.n	8001162 <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001154:	685a      	ldr	r2, [r3, #4]
						- ultrasonic1.IC_Val1;
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	e00f      	b.n	8001182 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2) {
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	d909      	bls.n	8001182 <HAL_TIM_IC_CaptureCallback+0xaa>
						+ ultrasonic1.IC_Val2;
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001170:	685a      	ldr	r2, [r3, #4]
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001174:	681b      	ldr	r3, [r3, #0]
						+ ultrasonic1.IC_Val2;
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800117c:	33ff      	adds	r3, #255	; 0xff
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001180:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034 / 2;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f924 	bl	80003d4 <__aeabi_ui2d>
 800118c:	a31a      	add	r3, pc, #104	; (adr r3, 80011f8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f999 	bl	80004c8 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a6:	f7ff fab9 	bl	800071c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc4b 	bl	8000a4c <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011ba:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011be:	2200      	movs	r2, #0
 80011c0:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a1a      	ldr	r2, [r3, #32]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 020a 	bic.w	r2, r2, #10
 80011d0:	621a      	str	r2, [r3, #32]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a12      	ldr	r2, [r2, #32]
 80011dc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0202 	bic.w	r2, r2, #2
 80011ec:	60da      	str	r2, [r3, #12]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	b020c49c 	.word	0xb020c49c
 80011fc:	3fa16872 	.word	0x3fa16872
 8001200:	20000098 	.word	0x20000098
 8001204:	200004f8 	.word	0x200004f8

08001208 <calCurr>:
extern ADC_HandleTypeDef hadc1;
extern ADC_ChannelConfTypeDef sConfig;
extern void Error_Handler(void);
uint32_t ADC_VAL[3];

float calCurr(float value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	float curr1;
	if (value > 1.60) {
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff f901 	bl	8000418 <__aeabi_f2d>
 8001216:	a330      	add	r3, pc, #192	; (adr r3, 80012d8 <calCurr+0xd0>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fbe4 	bl	80009e8 <__aeabi_dcmpgt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d022      	beq.n	800126c <calCurr+0x64>
		curr1 = (value - 1.60) * 1000 / 14;
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f8f6 	bl	8000418 <__aeabi_f2d>
 800122c:	a32a      	add	r3, pc, #168	; (adr r3, 80012d8 <calCurr+0xd0>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7fe ff91 	bl	8000158 <__aeabi_dsub>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <calCurr+0xd8>)
 8001244:	f7ff f940 	bl	80004c8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <calCurr+0xdc>)
 8001256:	f7ff fa61 	bl	800071c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fbf3 	bl	8000a4c <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e02e      	b.n	80012ca <calCurr+0xc2>
	} else if (value < 1.60) {
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff f8d3 	bl	8000418 <__aeabi_f2d>
 8001272:	a319      	add	r3, pc, #100	; (adr r3, 80012d8 <calCurr+0xd0>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff fb98 	bl	80009ac <__aeabi_dcmplt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d023      	beq.n	80012ca <calCurr+0xc2>
		curr1 = (1.60 - value) * 1000 / 14;
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff f8c8 	bl	8000418 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	a112      	add	r1, pc, #72	; (adr r1, 80012d8 <calCurr+0xd0>)
 800128e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001292:	f7fe ff61 	bl	8000158 <__aeabi_dsub>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <calCurr+0xd8>)
 80012a4:	f7ff f910 	bl	80004c8 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <calCurr+0xdc>)
 80012b6:	f7ff fa31 	bl	800071c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fbc3 	bl	8000a4c <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	60fb      	str	r3, [r7, #12]
	}
	return curr1;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	9999999a 	.word	0x9999999a
 80012dc:	3ff99999 	.word	0x3ff99999
 80012e0:	408f4000 	.word	0x408f4000
 80012e4:	402c0000 	.word	0x402c0000

080012e8 <ADC_CH6>:
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void ADC_CH6(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]

	/** Configure Regular Channel
	 */

	sConfig.Channel = ADC_CHANNEL_6;
 80012f8:	2306      	movs	r3, #6
 80012fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001300:	2303      	movs	r3, #3
 8001302:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <ADC_CH6+0x38>)
 800130a:	f001 ff9b 	bl	8003244 <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <ADC_CH6+0x30>
		Error_Handler();
 8001314:	f001 f9c4 	bl	80026a0 <Error_Handler>
	}
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000044c 	.word	0x2000044c

08001324 <ADC_CH7>:

void ADC_CH7(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

	/** Configure Regular Channel
	 */

	sConfig.Channel = ADC_CHANNEL_7;
 8001334:	2307      	movs	r3, #7
 8001336:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2301      	movs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800133c:	2303      	movs	r3, #3
 800133e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <ADC_CH7+0x38>)
 8001346:	f001 ff7d 	bl	8003244 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <ADC_CH7+0x30>
		Error_Handler();
 8001350:	f001 f9a6 	bl	80026a0 <Error_Handler>
	}
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000044c 	.word	0x2000044c

08001360 <Get_Current_EAB>:
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return ADC_VAL[0];
}

float Get_Current_EAB(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	ADC_CH6();
 8001364:	f7ff ffc0 	bl	80012e8 <ADC_CH6>
	HAL_ADC_Start(&hadc1);
 8001368:	481b      	ldr	r0, [pc, #108]	; (80013d8 <Get_Current_EAB+0x78>)
 800136a:	f001 fd7f 	bl	8002e6c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800136e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001372:	4819      	ldr	r0, [pc, #100]	; (80013d8 <Get_Current_EAB+0x78>)
 8001374:	f001 fe54 	bl	8003020 <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8001378:	4817      	ldr	r0, [pc, #92]	; (80013d8 <Get_Current_EAB+0x78>)
 800137a:	f001 ff57 	bl	800322c <HAL_ADC_GetValue>
 800137e:	4603      	mov	r3, r0
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <Get_Current_EAB+0x7c>)
 8001382:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc1);
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <Get_Current_EAB+0x78>)
 8001386:	f001 fe1f 	bl	8002fc8 <HAL_ADC_Stop>
	return calCurr((3.3 * ADC_VAL[1] / 4096));
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <Get_Current_EAB+0x7c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f820 	bl	80003d4 <__aeabi_ui2d>
 8001394:	a30e      	add	r3, pc, #56	; (adr r3, 80013d0 <Get_Current_EAB+0x70>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f895 	bl	80004c8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <Get_Current_EAB+0x80>)
 80013ac:	f7ff f9b6 	bl	800071c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb48 	bl	8000a4c <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff22 	bl	8001208 <calCurr>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	66666666 	.word	0x66666666
 80013d4:	400a6666 	.word	0x400a6666
 80013d8:	2000044c 	.word	0x2000044c
 80013dc:	200000ac 	.word	0x200000ac
 80013e0:	40b00000 	.word	0x40b00000
 80013e4:	00000000 	.word	0x00000000

080013e8 <Get_Volt_EAB>:

float Get_Volt_EAB(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	ADC_CH7();
 80013ec:	f7ff ff9a 	bl	8001324 <ADC_CH7>
	HAL_ADC_Start(&hadc1);
 80013f0:	481f      	ldr	r0, [pc, #124]	; (8001470 <Get_Volt_EAB+0x88>)
 80013f2:	f001 fd3b 	bl	8002e6c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013fa:	481d      	ldr	r0, [pc, #116]	; (8001470 <Get_Volt_EAB+0x88>)
 80013fc:	f001 fe10 	bl	8003020 <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8001400:	481b      	ldr	r0, [pc, #108]	; (8001470 <Get_Volt_EAB+0x88>)
 8001402:	f001 ff13 	bl	800322c <HAL_ADC_GetValue>
 8001406:	4603      	mov	r3, r0
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <Get_Volt_EAB+0x8c>)
 800140a:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc1);
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <Get_Volt_EAB+0x88>)
 800140e:	f001 fddb 	bl	8002fc8 <HAL_ADC_Stop>
	return (3.3 * ADC_VAL[2] / 4096 / 0.083);
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <Get_Volt_EAB+0x8c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe ffdc 	bl	80003d4 <__aeabi_ui2d>
 800141c:	a310      	add	r3, pc, #64	; (adr r3, 8001460 <Get_Volt_EAB+0x78>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f851 	bl	80004c8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <Get_Volt_EAB+0x90>)
 8001434:	f7ff f972 	bl	800071c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <Get_Volt_EAB+0x80>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f969 	bl	800071c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fafb 	bl	8000a4c <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	f3af 8000 	nop.w
 8001460:	66666666 	.word	0x66666666
 8001464:	400a6666 	.word	0x400a6666
 8001468:	ed916873 	.word	0xed916873
 800146c:	3fb53f7c 	.word	0x3fb53f7c
 8001470:	2000044c 	.word	0x2000044c
 8001474:	200000ac 	.word	0x200000ac
 8001478:	40b00000 	.word	0x40b00000

0800147c <HAL_CAN_RxFifo1MsgPendingCallback>:
extern uint32_t mode;

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001488:	2101      	movs	r1, #1
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f002 fb4f 	bl	8003b2e <HAL_CAN_GetRxMessage>

	if (RxHeader.IDE == CAN_ID_EXT) {
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d152      	bne.n	800153e <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
		uint8_t id = RxHeader.ExtId & 0xFF;
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	73fb      	strb	r3, [r7, #15]
		uint8_t cmd = RxHeader.ExtId >> 8;
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	73bb      	strb	r3, [r7, #14]

		if (id == 255 || id == selfID) {
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2bff      	cmp	r3, #255	; 0xff
 80014aa:	d004      	beq.n	80014b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d143      	bne.n	800153e <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			switch (cmd) {
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b23      	cmp	r3, #35	; 0x23
 80014ba:	d006      	beq.n	80014ca <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 80014bc:	2b23      	cmp	r3, #35	; 0x23
 80014be:	dc41      	bgt.n	8001544 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d012      	beq.n	80014ea <HAL_CAN_RxFifo1MsgPendingCallback+0x6e>
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d01d      	beq.n	8001504 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>

		}
	}
	//}

}
 80014c8:	e03c      	b.n	8001544 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				canSetMode = -1;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	601a      	str	r2, [r3, #0]
				ind = 0;
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
				mode = buffer_get_int32(RxData, &ind);
 80014d8:	4920      	ldr	r1, [pc, #128]	; (800155c <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80014da:	481c      	ldr	r0, [pc, #112]	; (800154c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80014dc:	f000 f884 	bl	80015e8 <buffer_get_int32>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 80014e6:	601a      	str	r2, [r3, #0]
				break;
 80014e8:	e02c      	b.n	8001544 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 80014f2:	18d0      	adds	r0, r2, r3
 80014f4:	491c      	ldr	r1, [pc, #112]	; (8001568 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	461a      	mov	r2, r3
 80014fe:	f007 f925 	bl	800874c <memcpy>
				break;
 8001502:	e01f      	b.n	8001544 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				rxbuf_ind = (unsigned int) RxData[0] << 8;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 800150c:	6013      	str	r3, [r2, #0]
				rxbuf_ind |= RxData[1];
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	461a      	mov	r2, r3
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4313      	orrs	r3, r2
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 800151c:	6013      	str	r3, [r2, #0]
				if (rxbuf_ind < RX_BUFFER_SIZE) {
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b3f      	cmp	r3, #63	; 0x3f
 8001524:	d80d      	bhi.n	8001542 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
					memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 800152c:	1898      	adds	r0, r3, r2
 800152e:	4910      	ldr	r1, [pc, #64]	; (8001570 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	3b02      	subs	r3, #2
 8001536:	461a      	mov	r2, r3
 8001538:	f007 f908 	bl	800874c <memcpy>
				break;
 800153c:	e001      	b.n	8001542 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
		}
 800153e:	bf00      	nop
 8001540:	e000      	b.n	8001544 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				break;
 8001542:	bf00      	nop
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000f4 	.word	0x200000f4
 8001550:	200000b8 	.word	0x200000b8
 8001554:	20000000 	.word	0x20000000
 8001558:	20000148 	.word	0x20000148
 800155c:	20000100 	.word	0x20000100
 8001560:	20000428 	.word	0x20000428
 8001564:	20000104 	.word	0x20000104
 8001568:	200000f5 	.word	0x200000f5
 800156c:	20000144 	.word	0x20000144
 8001570:	200000f6 	.word	0x200000f6

08001574 <buffer_append_int32>:

void buffer_append_int32(uint8_t *buffer, int32_t number, int32_t *index) {
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1618      	asrs	r0, r3, #24
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1c59      	adds	r1, r3, #1
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6011      	str	r1, [r2, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	b2c2      	uxtb	r2, r0
 8001596:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1418      	asrs	r0, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1c59      	adds	r1, r3, #1
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6011      	str	r1, [r2, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	b2c2      	uxtb	r2, r0
 80015ae:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1218      	asrs	r0, r3, #8
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6011      	str	r1, [r2, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2c2      	uxtb	r2, r0
 80015c6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1c59      	adds	r1, r3, #1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6011      	str	r1, [r2, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	int32_t res = ((uint32_t) buffer[*index]) << 24
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	061a      	lsls	r2, r3, #24
			| ((uint32_t) buffer[*index + 1]) << 16
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	440b      	add	r3, r1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	431a      	orrs	r2, r3
			| ((uint32_t) buffer[*index + 2]) << 8
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3302      	adds	r3, #2
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	440b      	add	r3, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	4313      	orrs	r3, r2
			| ((uint32_t) buffer[*index + 3]);
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	3203      	adds	r2, #3
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	440a      	add	r2, r1
 800162a:	7812      	ldrb	r2, [r2, #0]
 800162c:	4313      	orrs	r3, r2
	int32_t res = ((uint32_t) buffer[*index]) << 24
 800162e:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1d1a      	adds	r2, r3, #4
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	601a      	str	r2, [r3, #0]
	return res;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <comm_can_transmit_eid>:

void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d901      	bls.n	8001660 <comm_can_transmit_eid+0x18>
		len = 8;
 800165c:	2308      	movs	r3, #8
 800165e:	71fb      	strb	r3, [r7, #7]
	}

	TxHeader.IDE = CAN_ID_EXT;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <comm_can_transmit_eid+0x50>)
 8001662:	2204      	movs	r2, #4
 8001664:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = id;
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <comm_can_transmit_eid+0x50>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <comm_can_transmit_eid+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = len;
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <comm_can_transmit_eid+0x50>)
 8001676:	6113      	str	r3, [r2, #16]
	memcpy(TxData, data, len);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	461a      	mov	r2, r3
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <comm_can_transmit_eid+0x54>)
 8001680:	f007 f864 	bl	800874c <memcpy>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <comm_can_transmit_eid+0x58>)
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <comm_can_transmit_eid+0x54>)
 8001688:	4903      	ldr	r1, [pc, #12]	; (8001698 <comm_can_transmit_eid+0x50>)
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <comm_can_transmit_eid+0x5c>)
 800168c:	f002 f975 	bl	800397a <HAL_CAN_AddTxMessage>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200000d4 	.word	0x200000d4
 800169c:	200000ec 	.word	0x200000ec
 80016a0:	200000fc 	.word	0x200000fc
 80016a4:	2000047c 	.word	0x2000047c

080016a8 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) (duty * 100.0), &send_index);
 80016b8:	6838      	ldr	r0, [r7, #0]
 80016ba:	f7fe fead 	bl	8000418 <__aeabi_f2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <comm_can_set_duty+0x58>)
 80016c4:	f7fe ff00 	bl	80004c8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f994 	bl	80009fc <__aeabi_d2iz>
 80016d4:	4601      	mov	r1, r0
 80016d6:	f107 020c 	add.w	r2, r7, #12
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff48 	bl	8001574 <buffer_append_int32>
	comm_can_transmit_eid(
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f107 0108 	add.w	r1, r7, #8
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffa8 	bl	8001648 <comm_can_transmit_eid>
			controller_id | ((uint32_t) CAN_PACKET_SET_DUTY_GEN << 8), buffer,
			send_index);
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40590000 	.word	0x40590000

08001704 <comm_can_db_signal>:

void comm_can_db_signal(uint8_t controller_id, int command) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) command, &send_index);
 8001714:	f107 020c 	add.w	r2, r7, #12
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff28 	bl	8001574 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t) 35 << 8), buffer,
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f107 0108 	add.w	r1, r7, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff88 	bl	8001648 <comm_can_transmit_eid>
			send_index);
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <vApplicationGetIdleTaskMemory+0x28>)
 8001750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4a05      	ldr	r2, [pc, #20]	; (800176c <vApplicationGetIdleTaskMemory+0x2c>)
 8001756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	2000014c 	.word	0x2000014c
 800176c:	20000200 	.word	0x20000200

08001770 <delay_s>:

	return value * 60 * 1000;

}

void delay_s(uint8_t value) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	osDelay(value * 1000);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fe1f 	bl	80073c8 <osDelay>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <backWash>:

void delay_m(uint8_t value) {
	osDelay(value * 1000 * 60);
}

void backWash(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

	Control_Valve_1(OFF);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fc50 	bl	8002040 <Control_Valve_1>
	//osDelay(1000); // delay menghabiskan air pada selang
	Pump_1(OFF);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f000 fc83 	bl	80020ac <Pump_1>
	delay_s(2); // delay menghabiskan air pada selang
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7ff ffe2 	bl	8001770 <delay_s>
	Ozone(OFF);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 fc6b 	bl	8002088 <Ozone>
	Compressor(OFF);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 fc56 	bl	8002064 <Compressor>
	flagBackwash = 0; // memulai rekam waktu filtrasi rdf sampai tersumbat
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <backWash+0x88>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	//Pump_2(OFF);

	delay_s(10);
 80017be:	200a      	movs	r0, #10
 80017c0:	f7ff ffd6 	bl	8001770 <delay_s>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80017c4:	2100      	movs	r1, #0
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff ff9c 	bl	8001704 <comm_can_db_signal>
	delay_s(5);
 80017cc:	2005      	movs	r0, #5
 80017ce:	f7ff ffcf 	bl	8001770 <delay_s>
	comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 80017d2:	2104      	movs	r1, #4
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ff95 	bl	8001704 <comm_can_db_signal>
	delay_s(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff ffc8 	bl	8001770 <delay_s>
	Pump_3(ON); // pompa backwash menyala
 80017e0:	2000      	movs	r0, #0
 80017e2:	f000 fc87 	bl	80020f4 <Pump_3>

	uint8_t i = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]

	while (i <= 20) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80017ea:	e006      	b.n	80017fa <backWash+0x66>
		osDelay(1000);
 80017ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f0:	f005 fdea 	bl	80073c8 <osDelay>
		i++;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	3301      	adds	r3, #1
 80017f8:	71fb      	strb	r3, [r7, #7]
	while (i <= 20) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b14      	cmp	r3, #20
 80017fe:	d9f5      	bls.n	80017ec <backWash+0x58>
	}
	Pump_3(OFF); //pompa backwash mati
 8001800:	2001      	movs	r0, #1
 8001802:	f000 fc77 	bl	80020f4 <Pump_3>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 8001806:	2100      	movs	r1, #0
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff ff7b 	bl	8001704 <comm_can_db_signal>
	delay_s(5);
 800180e:	2005      	movs	r0, #5
 8001810:	f7ff ffae 	bl	8001770 <delay_s>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000411 	.word	0x20000411

08001820 <process>:

void process(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

	delay_s(7);
 8001824:	2007      	movs	r0, #7
 8001826:	f7ff ffa3 	bl	8001770 <delay_s>
//		mode = 0;
//		comm_can_db_signal(0, 0);
//		return;
//	}

	flagTimerEAB = 1; // flag untuk memulai timer EAB
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <process+0x18c>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]

	while (timerEAB < 3600) {
 8001830:	e00a      	b.n	8001848 <process+0x28>
		EAB(ON);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fbea 	bl	800200c <EAB>
		delay_s(1);
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff ff99 	bl	8001770 <delay_s>
		if (mode == 0) {
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <process+0x190>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 808c 	beq.w	8001960 <process+0x140>
	while (timerEAB < 3600) {
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <process+0x194>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001850:	d3ef      	bcc.n	8001832 <process+0x12>
			goto end;
		}
	}
	EAB(OFF);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 fbda 	bl	800200c <EAB>

	flagTimerEAB = 0; // flag untuk menghentikan timer EAB
 8001858:	4b54      	ldr	r3, [pc, #336]	; (80019ac <process+0x18c>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

	flagRecoveryEAB = 1; // flag untuk recover EAB
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <process+0x198>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]

	while (timerRecoveryEAB < 600) {
 8001864:	e006      	b.n	8001874 <process+0x54>
		delay_s(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff ff82 	bl	8001770 <delay_s>
		if (mode == 0) {
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <process+0x190>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d077      	beq.n	8001964 <process+0x144>
	while (timerRecoveryEAB < 600) {
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <process+0x19c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800187c:	d3f3      	bcc.n	8001866 <process+0x46>
			goto end;
		}
	}

	flagRecoveryEAB = 0; // flag untuk recover EAB
 800187e:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <process+0x198>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

	label2: // balik lagi ke sini jika air masih penuh

	comm_can_set_duty(0, 95);
 8001884:	494e      	ldr	r1, [pc, #312]	; (80019c0 <process+0x1a0>)
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ff0e 	bl	80016a8 <comm_can_set_duty>
	comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 800188c:	2102      	movs	r1, #2
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff ff38 	bl	8001704 <comm_can_db_signal>

	delay_s(7); //delay untuk menunggu rdf putaran penuh
 8001894:	2007      	movs	r0, #7
 8001896:	f7ff ff6b 	bl	8001770 <delay_s>

	Control_Valve_1(ON);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 fbd0 	bl	8002040 <Control_Valve_1>
	Pump_1(ON);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 fc03 	bl	80020ac <Pump_1>
	Ozone(ON);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 fbee 	bl	8002088 <Ozone>
	Compressor(ON);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 fbd9 	bl	8002064 <Compressor>
	Pump_2(ON);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 fc0c 	bl	80020d0 <Pump_2>

	flagBackwash = 1; // penanda start backwash untuk perhitungan lamanya filter tersumbat
 80018b8:	4b42      	ldr	r3, [pc, #264]	; (80019c4 <process+0x1a4>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
	lamaMampet = 0; // reset waktu mampet filter
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <process+0x1a8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]

	delay_s(10);
 80018c4:	200a      	movs	r0, #10
 80018c6:	f7ff ff53 	bl	8001770 <delay_s>

	while (1) {

		osDelay(1000);
 80018ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ce:	f005 fd7b 	bl	80073c8 <osDelay>

		if (flow < 4 //|| level == 1
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <process+0x1ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fa62 	bl	8000da4 <__aeabi_fcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <process+0xce>
		|| mode == 0) {
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <process+0x190>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ed      	bne.n	80018ca <process+0xaa>
			countBackwash++;
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <process+0x1b0>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <process+0x1b0>)
 80018f8:	801a      	strh	r2, [r3, #0]
			delay_s(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ff38 	bl	8001770 <delay_s>
			setCountBackwash(countBackwash);
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <process+0x1b0>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f8ad 	bl	8001a64 <setCountBackwash>
			dataCan[0] = countBackwash & 0x0ff;
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <process+0x1b0>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <process+0x1b4>)
 8001912:	701a      	strb	r2, [r3, #0]
			dataCan[1] = (countBackwash & 0xff00) >> 8;
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <process+0x1b0>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <process+0x1b4>)
 8001920:	705a      	strb	r2, [r3, #1]
			dataCan[2] = lamaMampet & 0x00ff;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <process+0x1a8>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <process+0x1b4>)
 800192a:	709a      	strb	r2, [r3, #2]
			dataCan[3] = (lamaMampet & 0xff00) >> 8;
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <process+0x1a8>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <process+0x1b4>)
 8001938:	70da      	strb	r2, [r3, #3]
			comm_can_transmit_eid(4, dataCan, 8);
 800193a:	2208      	movs	r2, #8
 800193c:	4925      	ldr	r1, [pc, #148]	; (80019d4 <process+0x1b4>)
 800193e:	2004      	movs	r0, #4
 8001940:	f7ff fe82 	bl	8001648 <comm_can_transmit_eid>
			Ozone(OFF);
 8001944:	2001      	movs	r0, #1
 8001946:	f000 fb9f 	bl	8002088 <Ozone>
			Compressor(OFF);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 fb8a 	bl	8002064 <Compressor>
			backWash();
 8001950:	f7ff ff20 	bl	8001794 <backWash>
			break;
 8001954:	bf00      	nop
		}
	}

	if (mode == 0) {
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <process+0x190>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d192      	bne.n	8001884 <process+0x64>
		goto end;
 800195e:	e002      	b.n	8001966 <process+0x146>
			goto end;
 8001960:	bf00      	nop
 8001962:	e000      	b.n	8001966 <process+0x146>
			goto end;
 8001964:	bf00      	nop
//	}
	goto label2;

	end:

	EAB(OFF);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 fb50 	bl	800200c <EAB>
	delay_s(3);
 800196c:	2003      	movs	r0, #3
 800196e:	f7ff feff 	bl	8001770 <delay_s>
	Pump_2(OFF);
 8001972:	2001      	movs	r0, #1
 8001974:	f000 fbac 	bl	80020d0 <Pump_2>
	mode = 0;
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <process+0x190>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
	countProcess++;
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <process+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <process+0x1b8>)
 8001986:	6013      	str	r3, [r2, #0]
	setCountProcess(countProcess);
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <process+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f87a 	bl	8001a86 <setCountProcess>
	comm_can_db_signal(0, 0);
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff feb5 	bl	8001704 <comm_can_db_signal>

	flagTimerEAB = 0;
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <process+0x18c>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
	flagRecoveryEAB = 0;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <process+0x198>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000412 	.word	0x20000412
 80019b0:	20000428 	.word	0x20000428
 80019b4:	20000420 	.word	0x20000420
 80019b8:	20000413 	.word	0x20000413
 80019bc:	20000424 	.word	0x20000424
 80019c0:	42be0000 	.word	0x42be0000
 80019c4:	20000411 	.word	0x20000411
 80019c8:	2000042c 	.word	0x2000042c
 80019cc:	2000043c 	.word	0x2000043c
 80019d0:	2000042e 	.word	0x2000042e
 80019d4:	20000418 	.word	0x20000418
 80019d8:	20000430 	.word	0x20000430

080019dc <setMode>:

void setMode(uint32_t value) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, MODE, value);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff f937 	bl	8000c58 <__aeabi_ui2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fadb 	bl	8000fac <EEPROM_Write_NUM>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <setTimerEAB>:

void setTimerEAB(uint32_t value) {
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMEREAB, value);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff f926 	bl	8000c58 <__aeabi_ui2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2104      	movs	r1, #4
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff faca 	bl	8000fac <EEPROM_Write_NUM>

}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <setLamaPakaiEAB>:

void setLamaPakaiEAB(uint32_t value) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPAKAIEAB, value);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff f915 	bl	8000c58 <__aeabi_ui2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	2118      	movs	r1, #24
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fab9 	bl	8000fac <EEPROM_Write_NUM>

}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <setTimerRcoveryEAB>:

void setTimerRcoveryEAB(uint32_t value) {
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMERRECOVERYEAB, value);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff f904 	bl	8000c58 <__aeabi_ui2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	211c      	movs	r1, #28
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff faa8 	bl	8000fac <EEPROM_Write_NUM>

}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <setCountBackwash>:
//	dataWrite[2] = value;
//	Flash_Write_Data(ADDRESS, (uint32_t*) value, 10);

}

void setCountBackwash(uint32_t value) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTBACKWASH, value);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff f8f3 	bl	8000c58 <__aeabi_ui2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	210c      	movs	r1, #12
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fa97 	bl	8000fac <EEPROM_Write_NUM>

}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <setCountProcess>:

void setCountProcess(uint32_t value) {
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTPROCESS, value);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff f8e2 	bl	8000c58 <__aeabi_ui2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	2110      	movs	r1, #16
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff fa86 	bl	8000fac <EEPROM_Write_NUM>

}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <setLamaProcess>:

void setLamaProcess(uint32_t value) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPROCESS, value);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff f8d1 	bl	8000c58 <__aeabi_ui2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2114      	movs	r1, #20
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff fa75 	bl	8000fac <EEPROM_Write_NUM>

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <Task2>:

// kumpulan task freeRTOS

void Task2(void const *argument) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <Task2+0x68>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d102      	bne.n	8001ae2 <Task2+0x16>
				{
			process();
 8001adc:	f7ff fea0 	bl	8001820 <process>
 8001ae0:	e023      	b.n	8001b2a <Task2+0x5e>
		}

		else if (mode == 2) // mode 2 untuk opsi menggunakan sensor water level
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <Task2+0x68>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d01f      	beq.n	8001b2a <Task2+0x5e>
				{

		}

		else if (mode == 3) // mode 2 untuk opsi menggunakan sensor water level
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <Task2+0x68>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d01b      	beq.n	8001b2a <Task2+0x5e>
				{
		}

		else if (mode == 0) {
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <Task2+0x68>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d117      	bne.n	8001b2a <Task2+0x5e>
			lamaProcess = 0;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <Task2+0x6c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
			setLamaProcess(lamaProcess);
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <Task2+0x6c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ffcf 	bl	8001aa8 <setLamaProcess>
			timerEAB = 0;
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <Task2+0x70>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
			setTimerEAB(timerEAB);
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <Task2+0x70>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff72 	bl	80019fe <setTimerEAB>
			timerRecoveryEAB = 0;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <Task2+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <Task2+0x74>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff8c 	bl	8001a42 <setTimerRcoveryEAB>
		}

		osDelay(1000);
 8001b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2e:	f005 fc4b 	bl	80073c8 <osDelay>
		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001b32:	e7cf      	b.n	8001ad4 <Task2+0x8>
 8001b34:	20000428 	.word	0x20000428
 8001b38:	20000434 	.word	0x20000434
 8001b3c:	20000420 	.word	0x20000420
 8001b40:	20000424 	.word	0x20000424

08001b44 <TaskTimer>:

	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <TaskTimer+0xf4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d120      	bne.n	8001b96 <TaskTimer+0x52>

			timerEAB++;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <TaskTimer+0xf8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <TaskTimer+0xf8>)
 8001b5c:	6013      	str	r3, [r2, #0]
			setTimerEAB(timerEAB);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <TaskTimer+0xf8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff4b 	bl	80019fe <setTimerEAB>
			if (timerEAB % 60 == 0) {
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <TaskTimer+0xf8>)
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <TaskTimer+0xfc>)
 8001b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b72:	095a      	lsrs	r2, r3, #5
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	1aca      	subs	r2, r1, r3
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d109      	bne.n	8001b96 <TaskTimer+0x52>
				lamaPakaiEAB++;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <TaskTimer+0x100>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <TaskTimer+0x100>)
 8001b8a:	6013      	str	r3, [r2, #0]
				setLamaPakaiEAB(lamaPakaiEAB);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <TaskTimer+0x100>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff45 	bl	8001a20 <setLamaPakaiEAB>
			}

		}

		if (flagRecoveryEAB == 1) {
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <TaskTimer+0x104>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d109      	bne.n	8001bb2 <TaskTimer+0x6e>
			timerRecoveryEAB++;
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <TaskTimer+0x108>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <TaskTimer+0x108>)
 8001ba6:	6013      	str	r3, [r2, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <TaskTimer+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff48 	bl	8001a42 <setTimerRcoveryEAB>
		}

		if (flagBackwash == 1) {
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <TaskTimer+0x10c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d105      	bne.n	8001bc6 <TaskTimer+0x82>
			lamaMampet++;
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <TaskTimer+0x110>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <TaskTimer+0x110>)
 8001bc4:	801a      	strh	r2, [r3, #0]
		}

		if (mode == 2) {
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <TaskTimer+0x114>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d109      	bne.n	8001be2 <TaskTimer+0x9e>
			lamaProcess++;
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <TaskTimer+0x118>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <TaskTimer+0x118>)
 8001bd6:	6013      	str	r3, [r2, #0]
			setLamaProcess(lamaProcess);
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <TaskTimer+0x118>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff63 	bl	8001aa8 <setLamaProcess>
		}

		flow = signalCounter / 7.5;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <TaskTimer+0x11c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc04 	bl	80003f4 <__aeabi_i2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <TaskTimer+0x120>)
 8001bf2:	f7fe fd93 	bl	800071c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe ff25 	bl	8000a4c <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <TaskTimer+0x124>)
 8001c06:	6013      	str	r3, [r2, #0]
		signalCounter = 0;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <TaskTimer+0x11c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
		cobaTaskTimer++;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <TaskTimer+0x128>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <TaskTimer+0x128>)
 8001c18:	701a      	strb	r2, [r3, #0]
		currentEAB = Get_Current_EAB();
 8001c1a:	f7ff fba1 	bl	8001360 <Get_Current_EAB>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <TaskTimer+0x12c>)
 8001c22:	6013      	str	r3, [r2, #0]
		voltEAB = Get_Volt_EAB();
 8001c24:	f7ff fbe0 	bl	80013e8 <Get_Volt_EAB>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <TaskTimer+0x130>)
 8001c2c:	6013      	str	r3, [r2, #0]
		osDelay(1000);
 8001c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c32:	f005 fbc9 	bl	80073c8 <osDelay>
		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001c36:	e789      	b.n	8001b4c <TaskTimer+0x8>
 8001c38:	20000412 	.word	0x20000412
 8001c3c:	20000420 	.word	0x20000420
 8001c40:	88888889 	.word	0x88888889
 8001c44:	20000438 	.word	0x20000438
 8001c48:	20000413 	.word	0x20000413
 8001c4c:	20000424 	.word	0x20000424
 8001c50:	20000411 	.word	0x20000411
 8001c54:	2000042c 	.word	0x2000042c
 8001c58:	20000428 	.word	0x20000428
 8001c5c:	20000434 	.word	0x20000434
 8001c60:	20000448 	.word	0x20000448
 8001c64:	401e0000 	.word	0x401e0000
 8001c68:	2000043c 	.word	0x2000043c
 8001c6c:	20000414 	.word	0x20000414
 8001c70:	20000440 	.word	0x20000440
 8001c74:	20000444 	.word	0x20000444

08001c78 <TaskFlow>:

	}
	/* USER CODE END 5 */
}

void TaskFlow(void const *argument) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001c80:	2120      	movs	r1, #32
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <TaskFlow+0x54>)
 8001c84:	f002 fd10 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73bb      	strb	r3, [r7, #14]
	uint8_t stateSensorPrv = -1;
 8001c8c:	23ff      	movs	r3, #255	; 0xff
 8001c8e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001c90:	2120      	movs	r1, #32
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <TaskFlow+0x54>)
 8001c94:	f002 fd08 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73bb      	strb	r3, [r7, #14]
		level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <TaskFlow+0x54>)
 8001ca0:	f002 fd02 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <TaskFlow+0x58>)
 8001caa:	701a      	strb	r2, [r3, #0]
		if (stateSensorNow != stateSensorPrv) {
 8001cac:	7bba      	ldrb	r2, [r7, #14]
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d006      	beq.n	8001cc2 <TaskFlow+0x4a>
			signalCounter++;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <TaskFlow+0x5c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <TaskFlow+0x5c>)
 8001cbc:	6013      	str	r3, [r2, #0]
			stateSensorPrv = stateSensorNow;
 8001cbe:	7bbb      	ldrb	r3, [r7, #14]
 8001cc0:	73fb      	strb	r3, [r7, #15]
		}
		//cobaTaskFlow++;
		osDelay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f005 fb80 	bl	80073c8 <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001cc8:	e7e2      	b.n	8001c90 <TaskFlow+0x18>
 8001cca:	bf00      	nop
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	20000410 	.word	0x20000410
 8001cd4:	20000448 	.word	0x20000448

08001cd8 <TaskButton>:
	}
	/* USER CODE END 5 */
}

void TaskButton(void const *argument) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce4:	4818      	ldr	r0, [pc, #96]	; (8001d48 <TaskButton+0x70>)
 8001ce6:	f002 fcdf 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73bb      	strb	r3, [r7, #14]
	uint8_t stateButtonPrv = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]

	/* Infinite loop */
	for (;;) {
		stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <TaskButton+0x70>)
 8001cf8:	f002 fcd6 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	73bb      	strb	r3, [r7, #14]
		if (stateButtonNow == 1 && stateButtonPrv == 0) {
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d111      	bne.n	8001d2a <TaskButton+0x52>
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10e      	bne.n	8001d2a <TaskButton+0x52>
			mode++;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <TaskButton+0x74>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <TaskButton+0x74>)
 8001d14:	6013      	str	r3, [r2, #0]
			if (mode > 1) {
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <TaskButton+0x74>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d902      	bls.n	8001d24 <TaskButton+0x4c>
				mode = 0;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <TaskButton+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
			}
			stateButtonPrv = 1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e004      	b.n	8001d34 <TaskButton+0x5c>
		} else if (stateButtonNow == 0) {
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <TaskButton+0x5c>
			stateButtonPrv = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f005 fb47 	bl	80073c8 <osDelay>
		//cobaTaskButton++;
		setMode(mode);
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <TaskButton+0x74>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe4c 	bl	80019dc <setMode>
		stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001d44:	e7d5      	b.n	8001cf2 <TaskButton+0x1a>
 8001d46:	bf00      	nop
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	20000428 	.word	0x20000428

08001d50 <fungsiInit>:
	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b09c      	sub	sp, #112	; 0x70
 8001d54:	af00      	add	r7, sp, #0

	gpio_init();
 8001d56:	f000 f8cf 	bl	8001ef8 <gpio_init>

	// pembacaan eeprom
	mode = EEPROM_Read_NUM(1, MODE);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff f93d 	bl	8000fdc <EEPROM_Read_NUM>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f845 	bl	8000df4 <__aeabi_f2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a53      	ldr	r2, [pc, #332]	; (8001ebc <fungsiInit+0x16c>)
 8001d6e:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f000 ff7f 	bl	8002c74 <HAL_Delay>
	timerEAB = EEPROM_Read_NUM(1, TIMEREAB);
 8001d76:	2104      	movs	r1, #4
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff f92f 	bl	8000fdc <EEPROM_Read_NUM>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f837 	bl	8000df4 <__aeabi_f2uiz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <fungsiInit+0x170>)
 8001d8a:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f000 ff71 	bl	8002c74 <HAL_Delay>
	countBackwash = EEPROM_Read_NUM(1, COUNTBACKWASH);
 8001d92:	210c      	movs	r1, #12
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff f921 	bl	8000fdc <EEPROM_Read_NUM>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f829 	bl	8000df4 <__aeabi_f2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <fungsiInit+0x174>)
 8001da8:	801a      	strh	r2, [r3, #0]
	HAL_Delay(10);
 8001daa:	200a      	movs	r0, #10
 8001dac:	f000 ff62 	bl	8002c74 <HAL_Delay>
	countProcess = EEPROM_Read_NUM(1, COUNTPROCESS);
 8001db0:	2110      	movs	r1, #16
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff f912 	bl	8000fdc <EEPROM_Read_NUM>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f81a 	bl	8000df4 <__aeabi_f2uiz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a41      	ldr	r2, [pc, #260]	; (8001ec8 <fungsiInit+0x178>)
 8001dc4:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f000 ff54 	bl	8002c74 <HAL_Delay>
	lamaProcess = EEPROM_Read_NUM(1, LAMAPROCESS);
 8001dcc:	2114      	movs	r1, #20
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff f904 	bl	8000fdc <EEPROM_Read_NUM>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f80c 	bl	8000df4 <__aeabi_f2uiz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <fungsiInit+0x17c>)
 8001de0:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001de2:	200a      	movs	r0, #10
 8001de4:	f000 ff46 	bl	8002c74 <HAL_Delay>
	lamaPakaiEAB = EEPROM_Read_NUM(1, LAMAPAKAIEAB);
 8001de8:	2118      	movs	r1, #24
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff f8f6 	bl	8000fdc <EEPROM_Read_NUM>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fffe 	bl	8000df4 <__aeabi_f2uiz>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <fungsiInit+0x180>)
 8001dfc:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f000 ff38 	bl	8002c74 <HAL_Delay>
	timerRecoveryEAB = EEPROM_Read_NUM(1, TIMERRECOVERYEAB);
 8001e04:	211c      	movs	r1, #28
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff f8e8 	bl	8000fdc <EEPROM_Read_NUM>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fff0 	bl	8000df4 <__aeabi_f2uiz>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <fungsiInit+0x184>)
 8001e18:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f000 ff2a 	bl	8002c74 <HAL_Delay>
	//mode = 2;
//	setMode(mode);
//	setLamaPakaiEAB(660);
//	setCountBackwash(173);

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 64);
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <fungsiInit+0x188>)
 8001e22:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001e26:	461d      	mov	r5, r3
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8001e34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 fa78 	bl	8007330 <osThreadCreate>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <fungsiInit+0x18c>)
 8001e44:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 64);
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <fungsiInit+0x190>)
 8001e48:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8001e5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 fa65 	bl	8007330 <osThreadCreate>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <fungsiInit+0x194>)
 8001e6a:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskFlow, TaskFlow, osPriorityBelowNormal, 0, 64);
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <fungsiInit+0x198>)
 8001e6e:	f107 041c 	add.w	r4, r7, #28
 8001e72:	461d      	mov	r5, r3
 8001e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFlowHandle = osThreadCreate(osThread(TaskFlow), NULL);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f005 fa52 	bl	8007330 <osThreadCreate>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <fungsiInit+0x19c>)
 8001e90:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskButton, TaskButton, osPriorityBelowNormal, 0, 64);
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <fungsiInit+0x1a0>)
 8001e94:	463c      	mov	r4, r7
 8001e96:	461d      	mov	r5, r3
 8001e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskButtonHandle = osThreadCreate(osThread(TaskButton), NULL);
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f005 fa41 	bl	8007330 <osThreadCreate>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <fungsiInit+0x1a4>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3770      	adds	r7, #112	; 0x70
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebc:	20000428 	.word	0x20000428
 8001ec0:	20000420 	.word	0x20000420
 8001ec4:	2000042e 	.word	0x2000042e
 8001ec8:	20000430 	.word	0x20000430
 8001ecc:	20000434 	.word	0x20000434
 8001ed0:	20000438 	.word	0x20000438
 8001ed4:	20000424 	.word	0x20000424
 8001ed8:	08008938 	.word	0x08008938
 8001edc:	20000404 	.word	0x20000404
 8001ee0:	08008954 	.word	0x08008954
 8001ee4:	20000400 	.word	0x20000400
 8001ee8:	08008970 	.word	0x08008970
 8001eec:	20000408 	.word	0x20000408
 8001ef0:	0800898c 	.word	0x0800898c
 8001ef4:	2000040c 	.word	0x2000040c

08001ef8 <gpio_init>:
 *      Author: rangga
 */
#include <gpio.h>
#include "stm32f1xx.h"

void gpio_init(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <gpio_init+0x104>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <gpio_init+0x104>)
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <gpio_init+0x104>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <gpio_init+0x104>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <gpio_init+0x104>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <gpio_init+0x104>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <gpio_init+0x104>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <gpio_init+0x104>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <gpio_init+0x104>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <gpio_init+0x104>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <gpio_init+0x104>)
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <gpio_init+0x104>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f64f 4103 	movw	r1, #64515	; 0xfc03
 8001f72:	4823      	ldr	r0, [pc, #140]	; (8002000 <gpio_init+0x108>)
 8001f74:	f002 fbaf 	bl	80046d6 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001f7e:	4821      	ldr	r0, [pc, #132]	; (8002004 <gpio_init+0x10c>)
 8001f80:	f002 fba9 	bl	80046d6 <HAL_GPIO_WritePin>
	GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 8001f84:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8001f88:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4818      	ldr	r0, [pc, #96]	; (8002000 <gpio_init+0x108>)
 8001f9e:	f002 f9ff 	bl	80043a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001fa2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001fa6:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4812      	ldr	r0, [pc, #72]	; (8002004 <gpio_init+0x10c>)
 8001fbc:	f002 f9f0 	bl	80043a0 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_4;
 8001fc0:	2330      	movs	r3, #48	; 0x30
 8001fc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <gpio_init+0x108>)
 8001fd4:	f002 f9e4 	bl	80043a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	4806      	ldr	r0, [pc, #24]	; (8002008 <gpio_init+0x110>)
 8001fee:	f002 f9d7 	bl	80043a0 <HAL_GPIO_Init>
//
//	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001ff2:	bf00      	nop
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010c00 	.word	0x40010c00
 8002004:	40010800 	.word	0x40010800
 8002008:	40011000 	.word	0x40011000

0800200c <EAB>:
//
//void Pump_3(uint8_t value) {
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
//}

void EAB(uint8_t value) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, value);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	461a      	mov	r2, r3
 800201a:	2101      	movs	r1, #1
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <EAB+0x2c>)
 800201e:	f002 fb5a 	bl	80046d6 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, value);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, value);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, value);
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	461a      	mov	r2, r3
 8002026:	2120      	movs	r1, #32
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <EAB+0x30>)
 800202a:	f002 fb54 	bl	80046d6 <HAL_GPIO_WritePin>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40010c00 	.word	0x40010c00
 800203c:	40010800 	.word	0x40010800

08002040 <Control_Valve_1>:

void Control_Valve_1(uint8_t value) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, value);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <Control_Valve_1+0x20>)
 8002054:	f002 fb3f 	bl	80046d6 <HAL_GPIO_WritePin>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010800 	.word	0x40010800

08002064 <Compressor>:

void Control_Valve_5(uint8_t value) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value);
}

void Compressor(uint8_t value) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, value);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	461a      	mov	r2, r3
 8002072:	2110      	movs	r1, #16
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <Compressor+0x20>)
 8002076:	f002 fb2e 	bl	80046d6 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40010800 	.word	0x40010800

08002088 <Ozone>:

void Ozone(uint8_t value) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, value);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	461a      	mov	r2, r3
 8002096:	2104      	movs	r1, #4
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <Ozone+0x20>)
 800209a:	f002 fb1c 	bl	80046d6 <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010800 	.word	0x40010800

080020ac <Pump_1>:

void Pump_1(uint8_t value) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <Pump_1+0x20>)
 80020c0:	f002 fb09 	bl	80046d6 <HAL_GPIO_WritePin>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40010c00 	.word	0x40010c00

080020d0 <Pump_2>:

void Pump_2(uint8_t value) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	461a      	mov	r2, r3
 80020de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <Pump_2+0x20>)
 80020e4:	f002 faf7 	bl	80046d6 <HAL_GPIO_WritePin>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40010c00 	.word	0x40010c00

080020f4 <Pump_3>:

void Pump_3(uint8_t value) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	461a      	mov	r2, r3
 8002102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002106:	4803      	ldr	r0, [pc, #12]	; (8002114 <Pump_3+0x20>)
 8002108:	f002 fae5 	bl	80046d6 <HAL_GPIO_WritePin>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010c00 	.word	0x40010c00

08002118 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800211e:	f000 fd77 	bl	8002c10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002122:	f000 f829 	bl	8002178 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002126:	f000 fa25 	bl	8002574 <MX_GPIO_Init>
	MX_CAN_Init();
 800212a:	f000 f8b1 	bl	8002290 <MX_CAN_Init>
	MX_TIM2_Init();
 800212e:	f000 f935 	bl	800239c <MX_TIM2_Init>
	MX_TIM3_Init();
 8002132:	f000 f9a7 	bl	8002484 <MX_TIM3_Init>
	MX_I2C1_Init();
 8002136:	f000 f903 	bl	8002340 <MX_I2C1_Init>
	MX_ADC1_Init();
 800213a:	f000 f879 	bl	8002230 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800213e:	f000 f9ef 	bl	8002520 <MX_USART1_UART_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	fungsiInit();
 8002142:	f7ff fe05 	bl	8001d50 <fungsiInit>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <main+0x58>)
 8002148:	1d3c      	adds	r4, r7, #4
 800214a:	461d      	mov	r5, r3
 800214c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f005 f8e7 	bl	8007330 <osThreadCreate>
 8002162:	4603      	mov	r3, r0
 8002164:	4a03      	ldr	r2, [pc, #12]	; (8002174 <main+0x5c>)
 8002166:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8002168:	f005 f8db 	bl	8007322 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800216c:	e7fe      	b.n	800216c <main+0x54>
 800216e:	bf00      	nop
 8002170:	080089b4 	.word	0x080089b4
 8002174:	200005cc 	.word	0x200005cc

08002178 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	2228      	movs	r2, #40	; 0x28
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f006 faee 	bl	8008768 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b6:	2301      	movs	r3, #1
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ba:	2302      	movs	r3, #2
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fa9a 	bl	8005708 <HAL_RCC_OscConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0x66>
		Error_Handler();
 80021da:	f000 fa61 	bl	80026a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021de:	230f      	movs	r3, #15
 80021e0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ee:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2102      	movs	r1, #2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fd06 	bl	8005c0c <HAL_RCC_ClockConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SystemClock_Config+0x92>
		Error_Handler();
 8002206:	f000 fa4b 	bl	80026a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800220a:	2302      	movs	r3, #2
 800220c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800220e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002212:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fec0 	bl	8005f9c <HAL_RCCEx_PeriphCLKConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <SystemClock_Config+0xae>
		Error_Handler();
 8002222:	f000 fa3d 	bl	80026a0 <Error_Handler>
	}
}
 8002226:	bf00      	nop
 8002228:	3750      	adds	r7, #80	; 0x50
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_ADC1_Init+0x58>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <MX_ADC1_Init+0x5c>)
 8002244:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_ADC1_Init+0x58>)
 8002248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_ADC1_Init+0x58>)
 8002250:	2201      	movs	r2, #1
 8002252:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_ADC1_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_ADC1_Init+0x58>)
 800225c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002260:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_ADC1_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_ADC1_Init+0x58>)
 800226a:	2201      	movs	r2, #1
 800226c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <MX_ADC1_Init+0x58>)
 8002270:	f000 fd24 	bl	8002cbc <HAL_ADC_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_ADC1_Init+0x4e>
		Error_Handler();
 800227a:	f000 fa11 	bl	80026a0 <Error_Handler>
//  }
//  /* USER CODE BEGIN ADC1_Init 2 */
//
//  /* USER CODE END ADC1_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000044c 	.word	0x2000044c
 800228c:	40012400 	.word	0x40012400

08002290 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <MX_CAN_Init+0xa8>)
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <MX_CAN_Init+0xac>)
 800229a:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 18;
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <MX_CAN_Init+0xa8>)
 800229e:	2212      	movs	r2, #18
 80022a0:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <MX_CAN_Init+0xa8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <MX_CAN_Init+0xa8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <MX_CAN_Init+0xa8>)
 80022b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b4:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <MX_CAN_Init+0xa8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <MX_CAN_Init+0xa8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MX_CAN_Init+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_CAN_Init+0xa8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_CAN_Init+0xa8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_CAN_Init+0xa8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_CAN_Init+0xa8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80022e0:	4815      	ldr	r0, [pc, #84]	; (8002338 <MX_CAN_Init+0xa8>)
 80022e2:	f001 f942 	bl	800356a <HAL_CAN_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_CAN_Init+0x60>
		Error_Handler();
 80022ec:	f000 f9d8 	bl	80026a0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 80022f4:	230a      	movs	r3, #10
 80022f6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 80022fc:	2300      	movs	r3, #0
 80022fe:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002310:	2301      	movs	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8002318:	463b      	mov	r3, r7
 800231a:	4619      	mov	r1, r3
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <MX_CAN_Init+0xa8>)
 800231e:	f001 fa1f 	bl	8003760 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_CAN_Init+0xa8>)
 8002324:	f001 fae5 	bl	80038f2 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002328:	2110      	movs	r1, #16
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <MX_CAN_Init+0xa8>)
 800232c:	f001 fd10 	bl	8003d50 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000047c 	.word	0x2000047c
 800233c:	40006400 	.word	0x40006400

08002340 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_I2C1_Init+0x50>)
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <MX_I2C1_Init+0x54>)
 8002348:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_I2C1_Init+0x50>)
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_I2C1_Init+0x58>)
 800234e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_I2C1_Init+0x50>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_I2C1_Init+0x50>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_I2C1_Init+0x50>)
 800235e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002362:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <MX_I2C1_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_I2C1_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_I2C1_Init+0x50>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_I2C1_Init+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_I2C1_Init+0x50>)
 800237e:	f002 f9c3 	bl	8004708 <HAL_I2C_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002388:	f000 f98a 	bl	80026a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200004a4 	.word	0x200004a4
 8002394:	40005400 	.word	0x40005400
 8002398:	00061a80 	.word	0x00061a80

0800239c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023cc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023d0:	2247      	movs	r2, #71	; 0x47
 80023d2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535 - 1;
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80023e0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80023ee:	4824      	ldr	r0, [pc, #144]	; (8002480 <MX_TIM2_Init+0xe4>)
 80023f0:	f003 ff4a 	bl	8006288 <HAL_TIM_Base_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM2_Init+0x62>
		Error_Handler();
 80023fa:	f000 f951 	bl	80026a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002402:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	4619      	mov	r1, r3
 800240a:	481d      	ldr	r0, [pc, #116]	; (8002480 <MX_TIM2_Init+0xe4>)
 800240c:	f004 fad8 	bl	80069c0 <HAL_TIM_ConfigClockSource>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002416:	f000 f943 	bl	80026a0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800241a:	4819      	ldr	r0, [pc, #100]	; (8002480 <MX_TIM2_Init+0xe4>)
 800241c:	f003 ffd6 	bl	80063cc <HAL_TIM_IC_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8002426:	f000 f93b 	bl	80026a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	4619      	mov	r1, r3
 8002438:	4811      	ldr	r0, [pc, #68]	; (8002480 <MX_TIM2_Init+0xe4>)
 800243a:	f004 fe0f 	bl	800705c <HAL_TIMEx_MasterConfigSynchronization>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8002444:	f000 f92c 	bl	80026a0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002448:	2300      	movs	r3, #0
 800244a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800244c:	2301      	movs	r3, #1
 800244e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	4808      	ldr	r0, [pc, #32]	; (8002480 <MX_TIM2_Init+0xe4>)
 8002460:	f004 fa1a 	bl	8006898 <HAL_TIM_IC_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0xd2>
		Error_Handler();
 800246a:	f000 f919 	bl	80026a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800246e:	2100      	movs	r1, #0
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <MX_TIM2_Init+0xe4>)
 8002472:	f004 f803 	bl	800647c <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200004f8 	.word	0x200004f8

08002484 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002498:	463b      	mov	r3, r7
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MX_TIM3_Init+0x94>)
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <MX_TIM3_Init+0x98>)
 80024a4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_TIM3_Init+0x94>)
 80024a8:	2247      	movs	r2, #71	; 0x47
 80024aa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_TIM3_Init+0x94>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_TIM3_Init+0x94>)
 80024b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024b8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_TIM3_Init+0x94>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_TIM3_Init+0x94>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80024c6:	4814      	ldr	r0, [pc, #80]	; (8002518 <MX_TIM3_Init+0x94>)
 80024c8:	f003 fede 	bl	8006288 <HAL_TIM_Base_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80024d2:	f000 f8e5 	bl	80026a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024da:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_TIM3_Init+0x94>)
 80024e4:	f004 fa6c 	bl	80069c0 <HAL_TIM_ConfigClockSource>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80024ee:	f000 f8d7 	bl	80026a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80024fa:	463b      	mov	r3, r7
 80024fc:	4619      	mov	r1, r3
 80024fe:	4806      	ldr	r0, [pc, #24]	; (8002518 <MX_TIM3_Init+0x94>)
 8002500:	f004 fdac 	bl	800705c <HAL_TIMEx_MasterConfigSynchronization>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800250a:	f000 f8c9 	bl	80026a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000540 	.word	0x20000540
 800251c:	40000400 	.word	0x40000400

08002520 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USART1_UART_Init+0x4c>)
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <MX_USART1_UART_Init+0x50>)
 8002528:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <MX_USART1_UART_Init+0x4c>)
 800252c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002530:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USART1_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USART1_UART_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USART1_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USART1_UART_Init+0x4c>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USART1_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USART1_UART_Init+0x4c>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USART1_UART_Init+0x4c>)
 8002558:	f004 fdf0 	bl	800713c <HAL_UART_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002562:	f000 f89d 	bl	80026a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000588 	.word	0x20000588
 8002570:	40013800 	.word	0x40013800

08002574 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <MX_GPIO_Init+0xc4>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <MX_GPIO_Init+0xc4>)
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <MX_GPIO_Init+0xc4>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <MX_GPIO_Init+0xc4>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <MX_GPIO_Init+0xc4>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <MX_GPIO_Init+0xc4>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <MX_GPIO_Init+0xc4>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <MX_GPIO_Init+0xc4>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <MX_GPIO_Init+0xc4>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d6:	4819      	ldr	r0, [pc, #100]	; (800263c <MX_GPIO_Init+0xc8>)
 80025d8:	f002 f87d 	bl	80046d6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e2:	4817      	ldr	r0, [pc, #92]	; (8002640 <MX_GPIO_Init+0xcc>)
 80025e4:	f002 f877 	bl	80046d6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2118      	movs	r1, #24
 80025ec:	4813      	ldr	r0, [pc, #76]	; (800263c <MX_GPIO_Init+0xc8>)
 80025ee:	f002 f872 	bl	80046d6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB11 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_3 | GPIO_PIN_4;
 80025f2:	f640 0318 	movw	r3, #2072	; 0x818
 80025f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2302      	movs	r3, #2
 8002602:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	4619      	mov	r1, r3
 800260a:	480c      	ldr	r0, [pc, #48]	; (800263c <MX_GPIO_Init+0xc8>)
 800260c:	f001 fec8 	bl	80043a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002614:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002616:	2301      	movs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2302      	movs	r3, #2
 8002620:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_GPIO_Init+0xcc>)
 800262a:	f001 feb9 	bl	80043a0 <HAL_GPIO_Init>

}
 800262e:	bf00      	nop
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	40010c00 	.word	0x40010c00
 8002640:	40010800 	.word	0x40010800

08002644 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	//uint8_t send[8] = "rangga";
	comm_can_set_duty(0, 95);
 800264c:	4909      	ldr	r1, [pc, #36]	; (8002674 <StartDefaultTask+0x30>)
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff f82a 	bl	80016a8 <comm_can_set_duty>
	comm_can_db_signal(0, 2);
 8002654:	2102      	movs	r1, #2
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff f854 	bl	8001704 <comm_can_db_signal>
//		for (uint8_t a = 0; a < 8; a++) {
//			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			osDelay(50);
//		}
//		comm_can_transmit_eid(4, send, 8);
		cobaTask1++;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <StartDefaultTask+0x34>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <StartDefaultTask+0x34>)
 8002666:	701a      	strb	r2, [r3, #0]
		osDelay(10000);
 8002668:	f242 7010 	movw	r0, #10000	; 0x2710
 800266c:	f004 feac 	bl	80073c8 <osDelay>
		cobaTask1++;
 8002670:	e7f4      	b.n	800265c <StartDefaultTask+0x18>
 8002672:	bf00      	nop
 8002674:	42be0000 	.word	0x42be0000
 8002678:	200005d0 	.word	0x200005d0

0800267c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800268e:	f000 fad5 	bl	8002c3c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40000800 	.word	0x40000800

080026a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026a8:	e7fe      	b.n	80026a8 <Error_Handler+0x8>
	...

080026ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_MspInit+0x68>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_MspInit+0x68>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6193      	str	r3, [r2, #24]
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_MspInit+0x68>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_MspInit+0x68>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_MspInit+0x68>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	61d3      	str	r3, [r2, #28]
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_MspInit+0x68>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	210f      	movs	r1, #15
 80026e6:	f06f 0001 	mvn.w	r0, #1
 80026ea:	f001 fe2e 	bl	800434a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_MspInit+0x6c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_MspInit+0x6c>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000

0800271c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_ADC_MspInit+0x6c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d121      	bne.n	8002780 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_ADC_MspInit+0x70>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_ADC_MspInit+0x70>)
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_ADC_MspInit+0x70>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_ADC_MspInit+0x70>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_ADC_MspInit+0x70>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_ADC_MspInit+0x70>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 800276c:	23c1      	movs	r3, #193	; 0xc1
 800276e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002770:	2303      	movs	r3, #3
 8002772:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4619      	mov	r1, r3
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <HAL_ADC_MspInit+0x74>)
 800277c:	f001 fe10 	bl	80043a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40012400 	.word	0x40012400
 800278c:	40021000 	.word	0x40021000
 8002790:	40010800 	.word	0x40010800

08002794 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_CAN_MspInit+0xc0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d14b      	bne.n	800284c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_CAN_MspInit+0xc4>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_CAN_MspInit+0xc4>)
 80027ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027be:	61d3      	str	r3, [r2, #28]
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_CAN_MspInit+0xc4>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_CAN_MspInit+0xc4>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_CAN_MspInit+0xc4>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_CAN_MspInit+0xc4>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4818      	ldr	r0, [pc, #96]	; (800285c <HAL_CAN_MspInit+0xc8>)
 80027fa:	f001 fdd1 	bl	80043a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	4812      	ldr	r0, [pc, #72]	; (800285c <HAL_CAN_MspInit+0xc8>)
 8002814:	f001 fdc4 	bl	80043a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_CAN_MspInit+0xcc>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_CAN_MspInit+0xcc>)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2105      	movs	r1, #5
 8002840:	2015      	movs	r0, #21
 8002842:	f001 fd82 	bl	800434a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002846:	2015      	movs	r0, #21
 8002848:	f001 fd9b 	bl	8004382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	; 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40006400 	.word	0x40006400
 8002858:	40021000 	.word	0x40021000
 800285c:	40010c00 	.word	0x40010c00
 8002860:	40010000 	.word	0x40010000

08002864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_I2C_MspInit+0x70>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d123      	bne.n	80028cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_I2C_MspInit+0x74>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_I2C_MspInit+0x74>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_I2C_MspInit+0x74>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800289c:	23c0      	movs	r3, #192	; 0xc0
 800289e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4619      	mov	r1, r3
 80028ae:	480b      	ldr	r0, [pc, #44]	; (80028dc <HAL_I2C_MspInit+0x78>)
 80028b0:	f001 fd76 	bl	80043a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_I2C_MspInit+0x74>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_I2C_MspInit+0x74>)
 80028ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028be:	61d3      	str	r3, [r2, #28]
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_I2C_MspInit+0x74>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40005400 	.word	0x40005400
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010c00 	.word	0x40010c00

080028e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d13f      	bne.n	8002980 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002900:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	61d3      	str	r3, [r2, #28]
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	481a      	ldr	r0, [pc, #104]	; (80029b0 <HAL_TIM_Base_MspInit+0xd0>)
 8002946:	f001 fd2b 	bl	80043a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_TIM_Base_MspInit+0xd4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_TIM_Base_MspInit+0xd4>)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2105      	movs	r1, #5
 8002972:	201c      	movs	r0, #28
 8002974:	f001 fce9 	bl	800434a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002978:	201c      	movs	r0, #28
 800297a:	f001 fd02 	bl	8004382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800297e:	e010      	b.n	80029a2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a07      	ldr	r2, [pc, #28]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010800 	.word	0x40010800
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40000400 	.word	0x40000400

080029bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_UART_MspInit+0x8c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d131      	bne.n	8002a40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_UART_MspInit+0x90>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_UART_MspInit+0x90>)
 80029e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_UART_MspInit+0x90>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_UART_MspInit+0x90>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_UART_MspInit+0x90>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6193      	str	r3, [r2, #24]
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_UART_MspInit+0x90>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480b      	ldr	r0, [pc, #44]	; (8002a50 <HAL_UART_MspInit+0x94>)
 8002a22:	f001 fcbd 	bl	80043a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <HAL_UART_MspInit+0x94>)
 8002a3c:	f001 fcb0 	bl	80043a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a40:	bf00      	nop
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010800 	.word	0x40010800

08002a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_InitTick+0xe8>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a33      	ldr	r2, [pc, #204]	; (8002b3c <HAL_InitTick+0xe8>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_InitTick+0xe8>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a82:	f107 0210 	add.w	r2, r7, #16
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fa37 	bl	8005f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f003 fa08 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	6378      	str	r0, [r7, #52]	; 0x34
 8002aa2:	e004      	b.n	8002aae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002aa4:	f003 fa04 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_InitTick+0xec>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_InitTick+0xf0>)
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_InitTick+0xf4>)
 8002ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_InitTick+0xf0>)
 8002ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_InitTick+0xf0>)
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_InitTick+0xf0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_InitTick+0xf0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_InitTick+0xf0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002ae2:	4818      	ldr	r0, [pc, #96]	; (8002b44 <HAL_InitTick+0xf0>)
 8002ae4:	f003 fbd0 	bl	8006288 <HAL_TIM_Base_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002aee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11b      	bne.n	8002b2e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002af6:	4813      	ldr	r0, [pc, #76]	; (8002b44 <HAL_InitTick+0xf0>)
 8002af8:	f003 fc16 	bl	8006328 <HAL_TIM_Base_Start_IT>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002b02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b0a:	201e      	movs	r0, #30
 8002b0c:	f001 fc39 	bl	8004382 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	d808      	bhi.n	8002b28 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002b16:	2200      	movs	r2, #0
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	201e      	movs	r0, #30
 8002b1c:	f001 fc15 	bl	800434a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_InitTick+0xf8>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e002      	b.n	8002b2e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3738      	adds	r7, #56	; 0x38
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	200005d4 	.word	0x200005d4
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	20000008 	.word	0x20000008

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <NMI_Handler+0x4>

08002b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <MemManage_Handler+0x4>

08002b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <BusFault_Handler+0x4>

08002b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <UsageFault_Handler+0x4>

08002b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <CAN1_RX1_IRQHandler+0x10>)
 8002b82:	f001 f90a 	bl	8003d9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	2000047c 	.word	0x2000047c

08002b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <TIM2_IRQHandler+0x10>)
 8002b96:	f003 fd77 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200004f8 	.word	0x200004f8

08002ba4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <TIM4_IRQHandler+0x10>)
 8002baa:	f003 fd6d 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200005d4 	.word	0x200005d4

08002bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc6:	490d      	ldr	r1, [pc, #52]	; (8002bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bcc:	e002      	b.n	8002bd4 <LoopCopyDataInit>

08002bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd2:	3304      	adds	r3, #4

08002bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd8:	d3f9      	bcc.n	8002bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bdc:	4c0a      	ldr	r4, [pc, #40]	; (8002c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be0:	e001      	b.n	8002be6 <LoopFillZerobss>

08002be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be4:	3204      	adds	r2, #4

08002be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be8:	d3fb      	bcc.n	8002be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bea:	f7ff ffe5 	bl	8002bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f005 fd87 	bl	8008700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bf2:	f7ff fa91 	bl	8002118 <main>
  bx lr
 8002bf6:	4770      	bx	lr
  ldr r0, =_sdata
 8002bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bfc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c00:	08008a78 	.word	0x08008a78
  ldr r2, =_sbss
 8002c04:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c08:	20001374 	.word	0x20001374

08002c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c0c:	e7fe      	b.n	8002c0c <ADC1_2_IRQHandler>
	...

08002c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_Init+0x28>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_Init+0x28>)
 8002c1a:	f043 0310 	orr.w	r3, r3, #16
 8002c1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c20:	2003      	movs	r0, #3
 8002c22:	f001 fb87 	bl	8004334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c26:	200f      	movs	r0, #15
 8002c28:	f7ff ff14 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c2c:	f7ff fd3e 	bl	80026ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x20>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <HAL_IncTick+0x20>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	2000000c 	.word	0x2000000c
 8002c5c:	2000061c 	.word	0x2000061c

08002c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <HAL_GetTick+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	2000061c 	.word	0x2000061c

08002c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d005      	beq.n	8002c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_Delay+0x44>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9a:	bf00      	nop
 8002c9c:	f7ff ffe0 	bl	8002c60 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d8f7      	bhi.n	8002c9c <HAL_Delay+0x28>
  {
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000000c 	.word	0x2000000c

08002cbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0be      	b.n	8002e5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fd0e 	bl	800271c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fbf1 	bl	80034e8 <ADC_ConversionStop_Disable>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 8099 	bne.w	8002e4a <HAL_ADC_Init+0x18e>
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 8095 	bne.w	8002e4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d28:	f023 0302 	bic.w	r3, r3, #2
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7b1b      	ldrb	r3, [r3, #12]
 8002d42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d003      	beq.n	8002d5e <HAL_ADC_Init+0xa2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_ADC_Init+0xa8>
 8002d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d62:	e000      	b.n	8002d66 <HAL_ADC_Init+0xaa>
 8002d64:	2300      	movs	r3, #0
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7d1b      	ldrb	r3, [r3, #20]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d119      	bne.n	8002da8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7b1b      	ldrb	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	035a      	lsls	r2, r3, #13
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e00b      	b.n	8002da8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_ADC_Init+0x1a8>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd8:	d003      	beq.n	8002de2 <HAL_ADC_Init+0x126>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d104      	bne.n	8002dec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	051b      	lsls	r3, r3, #20
 8002dea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_ADC_Init+0x1ac>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d10b      	bne.n	8002e28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e26:	e018      	b.n	8002e5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	f023 0312 	bic.w	r3, r3, #18
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e48:	e007      	b.n	8002e5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f043 0210 	orr.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	ffe1f7fd 	.word	0xffe1f7fd
 8002e68:	ff1f0efe 	.word	0xff1f0efe

08002e6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_Start+0x1a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e098      	b.n	8002fb8 <HAL_ADC_Start+0x14c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fad0 	bl	8003434 <ADC_Enable>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8087 	bne.w	8002fae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a41      	ldr	r2, [pc, #260]	; (8002fc0 <HAL_ADC_Start+0x154>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d105      	bne.n	8002eca <HAL_ADC_Start+0x5e>
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_ADC_Start+0x158>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d115      	bne.n	8002ef6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d026      	beq.n	8002f32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ef4:	e01d      	b.n	8002f32 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <HAL_ADC_Start+0x158>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_ADC_Start+0xaa>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <HAL_ADC_Start+0x154>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10d      	bne.n	8002f32 <HAL_ADC_Start+0xc6>
 8002f16:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_ADC_Start+0x158>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f023 0206 	bic.w	r2, r3, #6
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f06f 0202 	mvn.w	r2, #2
 8002f62:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f72:	d113      	bne.n	8002f9c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f78:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_ADC_Start+0x154>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_ADC_Start+0x158>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	e00c      	b.n	8002fb6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40012800 	.word	0x40012800
 8002fc4:	40012400 	.word	0x40012400

08002fc8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_Stop+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e01a      	b.n	8003018 <HAL_ADC_Stop+0x50>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa7c 	bl	80034e8 <ADC_ConversionStop_Disable>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003036:	f7ff fe13 	bl	8002c60 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0d3      	b.n	800320a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d131      	bne.n	80030d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12a      	bne.n	80030d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800307e:	e021      	b.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d01d      	beq.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_ADC_PollForConversion+0x7e>
 800308e:	f7ff fde7 	bl	8002c60 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d212      	bcs.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0a2      	b.n	800320a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0d6      	beq.n	8003080 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030d2:	e070      	b.n	80031b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030d4:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <HAL_ADC_PollForConversion+0x1f4>)
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	2002      	movs	r0, #2
 80030da:	f003 f815 	bl	8006108 <HAL_RCCEx_GetPeriphCLKFreq>
 80030de:	4603      	mov	r3, r0
 80030e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_ADC_PollForConversion+0x1f8>)
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_ADC_PollForConversion+0x104>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68d9      	ldr	r1, [r3, #12]
 80030f8:	4b48      	ldr	r3, [pc, #288]	; (800321c <HAL_ADC_PollForConversion+0x1fc>)
 80030fa:	400b      	ands	r3, r1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <HAL_ADC_PollForConversion+0x104>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_ADC_PollForConversion+0x200>)
 8003108:	400b      	ands	r3, r1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <HAL_ADC_PollForConversion+0x100>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68d9      	ldr	r1, [r3, #12]
 8003114:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_ADC_PollForConversion+0x204>)
 8003116:	400b      	ands	r3, r1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_PollForConversion+0x100>
 800311c:	2314      	movs	r3, #20
 800311e:	e020      	b.n	8003162 <HAL_ADC_PollForConversion+0x142>
 8003120:	2329      	movs	r3, #41	; 0x29
 8003122:	e01e      	b.n	8003162 <HAL_ADC_PollForConversion+0x142>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_ADC_PollForConversion+0x200>)
 800312c:	400b      	ands	r3, r1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_ADC_PollForConversion+0x120>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68d9      	ldr	r1, [r3, #12]
 8003138:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_ADC_PollForConversion+0x204>)
 800313a:	400b      	ands	r3, r1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_ADC_PollForConversion+0x13c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	4b38      	ldr	r3, [pc, #224]	; (8003228 <HAL_ADC_PollForConversion+0x208>)
 8003148:	400b      	ands	r3, r1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_ADC_PollForConversion+0x140>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_ADC_PollForConversion+0x208>)
 8003156:	400b      	ands	r3, r1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_PollForConversion+0x140>
 800315c:	2354      	movs	r3, #84	; 0x54
 800315e:	e000      	b.n	8003162 <HAL_ADC_PollForConversion+0x142>
 8003160:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003168:	e021      	b.n	80031ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d01a      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_ADC_PollForConversion+0x168>
 8003178:	f7ff fd72 	bl	8002c60 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d20f      	bcs.n	80031a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	429a      	cmp	r2, r3
 800318e:	d90b      	bls.n	80031a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e030      	b.n	800320a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d8d9      	bhi.n	800316a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0212 	mvn.w	r2, #18
 80031be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031da:	d115      	bne.n	8003208 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d111      	bne.n	8003208 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop
 8003214:	20000004 	.word	0x20000004
 8003218:	24924924 	.word	0x24924924
 800321c:	00924924 	.word	0x00924924
 8003220:	12492492 	.word	0x12492492
 8003224:	00492492 	.word	0x00492492
 8003228:	00249249 	.word	0x00249249

0800322c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x20>
 8003260:	2302      	movs	r3, #2
 8003262:	e0dc      	b.n	800341e <HAL_ADC_ConfigChannel+0x1da>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b06      	cmp	r3, #6
 8003272:	d81c      	bhi.n	80032ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	3b05      	subs	r3, #5
 8003286:	221f      	movs	r2, #31
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	4019      	ands	r1, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b05      	subs	r3, #5
 80032a0:	fa00 f203 	lsl.w	r2, r0, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34
 80032ac:	e03c      	b.n	8003328 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d81c      	bhi.n	80032f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	3b23      	subs	r3, #35	; 0x23
 80032c8:	221f      	movs	r2, #31
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	4019      	ands	r1, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b23      	subs	r3, #35	; 0x23
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
 80032ee:	e01b      	b.n	8003328 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	3b41      	subs	r3, #65	; 0x41
 8003302:	221f      	movs	r2, #31
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	4019      	ands	r1, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	3b41      	subs	r3, #65	; 0x41
 800331c:	fa00 f203 	lsl.w	r2, r0, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b09      	cmp	r3, #9
 800332e:	d91c      	bls.n	800336a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68d9      	ldr	r1, [r3, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	3b1e      	subs	r3, #30
 8003342:	2207      	movs	r2, #7
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	4019      	ands	r1, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6898      	ldr	r0, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	3b1e      	subs	r3, #30
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e019      	b.n	800339e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6919      	ldr	r1, [r3, #16]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	2207      	movs	r2, #7
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	4019      	ands	r1, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6898      	ldr	r0, [r3, #8]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	fa00 f203 	lsl.w	r2, r0, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d003      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d132      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_ADC_ConfigChannel+0x1e4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d125      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d126      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d11a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_ADC_ConfigChannel+0x1e8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_ADC_ConfigChannel+0x1ec>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9a      	lsrs	r2, r3, #18
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033f4:	e002      	b.n	80033fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1b2>
 8003402:	e007      	b.n	8003414 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012400 	.word	0x40012400
 800342c:	20000004 	.word	0x20000004
 8003430:	431bde83 	.word	0x431bde83

08003434 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d040      	beq.n	80034d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003462:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <ADC_Enable+0xac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <ADC_Enable+0xb0>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	0c9b      	lsrs	r3, r3, #18
 800346e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003470:	e002      	b.n	8003478 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3b01      	subs	r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f9      	bne.n	8003472 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800347e:	f7ff fbef 	bl	8002c60 <HAL_GetTick>
 8003482:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003484:	e01f      	b.n	80034c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003486:	f7ff fbeb 	bl	8002c60 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d918      	bls.n	80034c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d011      	beq.n	80034c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e007      	b.n	80034d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d1d8      	bne.n	8003486 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000004 	.word	0x20000004
 80034e4:	431bde83 	.word	0x431bde83

080034e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d12e      	bne.n	8003560 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003512:	f7ff fba5 	bl	8002c60 <HAL_GetTick>
 8003516:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003518:	e01b      	b.n	8003552 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800351a:	f7ff fba1 	bl	8002c60 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d914      	bls.n	8003552 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10d      	bne.n	8003552 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f043 0210 	orr.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d0dc      	beq.n	800351a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0ed      	b.n	8003758 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff f903 	bl	8002794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800359e:	f7ff fb5f 	bl	8002c60 <HAL_GetTick>
 80035a2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035a4:	e012      	b.n	80035cc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035a6:	f7ff fb5b 	bl	8002c60 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b0a      	cmp	r3, #10
 80035b2:	d90b      	bls.n	80035cc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2205      	movs	r2, #5
 80035c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0c5      	b.n	8003758 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0e5      	beq.n	80035a6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0202 	bic.w	r2, r2, #2
 80035e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ea:	f7ff fb39 	bl	8002c60 <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035f0:	e012      	b.n	8003618 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035f2:	f7ff fb35 	bl	8002c60 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b0a      	cmp	r3, #10
 80035fe:	d90b      	bls.n	8003618 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2205      	movs	r2, #5
 8003610:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e09f      	b.n	8003758 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7e1b      	ldrb	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e007      	b.n	8003650 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7e5b      	ldrb	r3, [r3, #25]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d108      	bne.n	800366a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e007      	b.n	800367a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7e9b      	ldrb	r3, [r3, #26]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0220 	orr.w	r2, r2, #32
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e007      	b.n	80036a4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0220 	bic.w	r2, r2, #32
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7edb      	ldrb	r3, [r3, #27]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d108      	bne.n	80036be <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0210 	bic.w	r2, r2, #16
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e007      	b.n	80036ce <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0210 	orr.w	r2, r2, #16
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7f1b      	ldrb	r3, [r3, #28]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d108      	bne.n	80036e8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0208 	orr.w	r2, r2, #8
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e007      	b.n	80036f8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0208 	bic.w	r2, r2, #8
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7f5b      	ldrb	r3, [r3, #29]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d108      	bne.n	8003712 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0204 	orr.w	r2, r2, #4
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e007      	b.n	8003722 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0204 	bic.w	r2, r2, #4
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	ea42 0103 	orr.w	r1, r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	1e5a      	subs	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003776:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d003      	beq.n	8003786 <HAL_CAN_ConfigFilter+0x26>
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b02      	cmp	r3, #2
 8003782:	f040 80aa 	bne.w	80038da <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d123      	bne.n	8003808 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	401a      	ands	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3248      	adds	r2, #72	; 0x48
 80037e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	3348      	adds	r3, #72	; 0x48
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d122      	bne.n	8003856 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	431a      	orrs	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003830:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3248      	adds	r2, #72	; 0x48
 8003836:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800384a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800384c:	6979      	ldr	r1, [r7, #20]
 800384e:	3348      	adds	r3, #72	; 0x48
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43db      	mvns	r3, r3
 8003868:	401a      	ands	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003870:	e007      	b.n	8003882 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	431a      	orrs	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	401a      	ands	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800389c:	e007      	b.n	80038ae <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	431a      	orrs	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038cc:	f023 0201 	bic.w	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e006      	b.n	80038e8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d12e      	bne.n	8003964 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800391e:	f7ff f99f 	bl	8002c60 <HAL_GetTick>
 8003922:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003924:	e012      	b.n	800394c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003926:	f7ff f99b 	bl	8002c60 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b0a      	cmp	r3, #10
 8003932:	d90b      	bls.n	800394c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2205      	movs	r2, #5
 8003944:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e012      	b.n	8003972 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e5      	bne.n	8003926 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e006      	b.n	8003972 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800397a:	b480      	push	{r7}
 800397c:	b089      	sub	sp, #36	; 0x24
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003998:	7ffb      	ldrb	r3, [r7, #31]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d003      	beq.n	80039a6 <HAL_CAN_AddTxMessage+0x2c>
 800399e:	7ffb      	ldrb	r3, [r7, #31]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	f040 80b8 	bne.w	8003b16 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a0 	beq.w	8003b06 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	0e1b      	lsrs	r3, r3, #24
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d907      	bls.n	80039e6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e09e      	b.n	8003b24 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039e6:	2201      	movs	r2, #1
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	409a      	lsls	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	6809      	ldr	r1, [r1, #0]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	440b      	add	r3, r1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e00f      	b.n	8003a34 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a1e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a28:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	440b      	add	r3, r1
 8003a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	440b      	add	r3, r1
 8003a44:	3304      	adds	r3, #4
 8003a46:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	7d1b      	ldrb	r3, [r3, #20]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d111      	bne.n	8003a74 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3318      	adds	r3, #24
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	6811      	ldr	r1, [r2, #0]
 8003a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	440b      	add	r3, r1
 8003a70:	3304      	adds	r3, #4
 8003a72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3307      	adds	r3, #7
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	061a      	lsls	r2, r3, #24
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3306      	adds	r3, #6
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3305      	adds	r3, #5
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	3204      	adds	r2, #4
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	4610      	mov	r0, r2
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6811      	ldr	r1, [r2, #0]
 8003a9c:	ea43 0200 	orr.w	r2, r3, r0
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003aaa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3303      	adds	r3, #3
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	061a      	lsls	r2, r3, #24
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	7812      	ldrb	r2, [r2, #0]
 8003acc:	4610      	mov	r0, r2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	ea43 0200 	orr.w	r2, r3, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	440b      	add	r3, r1
 8003adc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ae0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	3318      	adds	r3, #24
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	4413      	add	r3, r2
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	6811      	ldr	r1, [r2, #0]
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3318      	adds	r3, #24
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	440b      	add	r3, r1
 8003b00:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e00e      	b.n	8003b24 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e006      	b.n	8003b24 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3724      	adds	r7, #36	; 0x24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d003      	beq.n	8003b52 <HAL_CAN_GetRxMessage+0x24>
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	f040 80f3 	bne.w	8003d38 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10e      	bne.n	8003b76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0e7      	b.n	8003d46 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d8      	b.n	8003d46 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	331b      	adds	r3, #27
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	4413      	add	r3, r2
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0204 	and.w	r2, r3, #4
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10c      	bne.n	8003bcc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	331b      	adds	r3, #27
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0d5b      	lsrs	r3, r3, #21
 8003bc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	331b      	adds	r3, #27
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0202 	and.w	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	331b      	adds	r3, #27
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	331b      	adds	r3, #27
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	331b      	adds	r3, #27
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0a1a      	lsrs	r2, r3, #8
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	0c1a      	lsrs	r2, r3, #16
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	3302      	adds	r3, #2
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e1a      	lsrs	r2, r3, #24
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0a1a      	lsrs	r2, r3, #8
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	3305      	adds	r3, #5
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0c1a      	lsrs	r2, r3, #16
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3306      	adds	r3, #6
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0e1a      	lsrs	r2, r3, #24
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	3307      	adds	r3, #7
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	e007      	b.n	8003d34 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0220 	orr.w	r2, r2, #32
 8003d32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e006      	b.n	8003d46 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d60:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <HAL_CAN_ActivateNotification+0x1e>
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d109      	bne.n	8003d82 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6959      	ldr	r1, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e006      	b.n	8003d90 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b08a      	sub	sp, #40	; 0x28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d07c      	beq.n	8003eda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d023      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f983 	bl	8004108 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e02:	e016      	b.n	8003e32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e00c      	b.n	8003e32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	e002      	b.n	8003e32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f986 	bl	800413e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d024      	beq.n	8003e86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f962 	bl	800411a <HAL_CAN_TxMailbox1CompleteCallback>
 8003e56:	e016      	b.n	8003e86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	e00c      	b.n	8003e86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	e002      	b.n	8003e86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f965 	bl	8004150 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d024      	beq.n	8003eda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f941 	bl	800412c <HAL_CAN_TxMailbox2CompleteCallback>
 8003eaa:	e016      	b.n	8003eda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebe:	e00c      	b.n	8003eda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	e002      	b.n	8003eda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f944 	bl	8004162 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2210      	movs	r2, #16
 8003efc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2208      	movs	r2, #8
 8003f18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f933 	bl	8004186 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f91b 	bl	8004174 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00c      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2210      	movs	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f90a 	bl	8004198 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fd fa6d 	bl	800147c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8f3 	bl	80041aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8eb 	bl	80041bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d07b      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d072      	beq.n	80040e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004054:	2b00      	cmp	r3, #0
 8004056:	d043      	beq.n	80040e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800405e:	2b00      	cmp	r3, #0
 8004060:	d03e      	beq.n	80040e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004068:	2b60      	cmp	r3, #96	; 0x60
 800406a:	d02b      	beq.n	80040c4 <HAL_CAN_IRQHandler+0x32a>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d82e      	bhi.n	80040ce <HAL_CAN_IRQHandler+0x334>
 8004070:	2b50      	cmp	r3, #80	; 0x50
 8004072:	d022      	beq.n	80040ba <HAL_CAN_IRQHandler+0x320>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d82a      	bhi.n	80040ce <HAL_CAN_IRQHandler+0x334>
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d019      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x316>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d826      	bhi.n	80040ce <HAL_CAN_IRQHandler+0x334>
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d010      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x30c>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d822      	bhi.n	80040ce <HAL_CAN_IRQHandler+0x334>
 8004088:	2b10      	cmp	r3, #16
 800408a:	d002      	beq.n	8004092 <HAL_CAN_IRQHandler+0x2f8>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d005      	beq.n	800409c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004090:	e01d      	b.n	80040ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800409a:	e019      	b.n	80040d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f043 0310 	orr.w	r3, r3, #16
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a4:	e014      	b.n	80040d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f043 0320 	orr.w	r3, r3, #32
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ae:	e00f      	b.n	80040d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b8:	e00a      	b.n	80040d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c2:	e005      	b.n	80040d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040cc:	e000      	b.n	80040d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80040ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2204      	movs	r2, #4
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f867 	bl	80041ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004100:	bf00      	nop
 8004102:	3728      	adds	r7, #40	; 0x28
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4906      	ldr	r1, [pc, #24]	; (8004278 <__NVIC_EnableIRQ+0x34>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100

0800427c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
         );
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff4f 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800435c:	f7ff ff64 	bl	8004228 <__NVIC_GetPriorityGrouping>
 8004360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	6978      	ldr	r0, [r7, #20]
 8004368:	f7ff ffb2 	bl	80042d0 <NVIC_EncodePriority>
 800436c:	4602      	mov	r2, r0
 800436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff81 	bl	800427c <__NVIC_SetPriority>
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff57 	bl	8004244 <__NVIC_EnableIRQ>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b08b      	sub	sp, #44	; 0x2c
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043ae:	2300      	movs	r3, #0
 80043b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b2:	e169      	b.n	8004688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043b4:	2201      	movs	r2, #1
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	f040 8158 	bne.w	8004682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a9a      	ldr	r2, [pc, #616]	; (8004640 <HAL_GPIO_Init+0x2a0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d05e      	beq.n	800449a <HAL_GPIO_Init+0xfa>
 80043dc:	4a98      	ldr	r2, [pc, #608]	; (8004640 <HAL_GPIO_Init+0x2a0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d875      	bhi.n	80044ce <HAL_GPIO_Init+0x12e>
 80043e2:	4a98      	ldr	r2, [pc, #608]	; (8004644 <HAL_GPIO_Init+0x2a4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d058      	beq.n	800449a <HAL_GPIO_Init+0xfa>
 80043e8:	4a96      	ldr	r2, [pc, #600]	; (8004644 <HAL_GPIO_Init+0x2a4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d86f      	bhi.n	80044ce <HAL_GPIO_Init+0x12e>
 80043ee:	4a96      	ldr	r2, [pc, #600]	; (8004648 <HAL_GPIO_Init+0x2a8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d052      	beq.n	800449a <HAL_GPIO_Init+0xfa>
 80043f4:	4a94      	ldr	r2, [pc, #592]	; (8004648 <HAL_GPIO_Init+0x2a8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d869      	bhi.n	80044ce <HAL_GPIO_Init+0x12e>
 80043fa:	4a94      	ldr	r2, [pc, #592]	; (800464c <HAL_GPIO_Init+0x2ac>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d04c      	beq.n	800449a <HAL_GPIO_Init+0xfa>
 8004400:	4a92      	ldr	r2, [pc, #584]	; (800464c <HAL_GPIO_Init+0x2ac>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d863      	bhi.n	80044ce <HAL_GPIO_Init+0x12e>
 8004406:	4a92      	ldr	r2, [pc, #584]	; (8004650 <HAL_GPIO_Init+0x2b0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d046      	beq.n	800449a <HAL_GPIO_Init+0xfa>
 800440c:	4a90      	ldr	r2, [pc, #576]	; (8004650 <HAL_GPIO_Init+0x2b0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d85d      	bhi.n	80044ce <HAL_GPIO_Init+0x12e>
 8004412:	2b12      	cmp	r3, #18
 8004414:	d82a      	bhi.n	800446c <HAL_GPIO_Init+0xcc>
 8004416:	2b12      	cmp	r3, #18
 8004418:	d859      	bhi.n	80044ce <HAL_GPIO_Init+0x12e>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <HAL_GPIO_Init+0x80>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	0800449b 	.word	0x0800449b
 8004424:	08004475 	.word	0x08004475
 8004428:	08004487 	.word	0x08004487
 800442c:	080044c9 	.word	0x080044c9
 8004430:	080044cf 	.word	0x080044cf
 8004434:	080044cf 	.word	0x080044cf
 8004438:	080044cf 	.word	0x080044cf
 800443c:	080044cf 	.word	0x080044cf
 8004440:	080044cf 	.word	0x080044cf
 8004444:	080044cf 	.word	0x080044cf
 8004448:	080044cf 	.word	0x080044cf
 800444c:	080044cf 	.word	0x080044cf
 8004450:	080044cf 	.word	0x080044cf
 8004454:	080044cf 	.word	0x080044cf
 8004458:	080044cf 	.word	0x080044cf
 800445c:	080044cf 	.word	0x080044cf
 8004460:	080044cf 	.word	0x080044cf
 8004464:	0800447d 	.word	0x0800447d
 8004468:	08004491 	.word	0x08004491
 800446c:	4a79      	ldr	r2, [pc, #484]	; (8004654 <HAL_GPIO_Init+0x2b4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004472:	e02c      	b.n	80044ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	623b      	str	r3, [r7, #32]
          break;
 800447a:	e029      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	623b      	str	r3, [r7, #32]
          break;
 8004484:	e024      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	3308      	adds	r3, #8
 800448c:	623b      	str	r3, [r7, #32]
          break;
 800448e:	e01f      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	330c      	adds	r3, #12
 8004496:	623b      	str	r3, [r7, #32]
          break;
 8004498:	e01a      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044a2:	2304      	movs	r3, #4
 80044a4:	623b      	str	r3, [r7, #32]
          break;
 80044a6:	e013      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044b0:	2308      	movs	r3, #8
 80044b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	611a      	str	r2, [r3, #16]
          break;
 80044ba:	e009      	b.n	80044d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044bc:	2308      	movs	r3, #8
 80044be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	615a      	str	r2, [r3, #20]
          break;
 80044c6:	e003      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044c8:	2300      	movs	r3, #0
 80044ca:	623b      	str	r3, [r7, #32]
          break;
 80044cc:	e000      	b.n	80044d0 <HAL_GPIO_Init+0x130>
          break;
 80044ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2bff      	cmp	r3, #255	; 0xff
 80044d4:	d801      	bhi.n	80044da <HAL_GPIO_Init+0x13a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	e001      	b.n	80044de <HAL_GPIO_Init+0x13e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2bff      	cmp	r3, #255	; 0xff
 80044e4:	d802      	bhi.n	80044ec <HAL_GPIO_Init+0x14c>
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	e002      	b.n	80044f2 <HAL_GPIO_Init+0x152>
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	3b08      	subs	r3, #8
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	210f      	movs	r1, #15
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	401a      	ands	r2, r3
 8004504:	6a39      	ldr	r1, [r7, #32]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	431a      	orrs	r2, r3
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80b1 	beq.w	8004682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004520:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4a4c      	ldr	r2, [pc, #304]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6193      	str	r3, [r2, #24]
 800452c:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004538:	4a48      	ldr	r2, [pc, #288]	; (800465c <HAL_GPIO_Init+0x2bc>)
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	3302      	adds	r3, #2
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	220f      	movs	r2, #15
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a40      	ldr	r2, [pc, #256]	; (8004660 <HAL_GPIO_Init+0x2c0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <HAL_GPIO_Init+0x1ec>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3f      	ldr	r2, [pc, #252]	; (8004664 <HAL_GPIO_Init+0x2c4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00d      	beq.n	8004588 <HAL_GPIO_Init+0x1e8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_GPIO_Init+0x2c8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <HAL_GPIO_Init+0x1e4>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3d      	ldr	r2, [pc, #244]	; (800466c <HAL_GPIO_Init+0x2cc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d101      	bne.n	8004580 <HAL_GPIO_Init+0x1e0>
 800457c:	2303      	movs	r3, #3
 800457e:	e006      	b.n	800458e <HAL_GPIO_Init+0x1ee>
 8004580:	2304      	movs	r3, #4
 8004582:	e004      	b.n	800458e <HAL_GPIO_Init+0x1ee>
 8004584:	2302      	movs	r3, #2
 8004586:	e002      	b.n	800458e <HAL_GPIO_Init+0x1ee>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_GPIO_Init+0x1ee>
 800458c:	2300      	movs	r3, #0
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	f002 0203 	and.w	r2, r2, #3
 8004594:	0092      	lsls	r2, r2, #2
 8004596:	4093      	lsls	r3, r2
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800459e:	492f      	ldr	r1, [pc, #188]	; (800465c <HAL_GPIO_Init+0x2bc>)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	492c      	ldr	r1, [pc, #176]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
 80045c4:	e006      	b.n	80045d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	4928      	ldr	r1, [pc, #160]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045e0:	4b23      	ldr	r3, [pc, #140]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	4922      	ldr	r1, [pc, #136]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	e006      	b.n	80045fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	491e      	ldr	r1, [pc, #120]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	4918      	ldr	r1, [pc, #96]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]
 8004614:	e006      	b.n	8004624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	43db      	mvns	r3, r3
 800461e:	4914      	ldr	r1, [pc, #80]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 8004620:	4013      	ands	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d021      	beq.n	8004674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_GPIO_Init+0x2d0>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
 800463c:	e021      	b.n	8004682 <HAL_GPIO_Init+0x2e2>
 800463e:	bf00      	nop
 8004640:	10320000 	.word	0x10320000
 8004644:	10310000 	.word	0x10310000
 8004648:	10220000 	.word	0x10220000
 800464c:	10210000 	.word	0x10210000
 8004650:	10120000 	.word	0x10120000
 8004654:	10110000 	.word	0x10110000
 8004658:	40021000 	.word	0x40021000
 800465c:	40010000 	.word	0x40010000
 8004660:	40010800 	.word	0x40010800
 8004664:	40010c00 	.word	0x40010c00
 8004668:	40011000 	.word	0x40011000
 800466c:	40011400 	.word	0x40011400
 8004670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_GPIO_Init+0x304>)
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	43db      	mvns	r3, r3
 800467c:	4909      	ldr	r1, [pc, #36]	; (80046a4 <HAL_GPIO_Init+0x304>)
 800467e:	4013      	ands	r3, r2
 8004680:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	3301      	adds	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f47f ae8e 	bne.w	80043b4 <HAL_GPIO_Init+0x14>
  }
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	372c      	adds	r7, #44	; 0x2c
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	40010400 	.word	0x40010400

080046a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e001      	b.n	80046ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	807b      	strh	r3, [r7, #2]
 80046e2:	4613      	mov	r3, r2
 80046e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e6:	787b      	ldrb	r3, [r7, #1]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ec:	887a      	ldrh	r2, [r7, #2]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046f2:	e003      	b.n	80046fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046f4:	887b      	ldrh	r3, [r7, #2]
 80046f6:	041a      	lsls	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	611a      	str	r2, [r3, #16]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
	...

08004708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e12b      	b.n	8004972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe f898 	bl	8002864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800475a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800476a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800476c:	f001 fba0 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8004770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4a81      	ldr	r2, [pc, #516]	; (800497c <HAL_I2C_Init+0x274>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d807      	bhi.n	800478c <HAL_I2C_Init+0x84>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a80      	ldr	r2, [pc, #512]	; (8004980 <HAL_I2C_Init+0x278>)
 8004780:	4293      	cmp	r3, r2
 8004782:	bf94      	ite	ls
 8004784:	2301      	movls	r3, #1
 8004786:	2300      	movhi	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e006      	b.n	800479a <HAL_I2C_Init+0x92>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a7d      	ldr	r2, [pc, #500]	; (8004984 <HAL_I2C_Init+0x27c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	bf94      	ite	ls
 8004794:	2301      	movls	r3, #1
 8004796:	2300      	movhi	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e0e7      	b.n	8004972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a78      	ldr	r2, [pc, #480]	; (8004988 <HAL_I2C_Init+0x280>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0c9b      	lsrs	r3, r3, #18
 80047ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a6a      	ldr	r2, [pc, #424]	; (800497c <HAL_I2C_Init+0x274>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d802      	bhi.n	80047dc <HAL_I2C_Init+0xd4>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3301      	adds	r3, #1
 80047da:	e009      	b.n	80047f0 <HAL_I2C_Init+0xe8>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	4a69      	ldr	r2, [pc, #420]	; (800498c <HAL_I2C_Init+0x284>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	3301      	adds	r3, #1
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	495c      	ldr	r1, [pc, #368]	; (800497c <HAL_I2C_Init+0x274>)
 800480c:	428b      	cmp	r3, r1
 800480e:	d819      	bhi.n	8004844 <HAL_I2C_Init+0x13c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e59      	subs	r1, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	fbb1 f3f3 	udiv	r3, r1, r3
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004824:	400b      	ands	r3, r1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_I2C_Init+0x138>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1e59      	subs	r1, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	fbb1 f3f3 	udiv	r3, r1, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	e051      	b.n	80048e4 <HAL_I2C_Init+0x1dc>
 8004840:	2304      	movs	r3, #4
 8004842:	e04f      	b.n	80048e4 <HAL_I2C_Init+0x1dc>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d111      	bne.n	8004870 <HAL_I2C_Init+0x168>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1e58      	subs	r0, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	440b      	add	r3, r1
 800485a:	fbb0 f3f3 	udiv	r3, r0, r3
 800485e:	3301      	adds	r3, #1
 8004860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e012      	b.n	8004896 <HAL_I2C_Init+0x18e>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1e58      	subs	r0, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	0099      	lsls	r1, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	fbb0 f3f3 	udiv	r3, r0, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Init+0x196>
 800489a:	2301      	movs	r3, #1
 800489c:	e022      	b.n	80048e4 <HAL_I2C_Init+0x1dc>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10e      	bne.n	80048c4 <HAL_I2C_Init+0x1bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1e58      	subs	r0, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	440b      	add	r3, r1
 80048b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c2:	e00f      	b.n	80048e4 <HAL_I2C_Init+0x1dc>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e58      	subs	r0, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	0099      	lsls	r1, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048da:	3301      	adds	r3, #1
 80048dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	6809      	ldr	r1, [r1, #0]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6911      	ldr	r1, [r2, #16]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68d2      	ldr	r2, [r2, #12]
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	430b      	orrs	r3, r1
 8004926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	000186a0 	.word	0x000186a0
 8004980:	001e847f 	.word	0x001e847f
 8004984:	003d08ff 	.word	0x003d08ff
 8004988:	431bde83 	.word	0x431bde83
 800498c:	10624dd3 	.word	0x10624dd3

08004990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	817b      	strh	r3, [r7, #10]
 80049a2:	460b      	mov	r3, r1
 80049a4:	813b      	strh	r3, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049aa:	f7fe f959 	bl	8002c60 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	f040 80d9 	bne.w	8004b70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2319      	movs	r3, #25
 80049c4:	2201      	movs	r2, #1
 80049c6:	496d      	ldr	r1, [pc, #436]	; (8004b7c <HAL_I2C_Mem_Write+0x1ec>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fcc1 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	e0cc      	b.n	8004b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_I2C_Mem_Write+0x56>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0c5      	b.n	8004b72 <HAL_I2C_Mem_Write+0x1e2>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d007      	beq.n	8004a0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2221      	movs	r2, #33	; 0x21
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a4d      	ldr	r2, [pc, #308]	; (8004b80 <HAL_I2C_Mem_Write+0x1f0>)
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4e:	88f8      	ldrh	r0, [r7, #6]
 8004a50:	893a      	ldrh	r2, [r7, #8]
 8004a52:	8979      	ldrh	r1, [r7, #10]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 faf8 	bl	8005054 <I2C_RequestMemoryWrite>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d052      	beq.n	8004b10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e081      	b.n	8004b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fd42 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d107      	bne.n	8004a96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e06b      	b.n	8004b72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d11b      	bne.n	8004b10 <HAL_I2C_Mem_Write+0x180>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d017      	beq.n	8004b10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1aa      	bne.n	8004a6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fd2e 	bl	800557e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d107      	bne.n	8004b40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e016      	b.n	8004b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	00100002 	.word	0x00100002
 8004b80:	ffff0000 	.word	0xffff0000

08004b84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	460b      	mov	r3, r1
 8004b98:	813b      	strh	r3, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ba2:	f7fe f85d 	bl	8002c60 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	f040 8244 	bne.w	800503e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2319      	movs	r3, #25
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	4982      	ldr	r1, [pc, #520]	; (8004dc8 <HAL_I2C_Mem_Read+0x244>)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fbc5 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e237      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_I2C_Mem_Read+0x5a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e230      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d007      	beq.n	8004c04 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2222      	movs	r2, #34	; 0x22
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2240      	movs	r2, #64	; 0x40
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a62      	ldr	r2, [pc, #392]	; (8004dcc <HAL_I2C_Mem_Read+0x248>)
 8004c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c46:	88f8      	ldrh	r0, [r7, #6]
 8004c48:	893a      	ldrh	r2, [r7, #8]
 8004c4a:	8979      	ldrh	r1, [r7, #10]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4603      	mov	r3, r0
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa92 	bl	8005180 <I2C_RequestMemoryRead>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e1ec      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d113      	bne.n	8004c96 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e1c0      	b.n	8005018 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d11e      	bne.n	8004cdc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cae:	b672      	cpsid	i
}
 8004cb0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cd8:	b662      	cpsie	i
}
 8004cda:	e035      	b.n	8004d48 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d11e      	bne.n	8004d22 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf4:	b672      	cpsid	i
}
 8004cf6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d1e:	b662      	cpsie	i
}
 8004d20:	e012      	b.n	8004d48 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d30:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d48:	e166      	b.n	8005018 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	f200 811f 	bhi.w	8004f92 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d123      	bne.n	8004da4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fc4d 	bl	8005600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e167      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da2:	e139      	b.n	8005018 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d152      	bne.n	8004e52 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	2200      	movs	r2, #0
 8004db4:	4906      	ldr	r1, [pc, #24]	; (8004dd0 <HAL_I2C_Mem_Read+0x24c>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 faca 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e13c      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
 8004dc6:	bf00      	nop
 8004dc8:	00100002 	.word	0x00100002
 8004dcc:	ffff0000 	.word	0xffff0000
 8004dd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd4:	b672      	cpsid	i
}
 8004dd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e1a:	b662      	cpsie	i
}
 8004e1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e50:	e0e2      	b.n	8005018 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2200      	movs	r2, #0
 8004e5a:	497b      	ldr	r1, [pc, #492]	; (8005048 <HAL_I2C_Mem_Read+0x4c4>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fa77 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0e9      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e7c:	b672      	cpsid	i
}
 8004e7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004eb2:	4b66      	ldr	r3, [pc, #408]	; (800504c <HAL_I2C_Mem_Read+0x4c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	4a65      	ldr	r2, [pc, #404]	; (8005050 <HAL_I2C_Mem_Read+0x4cc>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0a1a      	lsrs	r2, r3, #8
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00da      	lsls	r2, r3, #3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d118      	bne.n	8004f0a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004efa:	b662      	cpsie	i
}
 8004efc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e09a      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d1d9      	bne.n	8004ecc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f5a:	b662      	cpsie	i
}
 8004f5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f90:	e042      	b.n	8005018 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fb32 	bl	8005600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e04c      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d118      	bne.n	8005018 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f ae94 	bne.w	8004d4a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	00010004 	.word	0x00010004
 800504c:	20000004 	.word	0x20000004
 8005050:	14f8b589 	.word	0x14f8b589

08005054 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	461a      	mov	r2, r3
 8005062:	4603      	mov	r3, r0
 8005064:	817b      	strh	r3, [r7, #10]
 8005066:	460b      	mov	r3, r1
 8005068:	813b      	strh	r3, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2200      	movs	r2, #0
 8005086:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f960 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a4:	d103      	bne.n	80050ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e05f      	b.n	8005172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b2:	897b      	ldrh	r3, [r7, #10]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	492d      	ldr	r1, [pc, #180]	; (800517c <I2C_RequestMemoryWrite+0x128>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f998 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e04c      	b.n	8005172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fa02 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d107      	bne.n	8005116 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e02b      	b.n	8005172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	611a      	str	r2, [r3, #16]
 800512a:	e021      	b.n	8005170 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	b29b      	uxth	r3, r3
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f9dc 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b04      	cmp	r3, #4
 8005150:	d107      	bne.n	8005162 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e005      	b.n	8005172 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005166:	893b      	ldrh	r3, [r7, #8]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	00010002 	.word	0x00010002

08005180 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4603      	mov	r3, r0
 8005190:	817b      	strh	r3, [r7, #10]
 8005192:	460b      	mov	r3, r1
 8005194:	813b      	strh	r3, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f8c2 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e0:	d103      	bne.n	80051ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0aa      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	4952      	ldr	r1, [pc, #328]	; (800534c <I2C_RequestMemoryRead+0x1cc>)
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f8fa 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e097      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	6a39      	ldr	r1, [r7, #32]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f964 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b04      	cmp	r3, #4
 8005240:	d107      	bne.n	8005252 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e076      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d105      	bne.n	8005268 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525c:	893b      	ldrh	r3, [r7, #8]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	611a      	str	r2, [r3, #16]
 8005266:	e021      	b.n	80052ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005268:	893b      	ldrh	r3, [r7, #8]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	b29b      	uxth	r3, r3
 800526e:	b2da      	uxtb	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005278:	6a39      	ldr	r1, [r7, #32]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f93e 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00d      	beq.n	80052a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b04      	cmp	r3, #4
 800528c:	d107      	bne.n	800529e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e050      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ae:	6a39      	ldr	r1, [r7, #32]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f923 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d107      	bne.n	80052d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e035      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f82b 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530e:	d103      	bne.n	8005318 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e013      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800531c:	897b      	ldrh	r3, [r7, #10]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	4906      	ldr	r1, [pc, #24]	; (800534c <I2C_RequestMemoryRead+0x1cc>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f863 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	00010002 	.word	0x00010002

08005350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005360:	e025      	b.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d021      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fd fc79 	bl	8002c60 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e023      	b.n	80053f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d10d      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	e00c      	b.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d0b6      	beq.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800540c:	e051      	b.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d123      	bne.n	8005466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005436:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f043 0204 	orr.w	r2, r3, #4
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e046      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d021      	beq.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fd fbf7 	bl	8002c60 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e020      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10c      	bne.n	80054d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e00b      	b.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	43da      	mvns	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d18d      	bne.n	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005508:	e02d      	b.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f8ce 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e02d      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d021      	beq.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fd fb9d 	bl	8002c60 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e007      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d1ca      	bne.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558a:	e02d      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f88d 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e02d      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a2:	d021      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fd fb5c 	bl	8002c60 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d116      	bne.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e007      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d1ca      	bne.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800560c:	e042      	b.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d119      	bne.n	8005650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0210 	mvn.w	r2, #16
 8005624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e029      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fd fb06 	bl	8002c60 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e007      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d1b5      	bne.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d11b      	bne.n	80056fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e272      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8087 	beq.w	8005836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005728:	4b92      	ldr	r3, [pc, #584]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b04      	cmp	r3, #4
 8005732:	d00c      	beq.n	800574e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005734:	4b8f      	ldr	r3, [pc, #572]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b08      	cmp	r3, #8
 800573e:	d112      	bne.n	8005766 <HAL_RCC_OscConfig+0x5e>
 8005740:	4b8c      	ldr	r3, [pc, #560]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574c:	d10b      	bne.n	8005766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574e:	4b89      	ldr	r3, [pc, #548]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06c      	beq.n	8005834 <HAL_RCC_OscConfig+0x12c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d168      	bne.n	8005834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e24c      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576e:	d106      	bne.n	800577e <HAL_RCC_OscConfig+0x76>
 8005770:	4b80      	ldr	r3, [pc, #512]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a7f      	ldr	r2, [pc, #508]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e02e      	b.n	80057dc <HAL_RCC_OscConfig+0xd4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10c      	bne.n	80057a0 <HAL_RCC_OscConfig+0x98>
 8005786:	4b7b      	ldr	r3, [pc, #492]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a7a      	ldr	r2, [pc, #488]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 800578c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4b78      	ldr	r3, [pc, #480]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a77      	ldr	r2, [pc, #476]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e01d      	b.n	80057dc <HAL_RCC_OscConfig+0xd4>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0xbc>
 80057aa:	4b72      	ldr	r3, [pc, #456]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a71      	ldr	r2, [pc, #452]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4b6f      	ldr	r3, [pc, #444]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6e      	ldr	r2, [pc, #440]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e00b      	b.n	80057dc <HAL_RCC_OscConfig+0xd4>
 80057c4:	4b6b      	ldr	r3, [pc, #428]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a6a      	ldr	r2, [pc, #424]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a67      	ldr	r2, [pc, #412]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d013      	beq.n	800580c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fd fa3c 	bl	8002c60 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ec:	f7fd fa38 	bl	8002c60 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b64      	cmp	r3, #100	; 0x64
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e200      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0xe4>
 800580a:	e014      	b.n	8005836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580c:	f7fd fa28 	bl	8002c60 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005814:	f7fd fa24 	bl	8002c60 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b64      	cmp	r3, #100	; 0x64
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1ec      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005826:	4b53      	ldr	r3, [pc, #332]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x10c>
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d063      	beq.n	800590a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005842:	4b4c      	ldr	r3, [pc, #304]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800584e:	4b49      	ldr	r3, [pc, #292]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b08      	cmp	r3, #8
 8005858:	d11c      	bne.n	8005894 <HAL_RCC_OscConfig+0x18c>
 800585a:	4b46      	ldr	r3, [pc, #280]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005866:	4b43      	ldr	r3, [pc, #268]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_RCC_OscConfig+0x176>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d001      	beq.n	800587e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e1c0      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587e:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4939      	ldr	r1, [pc, #228]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005892:	e03a      	b.n	800590a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800589c:	4b36      	ldr	r3, [pc, #216]	; (8005978 <HAL_RCC_OscConfig+0x270>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a2:	f7fd f9dd 	bl	8002c60 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058aa:	f7fd f9d9 	bl	8002c60 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e1a1      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c8:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	4927      	ldr	r1, [pc, #156]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]
 80058dc:	e015      	b.n	800590a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <HAL_RCC_OscConfig+0x270>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd f9bc 	bl	8002c60 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ec:	f7fd f9b8 	bl	8002c60 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e180      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d03a      	beq.n	800598c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d019      	beq.n	8005952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591e:	4b17      	ldr	r3, [pc, #92]	; (800597c <HAL_RCC_OscConfig+0x274>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005924:	f7fd f99c 	bl	8002c60 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800592c:	f7fd f998 	bl	8002c60 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e160      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800594a:	2001      	movs	r0, #1
 800594c:	f000 fb08 	bl	8005f60 <RCC_Delay>
 8005950:	e01c      	b.n	800598c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCC_OscConfig+0x274>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005958:	f7fd f982 	bl	8002c60 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595e:	e00f      	b.n	8005980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005960:	f7fd f97e 	bl	8002c60 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d908      	bls.n	8005980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e146      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	42420000 	.word	0x42420000
 800597c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005980:	4b92      	ldr	r3, [pc, #584]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e9      	bne.n	8005960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80a6 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800599e:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	4b88      	ldr	r3, [pc, #544]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	4a87      	ldr	r2, [pc, #540]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	61d3      	str	r3, [r2, #28]
 80059b6:	4b85      	ldr	r3, [pc, #532]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c6:	4b82      	ldr	r3, [pc, #520]	; (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d118      	bne.n	8005a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059d2:	4b7f      	ldr	r3, [pc, #508]	; (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a7e      	ldr	r2, [pc, #504]	; (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059de:	f7fd f93f 	bl	8002c60 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e6:	f7fd f93b 	bl	8002c60 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b64      	cmp	r3, #100	; 0x64
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e103      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	4b75      	ldr	r3, [pc, #468]	; (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCC_OscConfig+0x312>
 8005a0c:	4b6f      	ldr	r3, [pc, #444]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4a6e      	ldr	r2, [pc, #440]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	6213      	str	r3, [r2, #32]
 8005a18:	e02d      	b.n	8005a76 <HAL_RCC_OscConfig+0x36e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x334>
 8005a22:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4a69      	ldr	r2, [pc, #420]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	6213      	str	r3, [r2, #32]
 8005a2e:	4b67      	ldr	r3, [pc, #412]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4a66      	ldr	r2, [pc, #408]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	6213      	str	r3, [r2, #32]
 8005a3a:	e01c      	b.n	8005a76 <HAL_RCC_OscConfig+0x36e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_OscConfig+0x356>
 8005a44:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4a60      	ldr	r2, [pc, #384]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a4a:	f043 0304 	orr.w	r3, r3, #4
 8005a4e:	6213      	str	r3, [r2, #32]
 8005a50:	4b5e      	ldr	r3, [pc, #376]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	4a5d      	ldr	r2, [pc, #372]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a56:	f043 0301 	orr.w	r3, r3, #1
 8005a5a:	6213      	str	r3, [r2, #32]
 8005a5c:	e00b      	b.n	8005a76 <HAL_RCC_OscConfig+0x36e>
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4a5a      	ldr	r2, [pc, #360]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	6213      	str	r3, [r2, #32]
 8005a6a:	4b58      	ldr	r3, [pc, #352]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	4a57      	ldr	r2, [pc, #348]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d015      	beq.n	8005aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7fd f8ef 	bl	8002c60 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fd f8eb 	bl	8002c60 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0b1      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ee      	beq.n	8005a86 <HAL_RCC_OscConfig+0x37e>
 8005aa8:	e014      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aaa:	f7fd f8d9 	bl	8002c60 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fd f8d5 	bl	8002c60 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e09b      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac8:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1ee      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	4a3b      	ldr	r2, [pc, #236]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8087 	beq.w	8005bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af0:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d061      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d146      	bne.n	8005b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b04:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <HAL_RCC_OscConfig+0x4cc>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0a:	f7fd f8a9 	bl	8002c60 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b12:	f7fd f8a5 	bl	8002c60 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e06d      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b24:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d108      	bne.n	8005b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4921      	ldr	r1, [pc, #132]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a19      	ldr	r1, [r3, #32]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	491b      	ldr	r1, [pc, #108]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b64:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <HAL_RCC_OscConfig+0x4cc>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6a:	f7fd f879 	bl	8002c60 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b72:	f7fd f875 	bl	8002c60 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e03d      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b84:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_RCC_OscConfig+0x46a>
 8005b90:	e035      	b.n	8005bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <HAL_RCC_OscConfig+0x4cc>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fd f862 	bl	8002c60 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fd f85e 	bl	8002c60 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e026      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x498>
 8005bbe:	e01e      	b.n	8005bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d107      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e019      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x500>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d106      	bne.n	8005bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d001      	beq.n	8005bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40021000 	.word	0x40021000

08005c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0d0      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d910      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b67      	ldr	r3, [pc, #412]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 0207 	bic.w	r2, r3, #7
 8005c36:	4965      	ldr	r1, [pc, #404]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0b8      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d020      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c68:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a58      	ldr	r2, [pc, #352]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c80:	4b53      	ldr	r3, [pc, #332]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a52      	ldr	r2, [pc, #328]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c8c:	4b50      	ldr	r3, [pc, #320]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	494d      	ldr	r1, [pc, #308]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d040      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d115      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cca:	4b41      	ldr	r3, [pc, #260]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e073      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cda:	4b3d      	ldr	r3, [pc, #244]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e06b      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cea:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4936      	ldr	r1, [pc, #216]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cfc:	f7fc ffb0 	bl	8002c60 <HAL_GetTick>
 8005d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d04:	f7fc ffac 	bl	8002c60 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e053      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 020c 	and.w	r2, r3, #12
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d1eb      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d210      	bcs.n	8005d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f023 0207 	bic.w	r2, r3, #7
 8005d42:	4922      	ldr	r1, [pc, #136]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	4b20      	ldr	r3, [pc, #128]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e032      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4916      	ldr	r1, [pc, #88]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	490e      	ldr	r1, [pc, #56]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d9a:	f000 f821 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	490a      	ldr	r1, [pc, #40]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	5ccb      	ldrb	r3, [r1, r3]
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8005db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x1d0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fc fe4a 	bl	8002a54 <HAL_InitTick>

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	080089f8 	.word	0x080089f8
 8005dd8:	20000004 	.word	0x20000004
 8005ddc:	20000008 	.word	0x20000008

08005de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de0:	b490      	push	{r4, r7}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xac>)
 8005de8:	1d3c      	adds	r4, r7, #4
 8005dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005df0:	f240 2301 	movw	r3, #513	; 0x201
 8005df4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e0a:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d002      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x40>
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCC_GetSysClockFreq+0x46>
 8005e1e:	e02b      	b.n	8005e78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e20:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e22:	623b      	str	r3, [r7, #32]
      break;
 8005e24:	e02b      	b.n	8005e7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	0c9b      	lsrs	r3, r3, #18
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	3328      	adds	r3, #40	; 0x28
 8005e30:	443b      	add	r3, r7
 8005e32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d012      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	0c5b      	lsrs	r3, r3, #17
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	3328      	adds	r3, #40	; 0x28
 8005e4e:	443b      	add	r3, r7
 8005e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4a0e      	ldr	r2, [pc, #56]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e5a:	fb03 f202 	mul.w	r2, r3, r2
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	e004      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	623b      	str	r3, [r7, #32]
      break;
 8005e76:	e002      	b.n	8005e7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e7a:	623b      	str	r3, [r7, #32]
      break;
 8005e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3728      	adds	r7, #40	; 0x28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc90      	pop	{r4, r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	080089d0 	.word	0x080089d0
 8005e90:	40021000 	.word	0x40021000
 8005e94:	007a1200 	.word	0x007a1200
 8005e98:	003d0900 	.word	0x003d0900

08005e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <HAL_RCC_GetHCLKFreq+0x10>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr
 8005eac:	20000004 	.word	0x20000004

08005eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005eb4:	f7ff fff2 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	4903      	ldr	r1, [pc, #12]	; (8005ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	08008a08 	.word	0x08008a08

08005ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005edc:	f7ff ffde 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	0adb      	lsrs	r3, r3, #11
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	4903      	ldr	r1, [pc, #12]	; (8005efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eee:	5ccb      	ldrb	r3, [r1, r3]
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	08008a08 	.word	0x08008a08

08005f00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	220f      	movs	r2, #15
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f10:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <HAL_RCC_GetClockConfig+0x58>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 0203 	and.w	r2, r3, #3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <HAL_RCC_GetClockConfig+0x58>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_RCC_GetClockConfig+0x58>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <HAL_RCC_GetClockConfig+0x58>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	08db      	lsrs	r3, r3, #3
 8005f3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetClockConfig+0x5c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0207 	and.w	r2, r3, #7
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40022000 	.word	0x40022000

08005f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <RCC_Delay+0x34>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <RCC_Delay+0x38>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	0a5b      	lsrs	r3, r3, #9
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f7c:	bf00      	nop
  }
  while (Delay --);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	60fa      	str	r2, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f9      	bne.n	8005f7c <RCC_Delay+0x1c>
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	20000004 	.word	0x20000004
 8005f98:	10624dd3 	.word	0x10624dd3

08005f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d07d      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fbc:	4b4f      	ldr	r3, [pc, #316]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10d      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc8:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4a4b      	ldr	r2, [pc, #300]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	61d3      	str	r3, [r2, #28]
 8005fd4:	4b49      	ldr	r3, [pc, #292]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe4:	4b46      	ldr	r3, [pc, #280]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d118      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff0:	4b43      	ldr	r3, [pc, #268]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a42      	ldr	r2, [pc, #264]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ffc:	f7fc fe30 	bl	8002c60 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	e008      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006004:	f7fc fe2c 	bl	8002c60 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e06d      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006016:	4b3a      	ldr	r3, [pc, #232]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006022:	4b36      	ldr	r3, [pc, #216]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d02e      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d027      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006040:	4b2e      	ldr	r3, [pc, #184]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006048:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800604a:	4b2e      	ldr	r3, [pc, #184]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006056:	4a29      	ldr	r2, [pc, #164]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006066:	f7fc fdfb 	bl	8002c60 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606c:	e00a      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606e:	f7fc fdf7 	bl	8002c60 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e036      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0ee      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4917      	ldr	r1, [pc, #92]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	490b      	ldr	r1, [pc, #44]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	4904      	ldr	r1, [pc, #16]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000
 8006100:	40007000 	.word	0x40007000
 8006104:	42420440 	.word	0x42420440

08006108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b08d      	sub	sp, #52	; 0x34
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006110:	4b58      	ldr	r3, [pc, #352]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006112:	f107 040c 	add.w	r4, r7, #12
 8006116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800611c:	f240 2301 	movw	r3, #513	; 0x201
 8006120:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
 8006126:	2300      	movs	r3, #0
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	2300      	movs	r3, #0
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b10      	cmp	r3, #16
 800613a:	d00a      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b10      	cmp	r3, #16
 8006140:	f200 808e 	bhi.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d049      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d079      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006150:	e086      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006152:	4b49      	ldr	r3, [pc, #292]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006158:	4b47      	ldr	r3, [pc, #284]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d07f      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	0c9b      	lsrs	r3, r3, #18
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	3330      	adds	r3, #48	; 0x30
 800616e:	443b      	add	r3, r7
 8006170:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006174:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d017      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006180:	4b3d      	ldr	r3, [pc, #244]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	0c5b      	lsrs	r3, r3, #17
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	3330      	adds	r3, #48	; 0x30
 800618c:	443b      	add	r3, r7
 800618e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800619e:	4a37      	ldr	r2, [pc, #220]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	4a33      	ldr	r2, [pc, #204]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c6:	d102      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061cc:	e04a      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061dc:	e042      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80061de:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ee:	d108      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006200:	e01f      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620c:	d109      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800621a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006220:	e00f      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622c:	d11c      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d016      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800623a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006240:	e012      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006242:	e011      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006244:	f7ff fe48 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	0b9b      	lsrs	r3, r3, #14
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	3301      	adds	r3, #1
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800625e:	e004      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006268:	bf00      	nop
    }
  }
  return (frequency);
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800626c:	4618      	mov	r0, r3
 800626e:	3734      	adds	r7, #52	; 0x34
 8006270:	46bd      	mov	sp, r7
 8006272:	bd90      	pop	{r4, r7, pc}
 8006274:	080089e0 	.word	0x080089e0
 8006278:	40021000 	.word	0x40021000
 800627c:	007a1200 	.word	0x007a1200
 8006280:	003d0900 	.word	0x003d0900
 8006284:	aaaaaaab 	.word	0xaaaaaaab

08006288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e041      	b.n	800631e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fc fb16 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 fc9e 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e03a      	b.n	80063b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_TIM_Base_Start_IT+0x98>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x58>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x58>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x58>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d111      	bne.n	80063a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d010      	beq.n	80063b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e007      	b.n	80063b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	40012c00 	.word	0x40012c00
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800

080063cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e041      	b.n	8006462 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f839 	bl	800646a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f000 fbfc 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_TIM_IC_Start_IT+0x1a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006492:	b2db      	uxtb	r3, r3
 8006494:	e013      	b.n	80064be <HAL_TIM_IC_Start_IT+0x42>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_IC_Start_IT+0x2a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	e00b      	b.n	80064be <HAL_TIM_IC_Start_IT+0x42>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_IC_Start_IT+0x3a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e003      	b.n	80064be <HAL_TIM_IC_Start_IT+0x42>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <HAL_TIM_IC_Start_IT+0x54>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e013      	b.n	80064f8 <HAL_TIM_IC_Start_IT+0x7c>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d104      	bne.n	80064e0 <HAL_TIM_IC_Start_IT+0x64>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e00b      	b.n	80064f8 <HAL_TIM_IC_Start_IT+0x7c>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d104      	bne.n	80064f0 <HAL_TIM_IC_Start_IT+0x74>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	e003      	b.n	80064f8 <HAL_TIM_IC_Start_IT+0x7c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d102      	bne.n	8006506 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d001      	beq.n	800650a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e0b3      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_TIM_IC_Start_IT+0x9e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006518:	e013      	b.n	8006542 <HAL_TIM_IC_Start_IT+0xc6>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b04      	cmp	r3, #4
 800651e:	d104      	bne.n	800652a <HAL_TIM_IC_Start_IT+0xae>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006528:	e00b      	b.n	8006542 <HAL_TIM_IC_Start_IT+0xc6>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d104      	bne.n	800653a <HAL_TIM_IC_Start_IT+0xbe>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006538:	e003      	b.n	8006542 <HAL_TIM_IC_Start_IT+0xc6>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <HAL_TIM_IC_Start_IT+0xd6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006550:	e013      	b.n	800657a <HAL_TIM_IC_Start_IT+0xfe>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b04      	cmp	r3, #4
 8006556:	d104      	bne.n	8006562 <HAL_TIM_IC_Start_IT+0xe6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006560:	e00b      	b.n	800657a <HAL_TIM_IC_Start_IT+0xfe>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b08      	cmp	r3, #8
 8006566:	d104      	bne.n	8006572 <HAL_TIM_IC_Start_IT+0xf6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006570:	e003      	b.n	800657a <HAL_TIM_IC_Start_IT+0xfe>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b0c      	cmp	r3, #12
 800657e:	d841      	bhi.n	8006604 <HAL_TIM_IC_Start_IT+0x188>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <HAL_TIM_IC_Start_IT+0x10c>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	080065bd 	.word	0x080065bd
 800658c:	08006605 	.word	0x08006605
 8006590:	08006605 	.word	0x08006605
 8006594:	08006605 	.word	0x08006605
 8006598:	080065cf 	.word	0x080065cf
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006605 	.word	0x08006605
 80065a4:	08006605 	.word	0x08006605
 80065a8:	080065e1 	.word	0x080065e1
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006605 	.word	0x08006605
 80065b8:	080065f3 	.word	0x080065f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0202 	orr.w	r2, r2, #2
 80065ca:	60da      	str	r2, [r3, #12]
      break;
 80065cc:	e01b      	b.n	8006606 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0204 	orr.w	r2, r2, #4
 80065dc:	60da      	str	r2, [r3, #12]
      break;
 80065de:	e012      	b.n	8006606 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0208 	orr.w	r2, r2, #8
 80065ee:	60da      	str	r2, [r3, #12]
      break;
 80065f0:	e009      	b.n	8006606 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0210 	orr.w	r2, r2, #16
 8006600:	60da      	str	r2, [r3, #12]
      break;
 8006602:	e000      	b.n	8006606 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006604:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2201      	movs	r2, #1
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fcff 	bl	8007012 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_TIM_IC_Start_IT+0x200>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_TIM_IC_Start_IT+0x1c0>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d009      	beq.n	800663c <HAL_TIM_IC_Start_IT+0x1c0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <HAL_TIM_IC_Start_IT+0x204>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIM_IC_Start_IT+0x1c0>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a13      	ldr	r2, [pc, #76]	; (8006684 <HAL_TIM_IC_Start_IT+0x208>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d111      	bne.n	8006660 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b06      	cmp	r3, #6
 800664c:	d010      	beq.n	8006670 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0201 	orr.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	e007      	b.n	8006670 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800

08006688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d122      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11b      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0202 	mvn.w	r2, #2
 80066b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fa fd04 	bl	80010d8 <HAL_TIM_IC_CaptureCallback>
 80066d0:	e005      	b.n	80066de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa7c 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa82 	bl	8006be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d122      	bne.n	8006738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d11b      	bne.n	8006738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0204 	mvn.w	r2, #4
 8006708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fa fcda 	bl	80010d8 <HAL_TIM_IC_CaptureCallback>
 8006724:	e005      	b.n	8006732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa52 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa58 	bl	8006be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b08      	cmp	r3, #8
 8006744:	d122      	bne.n	800678c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b08      	cmp	r3, #8
 8006752:	d11b      	bne.n	800678c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0208 	mvn.w	r2, #8
 800675c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2204      	movs	r2, #4
 8006762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fa fcb0 	bl	80010d8 <HAL_TIM_IC_CaptureCallback>
 8006778:	e005      	b.n	8006786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa28 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fa2e 	bl	8006be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b10      	cmp	r3, #16
 8006798:	d122      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d11b      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0210 	mvn.w	r2, #16
 80067b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2208      	movs	r2, #8
 80067b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fa fc86 	bl	80010d8 <HAL_TIM_IC_CaptureCallback>
 80067cc:	e005      	b.n	80067da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f9fe 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fa04 	bl	8006be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d10e      	bne.n	800680c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0201 	mvn.w	r2, #1
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fb ff38 	bl	800267c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006824:	2b80      	cmp	r3, #128	; 0x80
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc79 	bl	800712a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9c8 	bl	8006bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d10e      	bne.n	8006890 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b20      	cmp	r3, #32
 800687e:	d107      	bne.n	8006890 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0220 	mvn.w	r2, #32
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc44 	bl	8007118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e082      	b.n	80069b8 <HAL_TIM_IC_ConfigChannel+0x120>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11b      	bne.n	80068f8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6819      	ldr	r1, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f000 f9fc 	bl	8006ccc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 020c 	bic.w	r2, r2, #12
 80068e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6999      	ldr	r1, [r3, #24]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	619a      	str	r2, [r3, #24]
 80068f6:	e05a      	b.n	80069ae <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d11c      	bne.n	8006938 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6819      	ldr	r1, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f000 fa65 	bl	8006ddc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699a      	ldr	r2, [r3, #24]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006920:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6999      	ldr	r1, [r3, #24]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	021a      	lsls	r2, r3, #8
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	619a      	str	r2, [r3, #24]
 8006936:	e03a      	b.n	80069ae <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b08      	cmp	r3, #8
 800693c:	d11b      	bne.n	8006976 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6819      	ldr	r1, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f000 fab0 	bl	8006eb2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 020c 	bic.w	r2, r2, #12
 8006960:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69d9      	ldr	r1, [r3, #28]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	61da      	str	r2, [r3, #28]
 8006974:	e01b      	b.n	80069ae <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f000 facf 	bl	8006f28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006998:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69d9      	ldr	r1, [r3, #28]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	021a      	lsls	r2, r3, #8
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_ConfigClockSource+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e0b3      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x180>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a10:	d03e      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0xd0>
 8006a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a16:	f200 8087 	bhi.w	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	f000 8085 	beq.w	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d87f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a28:	2b70      	cmp	r3, #112	; 0x70
 8006a2a:	d01a      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0xa2>
 8006a2c:	2b70      	cmp	r3, #112	; 0x70
 8006a2e:	d87b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d050      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x116>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d877      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d03c      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0xf6>
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d873      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d058      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x136>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d86f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d064      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d86b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d060      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d867      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d05c      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d05a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a60:	e062      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6899      	ldr	r1, [r3, #8]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f000 faaf 	bl	8006fd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	609a      	str	r2, [r3, #8]
      break;
 8006a8e:	e04e      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6899      	ldr	r1, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f000 fa98 	bl	8006fd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab2:	609a      	str	r2, [r3, #8]
      break;
 8006ab4:	e03b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 f95c 	bl	8006d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2150      	movs	r1, #80	; 0x50
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fa66 	bl	8006fa0 <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e02b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 f9b6 	bl	8006e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2160      	movs	r1, #96	; 0x60
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fa56 	bl	8006fa0 <TIM_ITRx_SetConfig>
      break;
 8006af4:	e01b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f000 f93c 	bl	8006d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2140      	movs	r1, #64	; 0x40
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fa46 	bl	8006fa0 <TIM_ITRx_SetConfig>
      break;
 8006b14:	e00b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f000 fa3d 	bl	8006fa0 <TIM_ITRx_SetConfig>
        break;
 8006b26:	e002      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d831      	bhi.n	8006bc0 <HAL_TIM_ReadCapturedValue+0x78>
 8006b5c:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006b99 	.word	0x08006b99
 8006b68:	08006bc1 	.word	0x08006bc1
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006bc1 	.word	0x08006bc1
 8006b74:	08006ba3 	.word	0x08006ba3
 8006b78:	08006bc1 	.word	0x08006bc1
 8006b7c:	08006bc1 	.word	0x08006bc1
 8006b80:	08006bc1 	.word	0x08006bc1
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006bc1 	.word	0x08006bc1
 8006b8c:	08006bc1 	.word	0x08006bc1
 8006b90:	08006bc1 	.word	0x08006bc1
 8006b94:	08006bb7 	.word	0x08006bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9e:	60fb      	str	r3, [r7, #12]

      break;
 8006ba0:	e00f      	b.n	8006bc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	60fb      	str	r3, [r7, #12]

      break;
 8006baa:	e00a      	b.n	8006bc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	60fb      	str	r3, [r7, #12]

      break;
 8006bb4:	e005      	b.n	8006bc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	60fb      	str	r3, [r7, #12]

      break;
 8006bbe:	e000      	b.n	8006bc2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006bc0:	bf00      	nop
  }

  return tmpreg;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop

08006bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
	...

08006c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <TIM_Base_SetConfig+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_Base_SetConfig+0x30>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d007      	beq.n	8006c38 <TIM_Base_SetConfig+0x30>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <TIM_Base_SetConfig+0xbc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0x30>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a25      	ldr	r2, [pc, #148]	; (8006cc8 <TIM_Base_SetConfig+0xc0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d108      	bne.n	8006c4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <TIM_Base_SetConfig+0xb8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <TIM_Base_SetConfig+0x62>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d007      	beq.n	8006c6a <TIM_Base_SetConfig+0x62>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <TIM_Base_SetConfig+0xbc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_Base_SetConfig+0x62>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <TIM_Base_SetConfig+0xc0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d108      	bne.n	8006c7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a07      	ldr	r2, [pc, #28]	; (8006cc0 <TIM_Base_SetConfig+0xb8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d103      	bne.n	8006cb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	615a      	str	r2, [r3, #20]
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800

08006ccc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <TIM_TI1_SetConfig+0xa8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_TI1_SetConfig+0x46>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d007      	beq.n	8006d12 <TIM_TI1_SetConfig+0x46>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <TIM_TI1_SetConfig+0xac>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_TI1_SetConfig+0x46>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <TIM_TI1_SetConfig+0xb0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <TIM_TI1_SetConfig+0x4a>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <TIM_TI1_SetConfig+0x4c>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e003      	b.n	8006d36 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f023 030a 	bic.w	r3, r3, #10
 8006d50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f003 030a 	and.w	r3, r3, #10
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800

08006d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0201 	bic.w	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 030a 	bic.w	r3, r3, #10
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0210 	bic.w	r2, r3, #16
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	031b      	lsls	r3, r3, #12
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f023 0210 	bic.w	r2, r3, #16
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	031b      	lsls	r3, r3, #12
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	621a      	str	r2, [r3, #32]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b087      	sub	sp, #28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	031b      	lsls	r3, r3, #12
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	031b      	lsls	r3, r3, #12
 8006f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f043 0307 	orr.w	r3, r3, #7
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	609a      	str	r2, [r3, #8]
}
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr

08006fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	021a      	lsls	r2, r3, #8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr

08007012 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	2201      	movs	r2, #1
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	43db      	mvns	r3, r3
 8007034:	401a      	ands	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	fa01 f303 	lsl.w	r3, r1, r3
 800704a:	431a      	orrs	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr
	...

0800705c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007070:	2302      	movs	r3, #2
 8007072:	e046      	b.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a16      	ldr	r2, [pc, #88]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c0:	d009      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a12      	ldr	r2, [pc, #72]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a10      	ldr	r2, [pc, #64]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10c      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr
 800710c:	40012c00 	.word	0x40012c00
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800

08007118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e03f      	b.n	80071ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fb fc2a 	bl	80029bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	; 0x24
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800717e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f829 	bl	80071d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695a      	ldr	r2, [r3, #20]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007212:	f023 030c 	bic.w	r3, r3, #12
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	430b      	orrs	r3, r1
 800721e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <UART_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007240:	f7fe fe4a 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	e002      	b.n	800724e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007248:	f7fe fe32 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 800724c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009a      	lsls	r2, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	4a22      	ldr	r2, [pc, #136]	; (80072f0 <UART_SetConfig+0x118>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	0119      	lsls	r1, r3, #4
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009a      	lsls	r2, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	fbb2 f2f3 	udiv	r2, r2, r3
 8007284:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <UART_SetConfig+0x118>)
 8007286:	fba3 0302 	umull	r0, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2064      	movs	r0, #100	; 0x64
 800728e:	fb00 f303 	mul.w	r3, r0, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	3332      	adds	r3, #50	; 0x32
 8007298:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <UART_SetConfig+0x118>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a4:	4419      	add	r1, r3
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009a      	lsls	r2, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <UART_SetConfig+0x118>)
 80072be:	fba3 0302 	umull	r0, r3, r3, r2
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	2064      	movs	r0, #100	; 0x64
 80072c6:	fb00 f303 	mul.w	r3, r0, r3
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	3332      	adds	r3, #50	; 0x32
 80072d0:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <UART_SetConfig+0x118>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f003 020f 	and.w	r2, r3, #15
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	440a      	add	r2, r1
 80072e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40013800 	.word	0x40013800
 80072f0:	51eb851f 	.word	0x51eb851f

080072f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007306:	2b84      	cmp	r3, #132	; 0x84
 8007308:	d005      	beq.n	8007316 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800730a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	3303      	adds	r3, #3
 8007314:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007316:	68fb      	ldr	r3, [r7, #12]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr

08007322 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007326:	f000 fae7 	bl	80078f8 <vTaskStartScheduler>
  
  return osOK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd80      	pop	{r7, pc}

08007330 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	b089      	sub	sp, #36	; 0x24
 8007334:	af04      	add	r7, sp, #16
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d020      	beq.n	8007384 <osThreadCreate+0x54>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01c      	beq.n	8007384 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685c      	ldr	r4, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681d      	ldr	r5, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691e      	ldr	r6, [r3, #16]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ffc9 	bl	80072f4 <makeFreeRtosPriority>
 8007362:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800736c:	9202      	str	r2, [sp, #8]
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	9100      	str	r1, [sp, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	4632      	mov	r2, r6
 8007376:	4629      	mov	r1, r5
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f8e8 	bl	800754e <xTaskCreateStatic>
 800737e:	4603      	mov	r3, r0
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	e01c      	b.n	80073be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685c      	ldr	r4, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007390:	b29e      	uxth	r6, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff ffab 	bl	80072f4 <makeFreeRtosPriority>
 800739e:	4602      	mov	r2, r0
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	9200      	str	r2, [sp, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4632      	mov	r2, r6
 80073ac:	4629      	mov	r1, r5
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f929 	bl	8007606 <xTaskCreate>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d001      	beq.n	80073be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80073be:	68fb      	ldr	r3, [r7, #12]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <osDelay+0x16>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	e000      	b.n	80073e0 <osDelay+0x18>
 80073de:	2301      	movs	r3, #1
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fa55 	bl	8007890 <vTaskDelay>
  
  return osOK;
 80073e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f103 0208 	add.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f103 0208 	add.w	r2, r3, #8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f103 0208 	add.w	r2, r3, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr

0800742e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr

08007446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d103      	bne.n	80074ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	e00c      	b.n	80074c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3308      	adds	r3, #8
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e002      	b.n	80074ba <vListInsert+0x2e>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d2f6      	bcs.n	80074b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6892      	ldr	r2, [r2, #8]
 8007512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6852      	ldr	r2, [r2, #4]
 800751c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d103      	bne.n	8007530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	1e5a      	subs	r2, r3, #1
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800754e:	b580      	push	{r7, lr}
 8007550:	b08e      	sub	sp, #56	; 0x38
 8007552:	af04      	add	r7, sp, #16
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <xTaskCreateStatic+0x46>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61fb      	str	r3, [r7, #28]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007594:	23b4      	movs	r3, #180	; 0xb4
 8007596:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2bb4      	cmp	r3, #180	; 0xb4
 800759c:	d00a      	beq.n	80075b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	61bb      	str	r3, [r7, #24]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01e      	beq.n	80075f8 <xTaskCreateStatic+0xaa>
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01b      	beq.n	80075f8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075d2:	2300      	movs	r3, #0
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	9302      	str	r3, [sp, #8]
 80075da:	f107 0314 	add.w	r3, r7, #20
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f850 	bl	8007690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075f2:	f000 f8e3 	bl	80077bc <prvAddNewTaskToReadyList>
 80075f6:	e001      	b.n	80075fc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075fc:	697b      	ldr	r3, [r7, #20]
	}
 80075fe:	4618      	mov	r0, r3
 8007600:	3728      	adds	r7, #40	; 0x28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007606:	b580      	push	{r7, lr}
 8007608:	b08c      	sub	sp, #48	; 0x30
 800760a:	af04      	add	r7, sp, #16
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	603b      	str	r3, [r7, #0]
 8007612:	4613      	mov	r3, r2
 8007614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	88fb      	ldrh	r3, [r7, #6]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fe98 	bl	8008350 <pvPortMalloc>
 8007620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007628:	20b4      	movs	r0, #180	; 0xb4
 800762a:	f000 fe91 	bl	8008350 <pvPortMalloc>
 800762e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
 800763c:	e005      	b.n	800764a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f000 ff4a 	bl	80084d8 <vPortFree>
 8007644:	e001      	b.n	800764a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d017      	beq.n	8007680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	2300      	movs	r3, #0
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 f80e 	bl	8007690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007674:	69f8      	ldr	r0, [r7, #28]
 8007676:	f000 f8a1 	bl	80077bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800767a:	2301      	movs	r3, #1
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e002      	b.n	8007686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007686:	69bb      	ldr	r3, [r7, #24]
	}
 8007688:	4618      	mov	r0, r3
 800768a:	3720      	adds	r7, #32
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076a8:	3b01      	subs	r3, #1
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f023 0307 	bic.w	r3, r3, #7
 80076b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617b      	str	r3, [r7, #20]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	e012      	b.n	8007704 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	7819      	ldrb	r1, [r3, #0]
 80076e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	3334      	adds	r3, #52	; 0x34
 80076ee:	460a      	mov	r2, r1
 80076f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d006      	beq.n	800770c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3301      	adds	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d9e9      	bls.n	80076de <prvInitialiseNewTask+0x4e>
 800770a:	e000      	b.n	800770e <prvInitialiseNewTask+0x7e>
		{
			break;
 800770c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	2b06      	cmp	r3, #6
 800771a:	d901      	bls.n	8007720 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800771c:	2306      	movs	r3, #6
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800772a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	2200      	movs	r2, #0
 8007730:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff fe79 	bl	800742e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	3318      	adds	r3, #24
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fe74 	bl	800742e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	f1c3 0207 	rsb	r2, r3, #7
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	2200      	movs	r2, #0
 8007768:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	334c      	adds	r3, #76	; 0x4c
 8007770:	2260      	movs	r2, #96	; 0x60
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fff7 	bl	8008768 <memset>
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	4a0c      	ldr	r2, [pc, #48]	; (80077b0 <prvInitialiseNewTask+0x120>)
 800777e:	651a      	str	r2, [r3, #80]	; 0x50
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	4a0c      	ldr	r2, [pc, #48]	; (80077b4 <prvInitialiseNewTask+0x124>)
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	4a0b      	ldr	r2, [pc, #44]	; (80077b8 <prvInitialiseNewTask+0x128>)
 800778a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	69b8      	ldr	r0, [r7, #24]
 8007792:	f000 fc29 	bl	8007fe8 <pxPortInitialiseStack>
 8007796:	4602      	mov	r2, r0
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a8:	bf00      	nop
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	08008a30 	.word	0x08008a30
 80077b4:	08008a50 	.word	0x08008a50
 80077b8:	08008a10 	.word	0x08008a10

080077bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077c4:	f000 fd02 	bl	80081cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077c8:	4b2a      	ldr	r3, [pc, #168]	; (8007874 <prvAddNewTaskToReadyList+0xb8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a29      	ldr	r2, [pc, #164]	; (8007874 <prvAddNewTaskToReadyList+0xb8>)
 80077d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077d2:	4b29      	ldr	r3, [pc, #164]	; (8007878 <prvAddNewTaskToReadyList+0xbc>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077da:	4a27      	ldr	r2, [pc, #156]	; (8007878 <prvAddNewTaskToReadyList+0xbc>)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077e0:	4b24      	ldr	r3, [pc, #144]	; (8007874 <prvAddNewTaskToReadyList+0xb8>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d110      	bne.n	800780a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077e8:	f000 fad2 	bl	8007d90 <prvInitialiseTaskLists>
 80077ec:	e00d      	b.n	800780a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <prvAddNewTaskToReadyList+0xc0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <prvAddNewTaskToReadyList+0xbc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	429a      	cmp	r2, r3
 8007802:	d802      	bhi.n	800780a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007804:	4a1c      	ldr	r2, [pc, #112]	; (8007878 <prvAddNewTaskToReadyList+0xbc>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <prvAddNewTaskToReadyList+0xc4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3301      	adds	r3, #1
 8007810:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <prvAddNewTaskToReadyList+0xc4>)
 8007812:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	2201      	movs	r2, #1
 800781a:	409a      	lsls	r2, r3
 800781c:	4b19      	ldr	r3, [pc, #100]	; (8007884 <prvAddNewTaskToReadyList+0xc8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4313      	orrs	r3, r2
 8007822:	4a18      	ldr	r2, [pc, #96]	; (8007884 <prvAddNewTaskToReadyList+0xc8>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a15      	ldr	r2, [pc, #84]	; (8007888 <prvAddNewTaskToReadyList+0xcc>)
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7ff fe02 	bl	8007446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007842:	f000 fcf3 	bl	800822c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <prvAddNewTaskToReadyList+0xc0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00e      	beq.n	800786c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <prvAddNewTaskToReadyList+0xbc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	429a      	cmp	r2, r3
 800785a:	d207      	bcs.n	800786c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <prvAddNewTaskToReadyList+0xd0>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000720 	.word	0x20000720
 8007878:	20000620 	.word	0x20000620
 800787c:	2000072c 	.word	0x2000072c
 8007880:	2000073c 	.word	0x2000073c
 8007884:	20000728 	.word	0x20000728
 8007888:	20000624 	.word	0x20000624
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d017      	beq.n	80078d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <vTaskDelay+0x60>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <vTaskDelay+0x30>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	60bb      	str	r3, [r7, #8]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078c0:	f000 f884 	bl	80079cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb28 	bl	8007f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078cc:	f000 f88c 	bl	80079e8 <xTaskResumeAll>
 80078d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <vTaskDelay+0x64>)
 80078da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000748 	.word	0x20000748
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007906:	463a      	mov	r2, r7
 8007908:	1d39      	adds	r1, r7, #4
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	4618      	mov	r0, r3
 8007910:	f7f9 ff16 	bl	8001740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	9202      	str	r2, [sp, #8]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	2300      	movs	r3, #0
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2300      	movs	r3, #0
 8007924:	460a      	mov	r2, r1
 8007926:	4921      	ldr	r1, [pc, #132]	; (80079ac <vTaskStartScheduler+0xb4>)
 8007928:	4821      	ldr	r0, [pc, #132]	; (80079b0 <vTaskStartScheduler+0xb8>)
 800792a:	f7ff fe10 	bl	800754e <xTaskCreateStatic>
 800792e:	4603      	mov	r3, r0
 8007930:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <vTaskStartScheduler+0xbc>)
 8007932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007934:	4b1f      	ldr	r3, [pc, #124]	; (80079b4 <vTaskStartScheduler+0xbc>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	e001      	b.n	8007946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11b      	bne.n	8007984 <vTaskStartScheduler+0x8c>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	613b      	str	r3, [r7, #16]
}
 800795e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007960:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <vTaskStartScheduler+0xc0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	334c      	adds	r3, #76	; 0x4c
 8007966:	4a15      	ldr	r2, [pc, #84]	; (80079bc <vTaskStartScheduler+0xc4>)
 8007968:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800796a:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <vTaskStartScheduler+0xc8>)
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <vTaskStartScheduler+0xcc>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007978:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <vTaskStartScheduler+0xd0>)
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800797e:	f000 fbb3 	bl	80080e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007982:	e00e      	b.n	80079a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d10a      	bne.n	80079a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	60fb      	str	r3, [r7, #12]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <vTaskStartScheduler+0xa8>
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	080089f0 	.word	0x080089f0
 80079b0:	08007d61 	.word	0x08007d61
 80079b4:	20000744 	.word	0x20000744
 80079b8:	20000620 	.word	0x20000620
 80079bc:	20000014 	.word	0x20000014
 80079c0:	20000740 	.word	0x20000740
 80079c4:	2000072c 	.word	0x2000072c
 80079c8:	20000724 	.word	0x20000724

080079cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <vTaskSuspendAll+0x18>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a03      	ldr	r2, [pc, #12]	; (80079e4 <vTaskSuspendAll+0x18>)
 80079d8:	6013      	str	r3, [r2, #0]
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	20000748 	.word	0x20000748

080079e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079f6:	4b41      	ldr	r3, [pc, #260]	; (8007afc <xTaskResumeAll+0x114>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <xTaskResumeAll+0x2c>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a14:	f000 fbda 	bl	80081cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a18:	4b38      	ldr	r3, [pc, #224]	; (8007afc <xTaskResumeAll+0x114>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	4a37      	ldr	r2, [pc, #220]	; (8007afc <xTaskResumeAll+0x114>)
 8007a20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a22:	4b36      	ldr	r3, [pc, #216]	; (8007afc <xTaskResumeAll+0x114>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d161      	bne.n	8007aee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a2a:	4b35      	ldr	r3, [pc, #212]	; (8007b00 <xTaskResumeAll+0x118>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d05d      	beq.n	8007aee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a32:	e02e      	b.n	8007a92 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007a34:	4b33      	ldr	r3, [pc, #204]	; (8007b04 <xTaskResumeAll+0x11c>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3318      	adds	r3, #24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fd5b 	bl	80074fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fd56 	bl	80074fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	2201      	movs	r2, #1
 8007a56:	409a      	lsls	r2, r3
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <xTaskResumeAll+0x120>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	4a2a      	ldr	r2, [pc, #168]	; (8007b08 <xTaskResumeAll+0x120>)
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <xTaskResumeAll+0x124>)
 8007a70:	441a      	add	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f7ff fce4 	bl	8007446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a82:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <xTaskResumeAll+0x128>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d302      	bcc.n	8007a92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a8c:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <xTaskResumeAll+0x12c>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <xTaskResumeAll+0x11c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1cc      	bne.n	8007a34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aa0:	f000 fa18 	bl	8007ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <xTaskResumeAll+0x130>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ab0:	f000 f836 	bl	8007b20 <xTaskIncrementTick>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007aba:	4b16      	ldr	r3, [pc, #88]	; (8007b14 <xTaskResumeAll+0x12c>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f1      	bne.n	8007ab0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007acc:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <xTaskResumeAll+0x130>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <xTaskResumeAll+0x12c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ada:	2301      	movs	r3, #1
 8007adc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <xTaskResumeAll+0x134>)
 8007ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aee:	f000 fb9d 	bl	800822c <vPortExitCritical>

	return xAlreadyYielded;
 8007af2:	68bb      	ldr	r3, [r7, #8]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000748 	.word	0x20000748
 8007b00:	20000720 	.word	0x20000720
 8007b04:	200006e0 	.word	0x200006e0
 8007b08:	20000728 	.word	0x20000728
 8007b0c:	20000624 	.word	0x20000624
 8007b10:	20000620 	.word	0x20000620
 8007b14:	20000734 	.word	0x20000734
 8007b18:	20000730 	.word	0x20000730
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b2a:	4b51      	ldr	r3, [pc, #324]	; (8007c70 <xTaskIncrementTick+0x150>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 808d 	bne.w	8007c4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b34:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <xTaskIncrementTick+0x154>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b3c:	4a4d      	ldr	r2, [pc, #308]	; (8007c74 <xTaskIncrementTick+0x154>)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d120      	bne.n	8007b8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b48:	4b4b      	ldr	r3, [pc, #300]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	603b      	str	r3, [r7, #0]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <xTaskIncrementTick+0x46>
 8007b68:	4b43      	ldr	r3, [pc, #268]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <xTaskIncrementTick+0x15c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a41      	ldr	r2, [pc, #260]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	4a41      	ldr	r2, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x15c>)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	4b40      	ldr	r3, [pc, #256]	; (8007c80 <xTaskIncrementTick+0x160>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	4a3f      	ldr	r2, [pc, #252]	; (8007c80 <xTaskIncrementTick+0x160>)
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	f000 f9a5 	bl	8007ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b8a:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <xTaskIncrementTick+0x164>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d34d      	bcc.n	8007c30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b94:	4b38      	ldr	r3, [pc, #224]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <xTaskIncrementTick+0x82>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <xTaskIncrementTick+0x84>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba8:	4b36      	ldr	r3, [pc, #216]	; (8007c84 <xTaskIncrementTick+0x164>)
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bae:	601a      	str	r2, [r3, #0]
					break;
 8007bb0:	e03e      	b.n	8007c30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bb2:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d203      	bcs.n	8007bd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bca:	4a2e      	ldr	r2, [pc, #184]	; (8007c84 <xTaskIncrementTick+0x164>)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6013      	str	r3, [r2, #0]
						break;
 8007bd0:	e02e      	b.n	8007c30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fc90 	bl	80074fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff fc87 	bl	80074fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	409a      	lsls	r2, r3
 8007bf6:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <xTaskIncrementTick+0x168>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <xTaskIncrementTick+0x168>)
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	; (8007c8c <xTaskIncrementTick+0x16c>)
 8007c0e:	441a      	add	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7ff fc15 	bl	8007446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <xTaskIncrementTick+0x170>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3b4      	bcc.n	8007b94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2e:	e7b1      	b.n	8007b94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <xTaskIncrementTick+0x170>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4915      	ldr	r1, [pc, #84]	; (8007c8c <xTaskIncrementTick+0x16c>)
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d907      	bls.n	8007c58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e004      	b.n	8007c58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c4e:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <xTaskIncrementTick+0x174>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	4a0f      	ldr	r2, [pc, #60]	; (8007c94 <xTaskIncrementTick+0x174>)
 8007c56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <xTaskIncrementTick+0x178>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000748 	.word	0x20000748
 8007c74:	20000724 	.word	0x20000724
 8007c78:	200006d8 	.word	0x200006d8
 8007c7c:	200006dc 	.word	0x200006dc
 8007c80:	20000738 	.word	0x20000738
 8007c84:	20000740 	.word	0x20000740
 8007c88:	20000728 	.word	0x20000728
 8007c8c:	20000624 	.word	0x20000624
 8007c90:	20000620 	.word	0x20000620
 8007c94:	20000730 	.word	0x20000730
 8007c98:	20000734 	.word	0x20000734

08007c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca2:	4b29      	ldr	r3, [pc, #164]	; (8007d48 <vTaskSwitchContext+0xac>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007caa:	4b28      	ldr	r3, [pc, #160]	; (8007d4c <vTaskSwitchContext+0xb0>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb0:	e044      	b.n	8007d3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007cb2:	4b26      	ldr	r3, [pc, #152]	; (8007d4c <vTaskSwitchContext+0xb0>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <vTaskSwitchContext+0xb4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	fab3 f383 	clz	r3, r3
 8007cc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	f1c3 031f 	rsb	r3, r3, #31
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	4921      	ldr	r1, [pc, #132]	; (8007d54 <vTaskSwitchContext+0xb8>)
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	607b      	str	r3, [r7, #4]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <vTaskSwitchContext+0x5a>
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4a14      	ldr	r2, [pc, #80]	; (8007d54 <vTaskSwitchContext+0xb8>)
 8007d04:	4413      	add	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d104      	bne.n	8007d28 <vTaskSwitchContext+0x8c>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	605a      	str	r2, [r3, #4]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <vTaskSwitchContext+0xbc>)
 8007d30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <vTaskSwitchContext+0xbc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	334c      	adds	r3, #76	; 0x4c
 8007d38:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <vTaskSwitchContext+0xc0>)
 8007d3a:	6013      	str	r3, [r2, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	20000748 	.word	0x20000748
 8007d4c:	20000734 	.word	0x20000734
 8007d50:	20000728 	.word	0x20000728
 8007d54:	20000624 	.word	0x20000624
 8007d58:	20000620 	.word	0x20000620
 8007d5c:	20000014 	.word	0x20000014

08007d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d68:	f000 f852 	bl	8007e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvIdleTask+0x28>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d9f9      	bls.n	8007d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <prvIdleTask+0x2c>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d84:	e7f0      	b.n	8007d68 <prvIdleTask+0x8>
 8007d86:	bf00      	nop
 8007d88:	20000624 	.word	0x20000624
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e00c      	b.n	8007db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <prvInitialiseTaskLists+0x60>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fb20 	bl	80073f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d9ef      	bls.n	8007d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dbc:	480d      	ldr	r0, [pc, #52]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	f7ff fb17 	bl	80073f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	f7ff fb14 	bl	80073f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc8:	480c      	ldr	r0, [pc, #48]	; (8007dfc <prvInitialiseTaskLists+0x6c>)
 8007dca:	f7ff fb11 	bl	80073f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dce:	480c      	ldr	r0, [pc, #48]	; (8007e00 <prvInitialiseTaskLists+0x70>)
 8007dd0:	f7ff fb0e 	bl	80073f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd4:	480b      	ldr	r0, [pc, #44]	; (8007e04 <prvInitialiseTaskLists+0x74>)
 8007dd6:	f7ff fb0b 	bl	80073f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInitialiseTaskLists+0x78>)
 8007ddc:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <prvInitialiseTaskLists+0x7c>)
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000624 	.word	0x20000624
 8007df4:	200006b0 	.word	0x200006b0
 8007df8:	200006c4 	.word	0x200006c4
 8007dfc:	200006e0 	.word	0x200006e0
 8007e00:	200006f4 	.word	0x200006f4
 8007e04:	2000070c 	.word	0x2000070c
 8007e08:	200006d8 	.word	0x200006d8
 8007e0c:	200006dc 	.word	0x200006dc

08007e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e16:	e019      	b.n	8007e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e18:	f000 f9d8 	bl	80081cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff fb67 	bl	80074fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a0b      	ldr	r2, [pc, #44]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e42:	f000 f9f3 	bl	800822c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f810 	bl	8007e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e1      	bne.n	8007e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200006f4 	.word	0x200006f4
 8007e64:	20000720 	.word	0x20000720
 8007e68:	20000708 	.word	0x20000708

08007e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	334c      	adds	r3, #76	; 0x4c
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fc8b 	bl	8008794 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d108      	bne.n	8007e9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb23 	bl	80084d8 <vPortFree>
				vPortFree( pxTCB );
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb20 	bl	80084d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e98:	e018      	b.n	8007ecc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d103      	bne.n	8007eac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb17 	bl	80084d8 <vPortFree>
	}
 8007eaa:	e00f      	b.n	8007ecc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d00a      	beq.n	8007ecc <prvDeleteTCB+0x60>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <prvDeleteTCB+0x5e>
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <prvResetNextTaskUnblockTime+0x40>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <prvResetNextTaskUnblockTime+0x14>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <prvResetNextTaskUnblockTime+0x16>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eee:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <prvResetNextTaskUnblockTime+0x44>)
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ef6:	e008      	b.n	8007f0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <prvResetNextTaskUnblockTime+0x40>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4a04      	ldr	r2, [pc, #16]	; (8007f18 <prvResetNextTaskUnblockTime+0x44>)
 8007f08:	6013      	str	r3, [r2, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr
 8007f14:	200006d8 	.word	0x200006d8
 8007f18:	20000740 	.word	0x20000740

08007f1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f26:	4b29      	ldr	r3, [pc, #164]	; (8007fcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f2c:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3304      	adds	r3, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fae2 	bl	80074fc <uxListRemove>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	2201      	movs	r2, #1
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	43da      	mvns	r2, r3
 8007f4c:	4b21      	ldr	r3, [pc, #132]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4013      	ands	r3, r2
 8007f52:	4a20      	ldr	r2, [pc, #128]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d10a      	bne.n	8007f74 <prvAddCurrentTaskToDelayedList+0x58>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	481a      	ldr	r0, [pc, #104]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f6e:	f7ff fa6a 	bl	8007446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f72:	e026      	b.n	8007fc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f7c:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d209      	bcs.n	8007fa0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f8c:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7ff fa77 	bl	800748c <vListInsert>
}
 8007f9e:	e010      	b.n	8007fc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f7ff fa6d 	bl	800748c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d202      	bcs.n	8007fc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007fbc:	4a09      	ldr	r2, [pc, #36]	; (8007fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6013      	str	r3, [r2, #0]
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000724 	.word	0x20000724
 8007fd0:	20000620 	.word	0x20000620
 8007fd4:	20000728 	.word	0x20000728
 8007fd8:	2000070c 	.word	0x2000070c
 8007fdc:	200006dc 	.word	0x200006dc
 8007fe0:	200006d8 	.word	0x200006d8
 8007fe4:	20000740 	.word	0x20000740

08007fe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3b04      	subs	r3, #4
 8007ff8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3b04      	subs	r3, #4
 8008006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f023 0201 	bic.w	r2, r3, #1
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b04      	subs	r3, #4
 8008016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <pxPortInitialiseStack+0x54>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b14      	subs	r3, #20
 8008022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3b20      	subs	r3, #32
 800802e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008030:	68fb      	ldr	r3, [r7, #12]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	08008041 	.word	0x08008041

08008040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800804a:	4b12      	ldr	r3, [pc, #72]	; (8008094 <prvTaskExitError+0x54>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d00a      	beq.n	800806a <prvTaskExitError+0x2a>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <prvTaskExitError+0x28>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	60bb      	str	r3, [r7, #8]
}
 800807c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800807e:	bf00      	nop
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0fc      	beq.n	8008080 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008086:	bf00      	nop
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000010 	.word	0x20000010
	...

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <pxCurrentTCBConst2>)
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80080aa:	f380 8809 	msr	PSP, r0
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8811 	msr	BASEPRI, r0
 80080ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80080be:	4770      	bx	lr

080080c0 <pxCurrentTCBConst2>:
 80080c0:	20000620 	.word	0x20000620
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80080c8:	4806      	ldr	r0, [pc, #24]	; (80080e4 <prvPortStartFirstTask+0x1c>)
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f380 8808 	msr	MSP, r0
 80080d2:	b662      	cpsie	i
 80080d4:	b661      	cpsie	f
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	df00      	svc	0
 80080e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed08 	.word	0xe000ed08

080080e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080ee:	4b32      	ldr	r3, [pc, #200]	; (80081b8 <xPortStartScheduler+0xd0>)
 80080f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <xPortStartScheduler+0xd4>)
 8008114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008116:	4b2a      	ldr	r3, [pc, #168]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008118:	2207      	movs	r2, #7
 800811a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800811c:	e009      	b.n	8008132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800811e:	4b28      	ldr	r3, [pc, #160]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3b01      	subs	r3, #1
 8008124:	4a26      	ldr	r2, [pc, #152]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	b2db      	uxtb	r3, r3
 8008130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d0ef      	beq.n	800811e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800813e:	4b20      	ldr	r3, [pc, #128]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1c3 0307 	rsb	r3, r3, #7
 8008146:	2b04      	cmp	r3, #4
 8008148:	d00a      	beq.n	8008160 <xPortStartScheduler+0x78>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60bb      	str	r3, [r7, #8]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008160:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	4a16      	ldr	r2, [pc, #88]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008168:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800816a:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <xPortStartScheduler+0xd8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008172:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <xPortStartScheduler+0xd8>)
 8008174:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	b2da      	uxtb	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800817e:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <xPortStartScheduler+0xdc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <xPortStartScheduler+0xdc>)
 8008184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008188:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800818a:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <xPortStartScheduler+0xdc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a0d      	ldr	r2, [pc, #52]	; (80081c4 <xPortStartScheduler+0xdc>)
 8008190:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008194:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008196:	f000 f8b9 	bl	800830c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <xPortStartScheduler+0xe0>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081a0:	f7ff ff92 	bl	80080c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081a4:	f7ff fd7a 	bl	8007c9c <vTaskSwitchContext>
	prvTaskExitError();
 80081a8:	f7ff ff4a 	bl	8008040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	e000e400 	.word	0xe000e400
 80081bc:	2000074c 	.word	0x2000074c
 80081c0:	20000750 	.word	0x20000750
 80081c4:	e000ed20 	.word	0xe000ed20
 80081c8:	20000010 	.word	0x20000010

080081cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	607b      	str	r3, [r7, #4]
}
 80081e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081e6:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <vPortEnterCritical+0x58>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a0d      	ldr	r2, [pc, #52]	; (8008224 <vPortEnterCritical+0x58>)
 80081ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <vPortEnterCritical+0x58>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d10f      	bne.n	8008218 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <vPortEnterCritical+0x5c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <vPortEnterCritical+0x4c>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	603b      	str	r3, [r7, #0]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <vPortEnterCritical+0x4a>
	}
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000010 	.word	0x20000010
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008232:	4b11      	ldr	r3, [pc, #68]	; (8008278 <vPortExitCritical+0x4c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <vPortExitCritical+0x24>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	607b      	str	r3, [r7, #4]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <vPortExitCritical+0x4c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3b01      	subs	r3, #1
 8008256:	4a08      	ldr	r2, [pc, #32]	; (8008278 <vPortExitCritical+0x4c>)
 8008258:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <vPortExitCritical+0x4c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <vPortExitCritical+0x42>
 8008262:	2300      	movs	r3, #0
 8008264:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800826c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr
 8008278:	20000010 	.word	0x20000010
 800827c:	00000000 	.word	0x00000000

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <pxCurrentTCBConst>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008290:	6010      	str	r0, [r2, #0]
 8008292:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008296:	f04f 0050 	mov.w	r0, #80	; 0x50
 800829a:	f380 8811 	msr	BASEPRI, r0
 800829e:	f7ff fcfd 	bl	8007c9c <vTaskSwitchContext>
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8811 	msr	BASEPRI, r0
 80082aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082b6:	f380 8809 	msr	PSP, r0
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	4770      	bx	lr

080082c0 <pxCurrentTCBConst>:
 80082c0:	20000620 	.word	0x20000620
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
}
 80082e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082e2:	f7ff fc1d 	bl	8007b20 <xTaskIncrementTick>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <SysTick_Handler+0x40>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f383 8811 	msr	BASEPRI, r3
}
 80082fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <vPortSetupTimerInterrupt+0x30>)
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008316:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <vPortSetupTimerInterrupt+0x38>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a09      	ldr	r2, [pc, #36]	; (8008348 <vPortSetupTimerInterrupt+0x3c>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	099b      	lsrs	r3, r3, #6
 8008328:	4a08      	ldr	r2, [pc, #32]	; (800834c <vPortSetupTimerInterrupt+0x40>)
 800832a:	3b01      	subs	r3, #1
 800832c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800832e:	4b03      	ldr	r3, [pc, #12]	; (800833c <vPortSetupTimerInterrupt+0x30>)
 8008330:	2207      	movs	r2, #7
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr
 800833c:	e000e010 	.word	0xe000e010
 8008340:	e000e018 	.word	0xe000e018
 8008344:	20000004 	.word	0x20000004
 8008348:	10624dd3 	.word	0x10624dd3
 800834c:	e000e014 	.word	0xe000e014

08008350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800835c:	f7ff fb36 	bl	80079cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008360:	4b58      	ldr	r3, [pc, #352]	; (80084c4 <pvPortMalloc+0x174>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008368:	f000 f910 	bl	800858c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800836c:	4b56      	ldr	r3, [pc, #344]	; (80084c8 <pvPortMalloc+0x178>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4013      	ands	r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	f040 808e 	bne.w	8008496 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01d      	beq.n	80083bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008380:	2208      	movs	r2, #8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4413      	add	r3, r2
 8008386:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	2b00      	cmp	r3, #0
 8008390:	d014      	beq.n	80083bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f023 0307 	bic.w	r3, r3, #7
 8008398:	3308      	adds	r3, #8
 800839a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <pvPortMalloc+0x6c>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	617b      	str	r3, [r7, #20]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d069      	beq.n	8008496 <pvPortMalloc+0x146>
 80083c2:	4b42      	ldr	r3, [pc, #264]	; (80084cc <pvPortMalloc+0x17c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d864      	bhi.n	8008496 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083cc:	4b40      	ldr	r3, [pc, #256]	; (80084d0 <pvPortMalloc+0x180>)
 80083ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083d0:	4b3f      	ldr	r3, [pc, #252]	; (80084d0 <pvPortMalloc+0x180>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083d6:	e004      	b.n	80083e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d903      	bls.n	80083f4 <pvPortMalloc+0xa4>
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1f1      	bne.n	80083d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083f4:	4b33      	ldr	r3, [pc, #204]	; (80084c4 <pvPortMalloc+0x174>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d04b      	beq.n	8008496 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2208      	movs	r2, #8
 8008404:	4413      	add	r3, r2
 8008406:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	2308      	movs	r3, #8
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	429a      	cmp	r2, r3
 800841e:	d91f      	bls.n	8008460 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <pvPortMalloc+0xf8>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	613b      	str	r3, [r7, #16]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800845a:	69b8      	ldr	r0, [r7, #24]
 800845c:	f000 f8f8 	bl	8008650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008460:	4b1a      	ldr	r3, [pc, #104]	; (80084cc <pvPortMalloc+0x17c>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	4a18      	ldr	r2, [pc, #96]	; (80084cc <pvPortMalloc+0x17c>)
 800846c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800846e:	4b17      	ldr	r3, [pc, #92]	; (80084cc <pvPortMalloc+0x17c>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <pvPortMalloc+0x184>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d203      	bcs.n	8008482 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <pvPortMalloc+0x17c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <pvPortMalloc+0x184>)
 8008480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <pvPortMalloc+0x178>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	431a      	orrs	r2, r3
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008496:	f7ff faa7 	bl	80079e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <pvPortMalloc+0x16a>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <pvPortMalloc+0x168>
	return pvReturn;
 80084ba:	69fb      	ldr	r3, [r7, #28]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3728      	adds	r7, #40	; 0x28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	2000135c 	.word	0x2000135c
 80084c8:	20001368 	.word	0x20001368
 80084cc:	20001360 	.word	0x20001360
 80084d0:	20001354 	.word	0x20001354
 80084d4:	20001364 	.word	0x20001364

080084d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d048      	beq.n	800857c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084ea:	2308      	movs	r3, #8
 80084ec:	425b      	negs	r3, r3
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	4b21      	ldr	r3, [pc, #132]	; (8008584 <vPortFree+0xac>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <vPortFree+0x44>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <vPortFree+0x62>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	60bb      	str	r3, [r7, #8]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	4b11      	ldr	r3, [pc, #68]	; (8008584 <vPortFree+0xac>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4013      	ands	r3, r2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d019      	beq.n	800857c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d115      	bne.n	800857c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <vPortFree+0xac>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	43db      	mvns	r3, r3
 800855a:	401a      	ands	r2, r3
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008560:	f7ff fa34 	bl	80079cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	4b07      	ldr	r3, [pc, #28]	; (8008588 <vPortFree+0xb0>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4413      	add	r3, r2
 800856e:	4a06      	ldr	r2, [pc, #24]	; (8008588 <vPortFree+0xb0>)
 8008570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008572:	6938      	ldr	r0, [r7, #16]
 8008574:	f000 f86c 	bl	8008650 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008578:	f7ff fa36 	bl	80079e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800857c:	bf00      	nop
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20001368 	.word	0x20001368
 8008588:	20001360 	.word	0x20001360

0800858c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008598:	4b27      	ldr	r3, [pc, #156]	; (8008638 <prvHeapInit+0xac>)
 800859a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00c      	beq.n	80085c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3307      	adds	r3, #7
 80085aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	4a1f      	ldr	r2, [pc, #124]	; (8008638 <prvHeapInit+0xac>)
 80085bc:	4413      	add	r3, r2
 80085be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085c4:	4a1d      	ldr	r2, [pc, #116]	; (800863c <prvHeapInit+0xb0>)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <prvHeapInit+0xb0>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085d8:	2208      	movs	r2, #8
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f023 0307 	bic.w	r3, r3, #7
 80085e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4a15      	ldr	r2, [pc, #84]	; (8008640 <prvHeapInit+0xb4>)
 80085ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <prvHeapInit+0xb4>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <prvHeapInit+0xb4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800860c:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <prvHeapInit+0xb4>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <prvHeapInit+0xb8>)
 800861a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4a09      	ldr	r2, [pc, #36]	; (8008648 <prvHeapInit+0xbc>)
 8008622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008624:	4b09      	ldr	r3, [pc, #36]	; (800864c <prvHeapInit+0xc0>)
 8008626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800862a:	601a      	str	r2, [r3, #0]
}
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20000754 	.word	0x20000754
 800863c:	20001354 	.word	0x20001354
 8008640:	2000135c 	.word	0x2000135c
 8008644:	20001364 	.word	0x20001364
 8008648:	20001360 	.word	0x20001360
 800864c:	20001368 	.word	0x20001368

08008650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008658:	4b27      	ldr	r3, [pc, #156]	; (80086f8 <prvInsertBlockIntoFreeList+0xa8>)
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	e002      	b.n	8008664 <prvInsertBlockIntoFreeList+0x14>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	429a      	cmp	r2, r3
 800866c:	d8f7      	bhi.n	800865e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	4413      	add	r3, r2
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d108      	bne.n	8008692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	441a      	add	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	441a      	add	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d118      	bne.n	80086d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <prvInsertBlockIntoFreeList+0xac>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d00d      	beq.n	80086ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	441a      	add	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e008      	b.n	80086e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <prvInsertBlockIntoFreeList+0xac>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e003      	b.n	80086e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d002      	beq.n	80086ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr
 80086f8:	20001354 	.word	0x20001354
 80086fc:	2000135c 	.word	0x2000135c

08008700 <__libc_init_array>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	2600      	movs	r6, #0
 8008704:	4d0c      	ldr	r5, [pc, #48]	; (8008738 <__libc_init_array+0x38>)
 8008706:	4c0d      	ldr	r4, [pc, #52]	; (800873c <__libc_init_array+0x3c>)
 8008708:	1b64      	subs	r4, r4, r5
 800870a:	10a4      	asrs	r4, r4, #2
 800870c:	42a6      	cmp	r6, r4
 800870e:	d109      	bne.n	8008724 <__libc_init_array+0x24>
 8008710:	f000 f8f0 	bl	80088f4 <_init>
 8008714:	2600      	movs	r6, #0
 8008716:	4d0a      	ldr	r5, [pc, #40]	; (8008740 <__libc_init_array+0x40>)
 8008718:	4c0a      	ldr	r4, [pc, #40]	; (8008744 <__libc_init_array+0x44>)
 800871a:	1b64      	subs	r4, r4, r5
 800871c:	10a4      	asrs	r4, r4, #2
 800871e:	42a6      	cmp	r6, r4
 8008720:	d105      	bne.n	800872e <__libc_init_array+0x2e>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	f855 3b04 	ldr.w	r3, [r5], #4
 8008728:	4798      	blx	r3
 800872a:	3601      	adds	r6, #1
 800872c:	e7ee      	b.n	800870c <__libc_init_array+0xc>
 800872e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008732:	4798      	blx	r3
 8008734:	3601      	adds	r6, #1
 8008736:	e7f2      	b.n	800871e <__libc_init_array+0x1e>
 8008738:	08008a70 	.word	0x08008a70
 800873c:	08008a70 	.word	0x08008a70
 8008740:	08008a70 	.word	0x08008a70
 8008744:	08008a74 	.word	0x08008a74

08008748 <__retarget_lock_acquire_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_release_recursive>:
 800874a:	4770      	bx	lr

0800874c <memcpy>:
 800874c:	440a      	add	r2, r1
 800874e:	4291      	cmp	r1, r2
 8008750:	f100 33ff 	add.w	r3, r0, #4294967295
 8008754:	d100      	bne.n	8008758 <memcpy+0xc>
 8008756:	4770      	bx	lr
 8008758:	b510      	push	{r4, lr}
 800875a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800875e:	4291      	cmp	r1, r2
 8008760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008764:	d1f9      	bne.n	800875a <memcpy+0xe>
 8008766:	bd10      	pop	{r4, pc}

08008768 <memset>:
 8008768:	4603      	mov	r3, r0
 800876a:	4402      	add	r2, r0
 800876c:	4293      	cmp	r3, r2
 800876e:	d100      	bne.n	8008772 <memset+0xa>
 8008770:	4770      	bx	lr
 8008772:	f803 1b01 	strb.w	r1, [r3], #1
 8008776:	e7f9      	b.n	800876c <memset+0x4>

08008778 <cleanup_glue>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	460c      	mov	r4, r1
 800877c:	6809      	ldr	r1, [r1, #0]
 800877e:	4605      	mov	r5, r0
 8008780:	b109      	cbz	r1, 8008786 <cleanup_glue+0xe>
 8008782:	f7ff fff9 	bl	8008778 <cleanup_glue>
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800878e:	f000 b869 	b.w	8008864 <_free_r>
	...

08008794 <_reclaim_reent>:
 8008794:	4b2c      	ldr	r3, [pc, #176]	; (8008848 <_reclaim_reent+0xb4>)
 8008796:	b570      	push	{r4, r5, r6, lr}
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4604      	mov	r4, r0
 800879c:	4283      	cmp	r3, r0
 800879e:	d051      	beq.n	8008844 <_reclaim_reent+0xb0>
 80087a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80087a2:	b143      	cbz	r3, 80087b6 <_reclaim_reent+0x22>
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d14a      	bne.n	8008840 <_reclaim_reent+0xac>
 80087aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	b111      	cbz	r1, 80087b6 <_reclaim_reent+0x22>
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 f857 	bl	8008864 <_free_r>
 80087b6:	6961      	ldr	r1, [r4, #20]
 80087b8:	b111      	cbz	r1, 80087c0 <_reclaim_reent+0x2c>
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 f852 	bl	8008864 <_free_r>
 80087c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80087c2:	b111      	cbz	r1, 80087ca <_reclaim_reent+0x36>
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 f84d 	bl	8008864 <_free_r>
 80087ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087cc:	b111      	cbz	r1, 80087d4 <_reclaim_reent+0x40>
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 f848 	bl	8008864 <_free_r>
 80087d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80087d6:	b111      	cbz	r1, 80087de <_reclaim_reent+0x4a>
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 f843 	bl	8008864 <_free_r>
 80087de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80087e0:	b111      	cbz	r1, 80087e8 <_reclaim_reent+0x54>
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 f83e 	bl	8008864 <_free_r>
 80087e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80087ea:	b111      	cbz	r1, 80087f2 <_reclaim_reent+0x5e>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 f839 	bl	8008864 <_free_r>
 80087f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087f4:	b111      	cbz	r1, 80087fc <_reclaim_reent+0x68>
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 f834 	bl	8008864 <_free_r>
 80087fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fe:	b111      	cbz	r1, 8008806 <_reclaim_reent+0x72>
 8008800:	4620      	mov	r0, r4
 8008802:	f000 f82f 	bl	8008864 <_free_r>
 8008806:	69a3      	ldr	r3, [r4, #24]
 8008808:	b1e3      	cbz	r3, 8008844 <_reclaim_reent+0xb0>
 800880a:	4620      	mov	r0, r4
 800880c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800880e:	4798      	blx	r3
 8008810:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008812:	b1b9      	cbz	r1, 8008844 <_reclaim_reent+0xb0>
 8008814:	4620      	mov	r0, r4
 8008816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800881a:	f7ff bfad 	b.w	8008778 <cleanup_glue>
 800881e:	5949      	ldr	r1, [r1, r5]
 8008820:	b941      	cbnz	r1, 8008834 <_reclaim_reent+0xa0>
 8008822:	3504      	adds	r5, #4
 8008824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008826:	2d80      	cmp	r5, #128	; 0x80
 8008828:	68d9      	ldr	r1, [r3, #12]
 800882a:	d1f8      	bne.n	800881e <_reclaim_reent+0x8a>
 800882c:	4620      	mov	r0, r4
 800882e:	f000 f819 	bl	8008864 <_free_r>
 8008832:	e7ba      	b.n	80087aa <_reclaim_reent+0x16>
 8008834:	680e      	ldr	r6, [r1, #0]
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f814 	bl	8008864 <_free_r>
 800883c:	4631      	mov	r1, r6
 800883e:	e7ef      	b.n	8008820 <_reclaim_reent+0x8c>
 8008840:	2500      	movs	r5, #0
 8008842:	e7ef      	b.n	8008824 <_reclaim_reent+0x90>
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	bf00      	nop
 8008848:	20000014 	.word	0x20000014

0800884c <__malloc_lock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_lock+0x8>)
 800884e:	f7ff bf7b 	b.w	8008748 <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	2000136c 	.word	0x2000136c

08008858 <__malloc_unlock>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__malloc_unlock+0x8>)
 800885a:	f7ff bf76 	b.w	800874a <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	2000136c 	.word	0x2000136c

08008864 <_free_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4605      	mov	r5, r0
 8008868:	2900      	cmp	r1, #0
 800886a:	d040      	beq.n	80088ee <_free_r+0x8a>
 800886c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008870:	1f0c      	subs	r4, r1, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	bfb8      	it	lt
 8008876:	18e4      	addlt	r4, r4, r3
 8008878:	f7ff ffe8 	bl	800884c <__malloc_lock>
 800887c:	4a1c      	ldr	r2, [pc, #112]	; (80088f0 <_free_r+0x8c>)
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	b933      	cbnz	r3, 8008890 <_free_r+0x2c>
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	6014      	str	r4, [r2, #0]
 8008886:	4628      	mov	r0, r5
 8008888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800888c:	f7ff bfe4 	b.w	8008858 <__malloc_unlock>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d908      	bls.n	80088a6 <_free_r+0x42>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	1821      	adds	r1, r4, r0
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1809      	addeq	r1, r1, r0
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	e7ed      	b.n	8008882 <_free_r+0x1e>
 80088a6:	461a      	mov	r2, r3
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b10b      	cbz	r3, 80088b0 <_free_r+0x4c>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d9fa      	bls.n	80088a6 <_free_r+0x42>
 80088b0:	6811      	ldr	r1, [r2, #0]
 80088b2:	1850      	adds	r0, r2, r1
 80088b4:	42a0      	cmp	r0, r4
 80088b6:	d10b      	bne.n	80088d0 <_free_r+0x6c>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	4401      	add	r1, r0
 80088bc:	1850      	adds	r0, r2, r1
 80088be:	4283      	cmp	r3, r0
 80088c0:	6011      	str	r1, [r2, #0]
 80088c2:	d1e0      	bne.n	8008886 <_free_r+0x22>
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4401      	add	r1, r0
 80088ca:	6011      	str	r1, [r2, #0]
 80088cc:	6053      	str	r3, [r2, #4]
 80088ce:	e7da      	b.n	8008886 <_free_r+0x22>
 80088d0:	d902      	bls.n	80088d8 <_free_r+0x74>
 80088d2:	230c      	movs	r3, #12
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	e7d6      	b.n	8008886 <_free_r+0x22>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	1821      	adds	r1, r4, r0
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf01      	itttt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	1809      	addeq	r1, r1, r0
 80088e6:	6021      	streq	r1, [r4, #0]
 80088e8:	6063      	str	r3, [r4, #4]
 80088ea:	6054      	str	r4, [r2, #4]
 80088ec:	e7cb      	b.n	8008886 <_free_r+0x22>
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20001370 	.word	0x20001370

080088f4 <_init>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	bf00      	nop
 80088f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fa:	bc08      	pop	{r3}
 80088fc:	469e      	mov	lr, r3
 80088fe:	4770      	bx	lr

08008900 <_fini>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr
