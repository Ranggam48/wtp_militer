
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c8  080062c8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080062c8  080062c8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062c8  080062c8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080062d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000080  0800634c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200012f4  0800634c  000212f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014928  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e8  00000000  00000000  000349cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000381b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  000393f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3d7  00000000  00000000  0003a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d61  00000000  00000000  000548d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a66  00000000  00000000  00068638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc09e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  000fc0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08006184 	.word	0x08006184

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08006184 	.word	0x08006184

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__gesf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpsf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__lesf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpsf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpsf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a06:	d011      	beq.n	8000a2c <__cmpsf2+0x40>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a0e:	bf18      	it	ne
 8000a10:	ea90 0f01 	teqne	r0, r1
 8000a14:	bf58      	it	pl
 8000a16:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a1a:	bf88      	it	hi
 8000a1c:	17c8      	asrhi	r0, r1, #31
 8000a1e:	bf38      	it	cc
 8000a20:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a24:	bf18      	it	ne
 8000a26:	f040 0001 	orrne.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a30:	d102      	bne.n	8000a38 <__cmpsf2+0x4c>
 8000a32:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a36:	d105      	bne.n	8000a44 <__cmpsf2+0x58>
 8000a38:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a3c:	d1e4      	bne.n	8000a08 <__cmpsf2+0x1c>
 8000a3e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a42:	d0e1      	beq.n	8000a08 <__cmpsf2+0x1c>
 8000a44:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_cfrcmple>:
 8000a4c:	4684      	mov	ip, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4661      	mov	r1, ip
 8000a52:	e7ff      	b.n	8000a54 <__aeabi_cfcmpeq>

08000a54 <__aeabi_cfcmpeq>:
 8000a54:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a56:	f7ff ffc9 	bl	80009ec <__cmpsf2>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	bf48      	it	mi
 8000a5e:	f110 0f00 	cmnmi.w	r0, #0
 8000a62:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a64 <__aeabi_fcmpeq>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff fff4 	bl	8000a54 <__aeabi_cfcmpeq>
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2001      	moveq	r0, #1
 8000a70:	2000      	movne	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_fcmplt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffea 	bl	8000a54 <__aeabi_cfcmpeq>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fcmple>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffe0 	bl	8000a54 <__aeabi_cfcmpeq>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_fcmpge>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffd2 	bl	8000a4c <__aeabi_cfrcmple>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fcmpgt>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffc8 	bl	8000a4c <__aeabi_cfrcmple>
 8000abc:	bf34      	ite	cc
 8000abe:	2001      	movcc	r0, #1
 8000ac0:	2000      	movcs	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <GetPage>:
/* STM32F103 have 128 PAGES (Page 0 to Page 127) of 1 KB each. This makes up 128 KB Flash Memory
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	for (int indx = 0; indx < 128; indx++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e016      	b.n	8000b04 <GetPage+0x3c>
		if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1))))
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000adc:	3301      	adds	r3, #1
 8000ade:	029b      	lsls	r3, r3, #10
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d20b      	bcs.n	8000afe <GetPage+0x36>
				&& (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) {
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000aec:	029b      	lsls	r3, r3, #10
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d304      	bcc.n	8000afe <GetPage+0x36>
			return (0x08000000 + FLASH_PAGE_SIZE * indx);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000afa:	029b      	lsls	r3, r3, #10
 8000afc:	e006      	b.n	8000b0c <GetPage+0x44>
	for (int indx = 0; indx < 128; indx++) {
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b7f      	cmp	r3, #127	; 0x7f
 8000b08:	dde5      	ble.n	8000ad6 <GetPage+0xe>
		}
	}

	return 0;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
	...

08000b18 <Flash_Write_Data>:
	float float_variable = thing.a;
	return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data,
		uint16_t numberofwords) {
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	4613      	mov	r3, r2
 8000b24:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000b2a:	f002 f939 	bl	8002da0 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff ffca 	bl	8000ac8 <GetPage>
 8000b34:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000b42:	69f8      	ldr	r0, [r7, #28]
 8000b44:	f7ff ffc0 	bl	8000ac8 <GetPage>
 8000b48:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <Flash_Write_Data+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000b50:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <Flash_Write_Data+0xb4>)
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	0a9b      	lsrs	r3, r3, #10
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <Flash_Write_Data+0xb4>)
 8000b62:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4818      	ldr	r0, [pc, #96]	; (8000bcc <Flash_Write_Data+0xb4>)
 8000b6c:	f002 fa0a 	bl	8002f84 <HAL_FLASHEx_Erase>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d01f      	beq.n	8000bb6 <Flash_Write_Data+0x9e>
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 8000b76:	f002 f949 	bl	8002e0c <HAL_FLASH_GetError>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	e022      	b.n	8000bc4 <Flash_Write_Data+0xac>

	/* Program the user Flash area word by word*/

	while (sofar < numberofwords) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
				Data[sofar]) == HAL_OK) {
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
 8000b88:	2200      	movs	r2, #0
 8000b8a:	461c      	mov	r4, r3
 8000b8c:	4615      	mov	r5, r2
 8000b8e:	4622      	mov	r2, r4
 8000b90:	462b      	mov	r3, r5
 8000b92:	68f9      	ldr	r1, [r7, #12]
 8000b94:	2002      	movs	r0, #2
 8000b96:	f002 f893 	bl	8002cc0 <HAL_FLASH_Program>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d106      	bne.n	8000bae <Flash_Write_Data+0x96>
			StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	60fb      	str	r3, [r7, #12]
			sofar++;
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	3301      	adds	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
 8000bac:	e003      	b.n	8000bb6 <Flash_Write_Data+0x9e>
		} else {
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 8000bae:	f002 f92d 	bl	8002e0c <HAL_FLASH_GetError>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	e006      	b.n	8000bc4 <Flash_Write_Data+0xac>
	while (sofar < numberofwords) {
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dbdf      	blt.n	8000b7e <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000bbe:	f002 f915 	bl	8002dec <HAL_FLASH_Lock>

	return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	2000009c 	.word	0x2000009c

08000bd0 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	80fb      	strh	r3, [r7, #6]
	while (1) {

		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3304      	adds	r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	80fa      	strh	r2, [r7, #6]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d000      	beq.n	8000bfe <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000bfc:	e7ef      	b.n	8000bde <Flash_Read_Data+0xe>
			break;
 8000bfe:	bf00      	nop
	}
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	0000      	movs	r0, r0
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f1b      	ldrb	r3, [r3, #28]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f040 8082 	bne.w	8000d26 <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (ultrasonic1.Is_First_Captured == 0) // if the first value is not captured
 8000c22:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c24:	7b1b      	ldrb	r3, [r3, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11a      	bne.n	8000c60 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f003 fcb3 	bl	8004598 <HAL_TIM_ReadCapturedValue>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c36:	6013      	str	r3, [r2, #0]
			TIM_CHANNEL_1); // read the first value
			ultrasonic1.Is_First_Captured = 1; // set the first captured as true
 8000c38:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6a1a      	ldr	r2, [r3, #32]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 020a 	bic.w	r2, r2, #10
 8000c4c:	621a      	str	r2, [r3, #32]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a1a      	ldr	r2, [r3, #32]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f042 0202 	orr.w	r2, r2, #2
 8000c5c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 8000c5e:	e062      	b.n	8000d26 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured == 1) // if the first is already captured
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c62:	7b1b      	ldrb	r3, [r3, #12]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d15e      	bne.n	8000d26 <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8000c68:	2100      	movs	r1, #0
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f003 fc94 	bl	8004598 <HAL_TIM_ReadCapturedValue>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c74:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1) {
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d907      	bls.n	8000c9a <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
						- ultrasonic1.IC_Val1;
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	1ad3      	subs	r3, r2, r3
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c96:	6093      	str	r3, [r2, #8]
 8000c98:	e00f      	b.n	8000cba <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2) {
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <HAL_TIM_IC_CaptureCallback+0xaa>
						+ ultrasonic1.IC_Val2;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ca8:	685a      	ldr	r2, [r3, #4]
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cac:	681b      	ldr	r3, [r3, #0]
						+ ultrasonic1.IC_Val2;
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000cb4:	33ff      	adds	r3, #255	; 0xff
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 8000cb6:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cb8:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034 / 2;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fb88 	bl	80003d4 <__aeabi_ui2d>
 8000cc4:	a31a      	add	r3, pc, #104	; (adr r3, 8000d30 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fbfd 	bl	80004c8 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cde:	f7ff fd1d 	bl	800071c <__aeabi_ddiv>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f7ff fe27 	bl	800093c <__aeabi_d2f>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cf2:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6a1a      	ldr	r2, [r3, #32]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 020a 	bic.w	r2, r2, #10
 8000d08:	621a      	str	r2, [r3, #32]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a12      	ldr	r2, [r2, #32]
 8000d14:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0202 	bic.w	r2, r2, #2
 8000d24:	60da      	str	r2, [r3, #12]
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	b020c49c 	.word	0xb020c49c
 8000d34:	3fa16872 	.word	0x3fa16872
 8000d38:	200000ac 	.word	0x200000ac
 8000d3c:	200004a0 	.word	0x200004a0

08000d40 <HAL_CAN_RxFifo1MsgPendingCallback>:
int canSetMode;

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000d4a:	4a34      	ldr	r2, [pc, #208]	; (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f001 fb7c 	bl	800244c <HAL_CAN_GetRxMessage>

	if (RxHeader.IDE == CAN_ID_EXT) {
 8000d54:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d156      	bne.n	8000e0a <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
		uint8_t id = RxHeader.ExtId & 0xFF;
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	73fb      	strb	r3, [r7, #15]
		uint8_t cmd = RxHeader.ExtId >> 8;
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	73bb      	strb	r3, [r7, #14]

		if (id == 255 || id == selfID) {
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	2bff      	cmp	r3, #255	; 0xff
 8000d6e:	d004      	beq.n	8000d7a <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 8000d70:	7bfa      	ldrb	r2, [r7, #15]
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d147      	bne.n	8000e0a <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
			switch (cmd) {
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	2b23      	cmp	r3, #35	; 0x23
 8000d7e:	d006      	beq.n	8000d8e <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 8000d80:	2b23      	cmp	r3, #35	; 0x23
 8000d82:	dc45      	bgt.n	8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d016      	beq.n	8000db6 <HAL_CAN_RxFifo1MsgPendingCallback+0x76>
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d021      	beq.n	8000dd0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>

		}
	}
	//}

}
 8000d8c:	e040      	b.n	8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				canSetMode = -1;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	601a      	str	r2, [r3, #0]
				ind = 0;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
				canSetMode = buffer_get_int32(RxData, &ind);
 8000d9c:	4922      	ldr	r1, [pc, #136]	; (8000e28 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000da0:	f000 f886 	bl	8000eb0 <buffer_get_int32>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000da8:	6013      	str	r3, [r2, #0]
				setMode(canSetMode);
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9fc 	bl	80011ac <setMode>
				break;
 8000db4:	e02c      	b.n	8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000dbe:	18d0      	adds	r0, r2, r3
 8000dc0:	491b      	ldr	r1, [pc, #108]	; (8000e30 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f005 f907 	bl	8005fdc <memcpy>
				break;
 8000dce:	e01f      	b.n	8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				rxbuf_ind = (unsigned int) RxData[0] << 8;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000dd8:	6013      	str	r3, [r2, #0]
				rxbuf_ind |= RxData[1];
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000de8:	6013      	str	r3, [r2, #0]
				if (rxbuf_ind < RX_BUFFER_SIZE) {
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b3f      	cmp	r3, #63	; 0x3f
 8000df0:	d80d      	bhi.n	8000e0e <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
					memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000df8:	1898      	adds	r0, r3, r2
 8000dfa:	490f      	ldr	r1, [pc, #60]	; (8000e38 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	3b02      	subs	r3, #2
 8000e02:	461a      	mov	r2, r3
 8000e04:	f005 f8ea 	bl	8005fdc <memcpy>
				break;
 8000e08:	e001      	b.n	8000e0e <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
		}
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				break;
 8000e0e:	bf00      	nop
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200000fc 	.word	0x200000fc
 8000e1c:	200000c0 	.word	0x200000c0
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000150 	.word	0x20000150
 8000e28:	20000108 	.word	0x20000108
 8000e2c:	2000010c 	.word	0x2000010c
 8000e30:	200000fd 	.word	0x200000fd
 8000e34:	2000014c 	.word	0x2000014c
 8000e38:	200000fe 	.word	0x200000fe

08000e3c <buffer_append_int32>:

void buffer_append_int32(uint8_t *buffer, int32_t number, int32_t *index) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1618      	asrs	r0, r3, #24
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1c59      	adds	r1, r3, #1
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6011      	str	r1, [r2, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b2c2      	uxtb	r2, r0
 8000e5e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1418      	asrs	r0, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1c59      	adds	r1, r3, #1
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6011      	str	r1, [r2, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	b2c2      	uxtb	r2, r0
 8000e76:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1218      	asrs	r0, r3, #8
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1c59      	adds	r1, r3, #1
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6011      	str	r1, [r2, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2c2      	uxtb	r2, r0
 8000e8e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6011      	str	r1, [r2, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	int32_t res = ((uint32_t) buffer[*index]) << 24
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	061a      	lsls	r2, r3, #24
			| ((uint32_t) buffer[*index + 1]) << 16
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	041b      	lsls	r3, r3, #16
 8000ed6:	431a      	orrs	r2, r3
			| ((uint32_t) buffer[*index + 2]) << 8
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3302      	adds	r3, #2
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	4313      	orrs	r3, r2
			| ((uint32_t) buffer[*index + 3]);
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	3203      	adds	r2, #3
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	440a      	add	r2, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	4313      	orrs	r3, r2
	int32_t res = ((uint32_t) buffer[*index]) << 24
 8000ef6:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1d1a      	adds	r2, r3, #4
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	601a      	str	r2, [r3, #0]
	return res;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
	...

08000f10 <comm_can_transmit_eid>:

void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d901      	bls.n	8000f28 <comm_can_transmit_eid+0x18>
		len = 8;
 8000f24:	2308      	movs	r3, #8
 8000f26:	71fb      	strb	r3, [r7, #7]
	}

	TxHeader.IDE = CAN_ID_EXT;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <comm_can_transmit_eid+0x50>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = id;
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <comm_can_transmit_eid+0x50>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <comm_can_transmit_eid+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = len;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <comm_can_transmit_eid+0x50>)
 8000f3e:	6113      	str	r3, [r2, #16]
	memcpy(TxData, data, len);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <comm_can_transmit_eid+0x54>)
 8000f48:	f005 f848 	bl	8005fdc <memcpy>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <comm_can_transmit_eid+0x58>)
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <comm_can_transmit_eid+0x54>)
 8000f50:	4903      	ldr	r1, [pc, #12]	; (8000f60 <comm_can_transmit_eid+0x50>)
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <comm_can_transmit_eid+0x5c>)
 8000f54:	f001 f9a0 	bl	8002298 <HAL_CAN_AddTxMessage>
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200000dc 	.word	0x200000dc
 8000f64:	200000f4 	.word	0x200000f4
 8000f68:	20000104 	.word	0x20000104
 8000f6c:	20000478 	.word	0x20000478

08000f70 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) (duty * 100.0), &send_index);
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f7ff fa49 	bl	8000418 <__aeabi_f2d>
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <comm_can_set_duty+0x58>)
 8000f8c:	f7ff fa9c 	bl	80004c8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fca8 	bl	80008ec <__aeabi_d2iz>
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff48 	bl	8000e3c <buffer_append_int32>
	comm_can_transmit_eid(
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	f107 0108 	add.w	r1, r7, #8
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ffa8 	bl	8000f10 <comm_can_transmit_eid>
			controller_id | ((uint32_t) CAN_PACKET_SET_DUTY_GEN << 8), buffer,
			send_index);
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40590000 	.word	0x40590000

08000fcc <comm_can_db_signal>:

void comm_can_db_signal(uint8_t controller_id, int command) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) command, &send_index);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff28 	bl	8000e3c <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t) 35 << 8), buffer,
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	f107 0108 	add.w	r1, r7, #8
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff88 	bl	8000f10 <comm_can_transmit_eid>
			send_index);
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a06      	ldr	r2, [pc, #24]	; (8001030 <vApplicationGetIdleTaskMemory+0x28>)
 8001018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <vApplicationGetIdleTaskMemory+0x2c>)
 800101e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000154 	.word	0x20000154
 8001034:	20000208 	.word	0x20000208

08001038 <delay_s>:

	return value * 60 * 1000;

}

void delay_s(uint8_t value) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	osDelay(value * 1000);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fe07 	bl	8004c60 <osDelay>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <backWash>:

void backWash(void) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0

	Control_Valve_1(OFF);
 8001060:	2001      	movs	r0, #1
 8001062:	f000 fa93 	bl	800158c <Control_Valve_1>
	//osDelay(1000); // delay menghabiskan air pada selang
	Pump_1(OFF);
 8001066:	2001      	movs	r0, #1
 8001068:	f000 face 	bl	8001608 <Pump_1>
	delay_s(2); // delay menghabiskan air pada selang
 800106c:	2002      	movs	r0, #2
 800106e:	f7ff ffe3 	bl	8001038 <delay_s>
	Ozone(OFF);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fab6 	bl	80015e4 <Ozone>
	Compressor(OFF);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 fa99 	bl	80015b0 <Compressor>
	//Pump_2(OFF);

	delay_s(10); // delay untuk menunggu air pada rdf kosong
 800107e:	200a      	movs	r0, #10
 8001080:	f7ff ffda 	bl	8001038 <delay_s>
	comm_can_set_duty(0, 0);
 8001084:	f04f 0100 	mov.w	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ff71 	bl	8000f70 <comm_can_set_duty>
	delay_s(10); // delay agar motor tidak menyentak
 800108e:	200a      	movs	r0, #10
 8001090:	f7ff ffd2 	bl	8001038 <delay_s>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 8001094:	2100      	movs	r1, #0
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff98 	bl	8000fcc <comm_can_db_signal>
	comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 800109c:	2104      	movs	r1, #4
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff94 	bl	8000fcc <comm_can_db_signal>
	delay_s(3);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f7ff ffc7 	bl	8001038 <delay_s>
	Pump_3(ON); // pompa backwash menyala
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 fad0 	bl	8001650 <Pump_3>

	uint8_t i = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]

	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80010b4:	e006      	b.n	80010c4 <backWash+0x6a>
		osDelay(1000);
 80010b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ba:	f003 fdd1 	bl	8004c60 <osDelay>
		i++;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3301      	adds	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	d9f5      	bls.n	80010b6 <backWash+0x5c>
	}
	Pump_3(OFF); //pompa backwash mati
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fac0 	bl	8001650 <Pump_3>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80010d0:	2100      	movs	r1, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff ff7a 	bl	8000fcc <comm_can_db_signal>
	delay_s(5);
 80010d8:	2005      	movs	r0, #5
 80010da:	f7ff ffad 	bl	8001038 <delay_s>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <process2>:
//	flowCheck = 0;
//	buffMode[0] = 0;
//}

void process2(void) // opsi sensor water level
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	//timerEAB[0] = 1800;

	if (!level) {
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <process2+0xb0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d109      	bne.n	8001108 <process2+0x20>
		mode = 0;
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <process2+0xb4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
		return;
 80010fa:	e04c      	b.n	8001196 <process2+0xae>
	}

	while (timerEAB > 0) {
		EAB(ON);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fa1d 	bl	800153c <EAB>
		osDelay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f003 fdac 	bl	8004c60 <osDelay>
	while (timerEAB > 0) {
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <process2+0xb8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f5      	bne.n	80010fc <process2+0x14>
	}

	EAB(OFF);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fa13 	bl	800153c <EAB>
	delay_s(30);
 8001116:	201e      	movs	r0, #30
 8001118:	f7ff ff8e 	bl	8001038 <delay_s>

	label2:

	comm_can_set_duty(0, 90);
 800111c:	4921      	ldr	r1, [pc, #132]	; (80011a4 <process2+0xbc>)
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff ff26 	bl	8000f70 <comm_can_set_duty>
	comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 8001124:	2102      	movs	r1, #2
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ff50 	bl	8000fcc <comm_can_db_signal>

	delay_s(15); //delay untuk menunggu rdf putaran penuh
 800112c:	200f      	movs	r0, #15
 800112e:	f7ff ff83 	bl	8001038 <delay_s>

	Control_Valve_1(ON);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 fa2a 	bl	800158c <Control_Valve_1>
	Pump_1(ON);
 8001138:	2000      	movs	r0, #0
 800113a:	f000 fa65 	bl	8001608 <Pump_1>
	Ozone(ON);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 fa50 	bl	80015e4 <Ozone>
	Compressor(ON);
 8001144:	2000      	movs	r0, #0
 8001146:	f000 fa33 	bl	80015b0 <Compressor>
	Pump_2(ON);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fa6e 	bl	800162c <Pump_2>

	delay_s(30);
 8001150:	201e      	movs	r0, #30
 8001152:	f7ff ff71 	bl	8001038 <delay_s>

	while (1) {

		osDelay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115a:	f003 fd81 	bl	8004c60 <osDelay>
		if (flow < 4.0 // || !level
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <process2+0xc0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fc86 	bl	8000a78 <__aeabi_fcmplt>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <process2+0x9a>
				) {
			backWash();
 8001172:	f7ff ff72 	bl	800105a <backWash>
			break;
 8001176:	bf00      	nop
		}
	}

	if (level) {
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <process2+0xb0>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <process2+0x9c>
 8001180:	e7cc      	b.n	800111c <process2+0x34>
		osDelay(1000);
 8001182:	e7e8      	b.n	8001156 <process2+0x6e>
		goto label2;
		// kembali ke awal
	}

	Pump_2(OFF);
 8001184:	2001      	movs	r0, #1
 8001186:	f000 fa51 	bl	800162c <Pump_2>
	mode = 0;
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <process2+0xb4>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
	timerEAB = 120;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <process2+0xb8>)
 8001192:	2278      	movs	r2, #120	; 0x78
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000414 	.word	0x20000414
 800119c:	20000418 	.word	0x20000418
 80011a0:	20000004 	.word	0x20000004
 80011a4:	42b40000 	.word	0x42b40000
 80011a8:	20000470 	.word	0x20000470

080011ac <setMode>:
//	}
//	buffMode[0] = 0;
//	timerEAB[0] = 1800;
//}

void setMode(uint32_t value) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	dataWrite[0] = value;
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <setMode+0x20>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
	Flash_Write_Data(ADDRESS, (uint32_t*) dataWrite, 10);
 80011ba:	220a      	movs	r2, #10
 80011bc:	4903      	ldr	r1, [pc, #12]	; (80011cc <setMode+0x20>)
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <setMode+0x24>)
 80011c0:	f7ff fcaa 	bl	8000b18 <Flash_Write_Data>

}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000420 	.word	0x20000420
 80011d0:	0801f840 	.word	0x0801f840

080011d4 <setTimerEAB>:

void setTimerEAB(uint32_t value) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	dataWrite[1] = value;
 80011dc:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <setTimerEAB+0x20>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6053      	str	r3, [r2, #4]
	Flash_Write_Data(ADDRESS, (uint32_t*) dataWrite, 10);
 80011e2:	220a      	movs	r2, #10
 80011e4:	4903      	ldr	r1, [pc, #12]	; (80011f4 <setTimerEAB+0x20>)
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <setTimerEAB+0x24>)
 80011e8:	f7ff fc96 	bl	8000b18 <Flash_Write_Data>

}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000420 	.word	0x20000420
 80011f8:	0801f840 	.word	0x0801f840

080011fc <Task2>:

}

// kumpulan task freeRTOS

void Task2(void const *argument) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <Task2+0x4c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d011      	beq.n	8001230 <Task2+0x34>
				{

		}

		else if (mode == 2) // mode 2 untuk opsi menggunakan sensor water level
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <Task2+0x4c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d102      	bne.n	800121a <Task2+0x1e>
				{
			process2();
 8001214:	f7ff ff68 	bl	80010e8 <process2>
 8001218:	e00a      	b.n	8001230 <Task2+0x34>
		}

		else if (mode == 3) // mode 2 untuk opsi menggunakan sensor water level
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <Task2+0x4c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d006      	beq.n	8001230 <Task2+0x34>
				{
			//process3();
		}

		else if (mode == 0) {
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <Task2+0x4c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <Task2+0x34>
			timerEAB = 120;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <Task2+0x50>)
 800122c:	2278      	movs	r2, #120	; 0x78
 800122e:	601a      	str	r2, [r3, #0]
		}
		osDelay(1000);
 8001230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001234:	f003 fd14 	bl	8004c60 <osDelay>
		coba++;
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <Task2+0x54>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <Task2+0x54>)
 8001242:	701a      	strb	r2, [r3, #0]
		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001244:	e7de      	b.n	8001204 <Task2+0x8>
 8001246:	bf00      	nop
 8001248:	20000418 	.word	0x20000418
 800124c:	20000004 	.word	0x20000004
 8001250:	20000416 	.word	0x20000416

08001254 <TaskTimer>:

	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (mode == 2 || mode == 1 || mode == 3) { // jika mode bernilai 1/2/3 maka timer eab akan mulai hitung mundur
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <TaskTimer+0x80>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d007      	beq.n	8001274 <TaskTimer+0x20>
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <TaskTimer+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d003      	beq.n	8001274 <TaskTimer+0x20>
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <TaskTimer+0x80>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d105      	bne.n	8001280 <TaskTimer+0x2c>
			timerEAB--;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <TaskTimer+0x84>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <TaskTimer+0x84>)
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e008      	b.n	8001292 <TaskTimer+0x3e>
		}

		else if (flagBackwash == 1) {
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <TaskTimer+0x88>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d104      	bne.n	8001292 <TaskTimer+0x3e>
			timerBackwash--;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <TaskTimer+0x8c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3b01      	subs	r3, #1
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <TaskTimer+0x8c>)
 8001290:	6013      	str	r3, [r2, #0]
		}
		flow = signalCounter / 7.5;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <TaskTimer+0x90>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8ac 	bl	80003f4 <__aeabi_i2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <TaskTimer+0x94>)
 80012a2:	f7ff fa3b 	bl	800071c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fb45 	bl	800093c <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <TaskTimer+0x98>)
 80012b6:	6013      	str	r3, [r2, #0]
		signalCounter = 0;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <TaskTimer+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

		osDelay(1000);
 80012be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c2:	f003 fccd 	bl	8004c60 <osDelay>
		setTimerEAB(timerEAB);
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <TaskTimer+0x84>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff82 	bl	80011d4 <setTimerEAB>
		if (mode == 2 || mode == 1 || mode == 3) { // jika mode bernilai 1/2/3 maka timer eab akan mulai hitung mundur
 80012d0:	e7c4      	b.n	800125c <TaskTimer+0x8>
 80012d2:	bf00      	nop
 80012d4:	20000418 	.word	0x20000418
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000415 	.word	0x20000415
 80012e0:	2000041c 	.word	0x2000041c
 80012e4:	20000474 	.word	0x20000474
 80012e8:	401e0000 	.word	0x401e0000
 80012ec:	20000470 	.word	0x20000470

080012f0 <TaskFlow>:

	}
	/* USER CODE END 5 */
}

void TaskFlow(void const *argument) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80012f8:	2120      	movs	r1, #32
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <TaskFlow+0x54>)
 80012fc:	f002 f86e 	bl	80033dc <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	73bb      	strb	r3, [r7, #14]
	uint8_t stateSensorPrv = -1;
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001308:	2120      	movs	r1, #32
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <TaskFlow+0x54>)
 800130c:	f002 f866 	bl	80033dc <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	73bb      	strb	r3, [r7, #14]
		level = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001314:	2110      	movs	r1, #16
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <TaskFlow+0x54>)
 8001318:	f002 f860 	bl	80033dc <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <TaskFlow+0x58>)
 8001322:	701a      	strb	r2, [r3, #0]
		if (stateSensorNow != stateSensorPrv) {
 8001324:	7bba      	ldrb	r2, [r7, #14]
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	429a      	cmp	r2, r3
 800132a:	d006      	beq.n	800133a <TaskFlow+0x4a>
			signalCounter++;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <TaskFlow+0x5c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <TaskFlow+0x5c>)
 8001334:	6013      	str	r3, [r2, #0]
			stateSensorPrv = stateSensorNow;
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 800133a:	2001      	movs	r0, #1
 800133c:	f003 fc90 	bl	8004c60 <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001340:	e7e2      	b.n	8001308 <TaskFlow+0x18>
 8001342:	bf00      	nop
 8001344:	40010c00 	.word	0x40010c00
 8001348:	20000414 	.word	0x20000414
 800134c:	20000474 	.word	0x20000474

08001350 <fungsiInit>:
	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0

	gpio_init();
 8001356:	f000 f85f 	bl	8001418 <gpio_init>

	Flash_Read_Data(ADDRESS, dataRead, 10); // membaca eeprom timerEAB
 800135a:	220a      	movs	r2, #10
 800135c:	4924      	ldr	r1, [pc, #144]	; (80013f0 <fungsiInit+0xa0>)
 800135e:	4825      	ldr	r0, [pc, #148]	; (80013f4 <fungsiInit+0xa4>)
 8001360:	f7ff fc36 	bl	8000bd0 <Flash_Read_Data>

	mode = dataRead[0];
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <fungsiInit+0xa0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <fungsiInit+0xa8>)
 800136a:	6013      	str	r3, [r2, #0]
	timerEAB = dataRead[1];
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <fungsiInit+0xa0>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <fungsiInit+0xac>)
 8001372:	6013      	str	r3, [r2, #0]

	mode = 3;
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <fungsiInit+0xa8>)
 8001376:	2203      	movs	r2, #3
 8001378:	601a      	str	r2, [r3, #0]

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 128);
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <fungsiInit+0xb0>)
 800137c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001380:	461d      	mov	r5, r3
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 800138e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fc17 	bl	8004bc8 <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <fungsiInit+0xb4>)
 800139e:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 128);
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <fungsiInit+0xb8>)
 80013a2:	f107 0420 	add.w	r4, r7, #32
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fc04 	bl	8004bc8 <osThreadCreate>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <fungsiInit+0xbc>)
 80013c4:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskFlow, TaskFlow, osPriorityBelowNormal, 0, 128);
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <fungsiInit+0xc0>)
 80013c8:	1d3c      	adds	r4, r7, #4
 80013ca:	461d      	mov	r5, r3
 80013cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFlowHandle = osThreadCreate(osThread(TaskFlow), NULL);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fbf3 	bl	8004bc8 <osThreadCreate>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <fungsiInit+0xc4>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3758      	adds	r7, #88	; 0x58
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdb0      	pop	{r4, r5, r7, pc}
 80013f0:	20000448 	.word	0x20000448
 80013f4:	0801f840 	.word	0x0801f840
 80013f8:	20000418 	.word	0x20000418
 80013fc:	20000004 	.word	0x20000004
 8001400:	080061bc 	.word	0x080061bc
 8001404:	2000040c 	.word	0x2000040c
 8001408:	080061d8 	.word	0x080061d8
 800140c:	20000408 	.word	0x20000408
 8001410:	080061f4 	.word	0x080061f4
 8001414:	20000410 	.word	0x20000410

08001418 <gpio_init>:
 *      Author: rangga
 */
#include <gpio.h>
#include "stm32f1xx.h"

void gpio_init(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <gpio_init+0x114>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a3e      	ldr	r2, [pc, #248]	; (800152c <gpio_init+0x114>)
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <gpio_init+0x114>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <gpio_init+0x114>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a38      	ldr	r2, [pc, #224]	; (800152c <gpio_init+0x114>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b36      	ldr	r3, [pc, #216]	; (800152c <gpio_init+0x114>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b33      	ldr	r3, [pc, #204]	; (800152c <gpio_init+0x114>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <gpio_init+0x114>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <gpio_init+0x114>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <gpio_init+0x114>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a2c      	ldr	r2, [pc, #176]	; (800152c <gpio_init+0x114>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <gpio_init+0x114>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800148c:	2201      	movs	r2, #1
 800148e:	f647 4103 	movw	r1, #31747	; 0x7c03
 8001492:	4827      	ldr	r0, [pc, #156]	; (8001530 <gpio_init+0x118>)
 8001494:	f001 ffb9 	bl	800340a <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
	GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <gpio_init+0x11c>)
 80014a0:	f001 ffb3 	bl	800340a <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
	GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	4823      	ldr	r0, [pc, #140]	; (8001538 <gpio_init+0x120>)
 80014ac:	f001 ffad 	bl	800340a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 80014b0:	f647 4303 	movw	r3, #31747	; 0x7c03
 80014b4:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <gpio_init+0x118>)
 80014ca:	f001 fe03 	bl	80030d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 80014ce:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80014d2:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	4813      	ldr	r0, [pc, #76]	; (8001534 <gpio_init+0x11c>)
 80014e8:	f001 fdf4 	bl	80030d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <gpio_init+0x120>)
 8001506:	f001 fde5 	bl	80030d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_4;
 800150a:	2330      	movs	r3, #48	; 0x30
 800150c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <gpio_init+0x118>)
 800151e:	f001 fdd9 	bl	80030d4 <HAL_GPIO_Init>
//
//	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010800 	.word	0x40010800
 8001538:	40011000 	.word	0x40011000

0800153c <EAB>:

void EAB(uint8_t value) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, value);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	461a      	mov	r2, r3
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <EAB+0x48>)
 8001550:	f001 ff5b 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, value);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	461a      	mov	r2, r3
 8001558:	2102      	movs	r1, #2
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <EAB+0x4c>)
 800155c:	f001 ff55 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	461a      	mov	r2, r3
 8001564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <EAB+0x4c>)
 800156a:	f001 ff4e 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	461a      	mov	r2, r3
 8001572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <EAB+0x4c>)
 8001578:	f001 ff47 	bl	800340a <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010800 	.word	0x40010800
 8001588:	40010c00 	.word	0x40010c00

0800158c <Control_Valve_1>:

void Control_Valve_1(uint8_t value) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, value);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	461a      	mov	r2, r3
 800159a:	2101      	movs	r1, #1
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <Control_Valve_1+0x20>)
 800159e:	f001 ff34 	bl	800340a <HAL_GPIO_WritePin>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <Compressor>:

void Control_Valve_5(uint8_t value) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, value);
}

void Compressor(uint8_t value) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	461a      	mov	r2, r3
 80015be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <Compressor+0x30>)
 80015c4:	f001 ff21 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <Compressor+0x30>)
 80015d2:	f001 ff1a 	bl	800340a <HAL_GPIO_WritePin>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <Ozone>:

void Ozone(uint8_t value) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <Ozone+0x20>)
 80015f8:	f001 ff07 	bl	800340a <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40010c00 	.word	0x40010c00

08001608 <Pump_1>:

void Pump_1(uint8_t value) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, value);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	461a      	mov	r2, r3
 8001616:	2108      	movs	r1, #8
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <Pump_1+0x20>)
 800161a:	f001 fef6 	bl	800340a <HAL_GPIO_WritePin>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40010800 	.word	0x40010800

0800162c <Pump_2>:

void Pump_2(uint8_t value) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, value);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	461a      	mov	r2, r3
 800163a:	2104      	movs	r1, #4
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <Pump_2+0x20>)
 800163e:	f001 fee4 	bl	800340a <HAL_GPIO_WritePin>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010800 	.word	0x40010800

08001650 <Pump_3>:

void Pump_3(uint8_t value) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	461a      	mov	r2, r3
 800165e:	2102      	movs	r1, #2
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <Pump_3+0x20>)
 8001662:	f001 fed2 	bl	800340a <HAL_GPIO_WritePin>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010800 	.word	0x40010800

08001674 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800167a:	f000 fbd3 	bl	8001e24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800167e:	f000 f823 	bl	80016c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001682:	f000 f981 	bl	8001988 <MX_GPIO_Init>
	MX_CAN_Init();
 8001686:	f000 f865 	bl	8001754 <MX_CAN_Init>
	MX_TIM2_Init();
 800168a:	f000 f8bb 	bl	8001804 <MX_TIM2_Init>
	MX_TIM3_Init();
 800168e:	f000 f92d 	bl	80018ec <MX_TIM3_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	fungsiInit();
 8001692:	f7ff fe5d 	bl	8001350 <fungsiInit>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <main+0x4c>)
 8001698:	1d3c      	adds	r4, r7, #4
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fa8b 	bl	8004bc8 <osThreadCreate>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <main+0x50>)
 80016b6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80016b8:	f003 fa7f 	bl	8004bba <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80016bc:	e7fe      	b.n	80016bc <main+0x48>
 80016be:	bf00      	nop
 80016c0:	0800621c 	.word	0x0800621c
 80016c4:	20000530 	.word	0x20000530

080016c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	; 0x40
 80016cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2228      	movs	r2, #40	; 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fc8e 	bl	8005ff8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fc:	2302      	movs	r3, #2
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001706:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4618      	mov	r0, r3
 8001712:	f001 feab 	bl	800346c <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x58>
		Error_Handler();
 800171c:	f000 f9ca 	bl	8001ab4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001730:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f002 f918 	bl	8003970 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x82>
		Error_Handler();
 8001746:	f000 f9b5 	bl	8001ab4 <Error_Handler>
	}
}
 800174a:	bf00      	nop
 800174c:	3740      	adds	r7, #64	; 0x40
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_CAN_Init+0xa8>)
 800175c:	4a28      	ldr	r2, [pc, #160]	; (8001800 <MX_CAN_Init+0xac>)
 800175e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 18;
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <MX_CAN_Init+0xa8>)
 8001762:	2212      	movs	r2, #18
 8001764:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_CAN_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_CAN_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <MX_CAN_Init+0xa8>)
 8001774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001778:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <MX_CAN_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MX_CAN_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <MX_CAN_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_CAN_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_CAN_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_CAN_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_CAN_Init+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80017a4:	4815      	ldr	r0, [pc, #84]	; (80017fc <MX_CAN_Init+0xa8>)
 80017a6:	f000 fb6f 	bl	8001e88 <HAL_CAN_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_CAN_Init+0x60>
		Error_Handler();
 80017b0:	f000 f980 	bl	8001ab4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 80017b8:	230a      	movs	r3, #10
 80017ba:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <MX_CAN_Init+0xa8>)
 80017e2:	f000 fc4c 	bl	800207e <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_CAN_Init+0xa8>)
 80017e8:	f000 fd12 	bl	8002210 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80017ec:	2110      	movs	r1, #16
 80017ee:	4803      	ldr	r0, [pc, #12]	; (80017fc <MX_CAN_Init+0xa8>)
 80017f0:	f000 ff3d 	bl	800266e <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000478 	.word	0x20000478
 8001800:	40006400 	.word	0x40006400

08001804 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001834:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001836:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001838:	2247      	movs	r2, #71	; 0x47
 800183a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <MX_TIM2_Init+0xe4>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535 - 1;
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001844:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001848:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <MX_TIM2_Init+0xe4>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001858:	f002 fa3e 	bl	8003cd8 <HAL_TIM_Base_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x62>
		Error_Handler();
 8001862:	f000 f927 	bl	8001ab4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4619      	mov	r1, r3
 8001872:	481d      	ldr	r0, [pc, #116]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001874:	f002 fdcc 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x7e>
		Error_Handler();
 800187e:	f000 f919 	bl	8001ab4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001882:	4819      	ldr	r0, [pc, #100]	; (80018e8 <MX_TIM2_Init+0xe4>)
 8001884:	f002 faca 	bl	8003e1c <HAL_TIM_IC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x8e>
		Error_Handler();
 800188e:	f000 f911 	bl	8001ab4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <MX_TIM2_Init+0xe4>)
 80018a2:	f003 f903 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80018ac:	f000 f902 	bl	8001ab4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018b0:	2300      	movs	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018b4:	2301      	movs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <MX_TIM2_Init+0xe4>)
 80018c8:	f002 fd0e 	bl	80042e8 <HAL_TIM_IC_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0xd2>
		Error_Handler();
 80018d2:	f000 f8ef 	bl	8001ab4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80018d6:	2100      	movs	r1, #0
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_TIM2_Init+0xe4>)
 80018da:	f002 faf7 	bl	8003ecc <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200004a0 	.word	0x200004a0

080018ec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM3_Init+0x94>)
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <MX_TIM3_Init+0x98>)
 800190c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM3_Init+0x94>)
 8001910:	2247      	movs	r2, #71	; 0x47
 8001912:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM3_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_TIM3_Init+0x94>)
 800191c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001920:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_TIM3_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM3_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <MX_TIM3_Init+0x94>)
 8001930:	f002 f9d2 	bl	8003cd8 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM3_Init+0x52>
		Error_Handler();
 800193a:	f000 f8bb 	bl	8001ab4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_TIM3_Init+0x94>)
 800194c:	f002 fd60 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001956:	f000 f8ad 	bl	8001ab4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001962:	463b      	mov	r3, r7
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <MX_TIM3_Init+0x94>)
 8001968:	f003 f8a0 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001972:	f000 f89f 	bl	8001ab4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200004e8 	.word	0x200004e8
 8001984:	40000400 	.word	0x40000400

08001988 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <MX_GPIO_Init+0xc4>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a2a      	ldr	r2, [pc, #168]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019a2:	f043 0320 	orr.w	r3, r3, #32
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_GPIO_Init+0xc4>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ea:	4819      	ldr	r0, [pc, #100]	; (8001a50 <MX_GPIO_Init+0xc8>)
 80019ec:	f001 fd0d 	bl	800340a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f6:	4817      	ldr	r0, [pc, #92]	; (8001a54 <MX_GPIO_Init+0xcc>)
 80019f8:	f001 fd07 	bl	800340a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2118      	movs	r1, #24
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <MX_GPIO_Init+0xc8>)
 8001a02:	f001 fd02 	bl	800340a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB11 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_3 | GPIO_PIN_4;
 8001a06:	f640 0318 	movw	r3, #2072	; 0x818
 8001a0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_GPIO_Init+0xc8>)
 8001a20:	f001 fb58 	bl	80030d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_GPIO_Init+0xcc>)
 8001a3e:	f001 fb49 	bl	80030d4 <HAL_GPIO_Init>

}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40010800 	.word	0x40010800

08001a58 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
		for (uint8_t a = 0; a < 8; a++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e00a      	b.n	8001a7c <StartDefaultTask+0x24>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <StartDefaultTask+0x34>)
 8001a6c:	f001 fce5 	bl	800343a <HAL_GPIO_TogglePin>
			osDelay(50);
 8001a70:	2032      	movs	r0, #50	; 0x32
 8001a72:	f003 f8f5 	bl	8004c60 <osDelay>
		for (uint8_t a = 0; a < 8; a++) {
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b07      	cmp	r3, #7
 8001a80:	d9f1      	bls.n	8001a66 <StartDefaultTask+0xe>
		}
		osDelay(500);
 8001a82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a86:	f003 f8eb 	bl	8004c60 <osDelay>
		for (uint8_t a = 0; a < 8; a++) {
 8001a8a:	e7e9      	b.n	8001a60 <StartDefaultTask+0x8>
 8001a8c:	40011000 	.word	0x40011000

08001a90 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001aa2:	f000 f9d5 	bl	8001e50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_MspInit+0x68>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_MspInit+0x68>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_MspInit+0x68>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_MspInit+0x68>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <HAL_MspInit+0x68>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_MspInit+0x68>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	210f      	movs	r1, #15
 8001afa:	f06f 0001 	mvn.w	r0, #1
 8001afe:	f001 f8b4 	bl	8002c6a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_MspInit+0x6c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_MspInit+0x6c>)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000

08001b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <HAL_CAN_MspInit+0x9c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d139      	bne.n	8001bc4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_CAN_MspInit+0xa0>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_CAN_MspInit+0xa0>)
 8001b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	61d3      	str	r3, [r2, #28]
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_CAN_MspInit+0xa0>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_CAN_MspInit+0xa0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <HAL_CAN_MspInit+0xa0>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_CAN_MspInit+0xa0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <HAL_CAN_MspInit+0xa4>)
 8001b96:	f001 fa9d 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <HAL_CAN_MspInit+0xa4>)
 8001bb0:	f001 fa90 	bl	80030d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2105      	movs	r1, #5
 8001bb8:	2015      	movs	r0, #21
 8001bba:	f001 f856 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001bbe:	2015      	movs	r0, #21
 8001bc0:	f001 f86f 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40006400 	.word	0x40006400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800

08001bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d13f      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	61d3      	str	r3, [r2, #28]
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481a      	ldr	r0, [pc, #104]	; (8001ca8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c3e:	f001 fa49 	bl	80030d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_Base_MspInit+0xd4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_TIM_Base_MspInit+0xd4>)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2105      	movs	r1, #5
 8001c6a:	201c      	movs	r0, #28
 8001c6c:	f000 fffd 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c70:	201c      	movs	r0, #28
 8001c72:	f001 f816 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c76:	e010      	b.n	8001c9a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10b      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	201e      	movs	r0, #30
 8001cca:	f000 ffce 	bl	8002c6a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cce:	201e      	movs	r0, #30
 8001cd0:	f000 ffe7 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_InitTick+0xa0>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_InitTick+0xa0>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	61d3      	str	r3, [r2, #28]
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_InitTick+0xa0>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cec:	f107 0210 	add.w	r2, r7, #16
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 ffa0 	bl	8003c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cfc:	f001 ff8a 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8001d00:	4603      	mov	r3, r0
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <HAL_InitTick+0xa4>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0c9b      	lsrs	r3, r3, #18
 8001d10:	3b01      	subs	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_InitTick+0xac>)
 8001d18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d20:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d34:	4809      	ldr	r0, [pc, #36]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d36:	f001 ffcf 	bl	8003cd8 <HAL_TIM_Base_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d104      	bne.n	8001d4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <HAL_InitTick+0xa8>)
 8001d42:	f002 f819 	bl	8003d78 <HAL_TIM_Base_Start_IT>
 8001d46:	4603      	mov	r3, r0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	20000534 	.word	0x20000534
 8001d60:	40000800 	.word	0x40000800

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <CAN1_RX1_IRQHandler+0x10>)
 8001d96:	f000 fc8f 	bl	80026b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000478 	.word	0x20000478

08001da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM2_IRQHandler+0x10>)
 8001daa:	f002 f995 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200004a0 	.word	0x200004a0

08001db8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM4_IRQHandler+0x10>)
 8001dbe:	f002 f98b 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000534 	.word	0x20000534

08001dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dda:	490d      	ldr	r1, [pc, #52]	; (8001e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df0:	4c0a      	ldr	r4, [pc, #40]	; (8001e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dfe:	f7ff ffe5 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f004 f8c5 	bl	8005f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e06:	f7ff fc35 	bl	8001674 <main>
  bx lr
 8001e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e14:	080062d0 	.word	0x080062d0
  ldr r2, =_sbss
 8001e18:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e1c:	200012f4 	.word	0x200012f4

08001e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_2_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x28>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x28>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 ff0d 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f7ff ff3a 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fe3e 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000010 	.word	0x20000010
 8001e70:	2000057c 	.word	0x2000057c

08001e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	2000057c 	.word	0x2000057c

08001e88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0ed      	b.n	8002076 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fe42 	bl	8001b30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ebc:	f7ff ffda 	bl	8001e74 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ec2:	e012      	b.n	8001eea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec4:	f7ff ffd6 	bl	8001e74 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b0a      	cmp	r3, #10
 8001ed0:	d90b      	bls.n	8001eea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0c5      	b.n	8002076 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0e5      	beq.n	8001ec4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0202 	bic.w	r2, r2, #2
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff ffb4 	bl	8001e74 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f0e:	e012      	b.n	8001f36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f10:	f7ff ffb0 	bl	8001e74 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b0a      	cmp	r3, #10
 8001f1c:	d90b      	bls.n	8001f36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e09f      	b.n	8002076 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e5      	bne.n	8001f10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e007      	b.n	8001f6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7e5b      	ldrb	r3, [r3, #25]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e007      	b.n	8001f98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e9b      	ldrb	r3, [r3, #26]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e007      	b.n	8001fc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0220 	bic.w	r2, r2, #32
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7edb      	ldrb	r3, [r3, #27]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0210 	bic.w	r2, r2, #16
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e007      	b.n	8001fec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0210 	orr.w	r2, r2, #16
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7f1b      	ldrb	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0208 	orr.w	r2, r2, #8
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e007      	b.n	8002016 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7f5b      	ldrb	r3, [r3, #29]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0204 	orr.w	r2, r2, #4
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e007      	b.n	8002040 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	ea42 0103 	orr.w	r1, r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	1e5a      	subs	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002094:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d003      	beq.n	80020a4 <HAL_CAN_ConfigFilter+0x26>
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 80aa 	bne.w	80021f8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2201      	movs	r2, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d123      	bne.n	8002126 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	401a      	ands	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002100:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3248      	adds	r2, #72	; 0x48
 8002106:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800211a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800211c:	6979      	ldr	r1, [r7, #20]
 800211e:	3348      	adds	r3, #72	; 0x48
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d122      	bne.n	8002174 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	431a      	orrs	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800214e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3248      	adds	r2, #72	; 0x48
 8002154:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002168:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	3348      	adds	r3, #72	; 0x48
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800218e:	e007      	b.n	80021a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021ba:	e007      	b.n	80021cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ea:	f023 0201 	bic.w	r2, r3, #1
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e006      	b.n	8002206 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d12e      	bne.n	8002282 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800223c:	f7ff fe1a 	bl	8001e74 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002242:	e012      	b.n	800226a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002244:	f7ff fe16 	bl	8001e74 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b0a      	cmp	r3, #10
 8002250:	d90b      	bls.n	800226a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e012      	b.n	8002290 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e5      	bne.n	8002244 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e006      	b.n	8002290 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022b6:	7ffb      	ldrb	r3, [r7, #31]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d003      	beq.n	80022c4 <HAL_CAN_AddTxMessage+0x2c>
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	f040 80b8 	bne.w	8002434 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80a0 	beq.w	8002424 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	0e1b      	lsrs	r3, r3, #24
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d907      	bls.n	8002304 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e09e      	b.n	8002442 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002304:	2201      	movs	r2, #1
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	409a      	lsls	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	6809      	ldr	r1, [r1, #0]
 8002324:	431a      	orrs	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3318      	adds	r3, #24
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	440b      	add	r3, r1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e00f      	b.n	8002352 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800233c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002346:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3318      	adds	r3, #24
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	440b      	add	r3, r1
 8002350:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3318      	adds	r3, #24
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	440b      	add	r3, r1
 8002362:	3304      	adds	r3, #4
 8002364:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	7d1b      	ldrb	r3, [r3, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d111      	bne.n	8002392 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3318      	adds	r3, #24
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3318      	adds	r3, #24
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	440b      	add	r3, r1
 800238e:	3304      	adds	r3, #4
 8002390:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3307      	adds	r3, #7
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3306      	adds	r3, #6
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3305      	adds	r3, #5
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	4313      	orrs	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	3204      	adds	r2, #4
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	4610      	mov	r0, r2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6811      	ldr	r1, [r2, #0]
 80023ba:	ea43 0200 	orr.w	r2, r3, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80023c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3303      	adds	r3, #3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	061a      	lsls	r2, r3, #24
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	4313      	orrs	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	4610      	mov	r0, r2
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6811      	ldr	r1, [r2, #0]
 80023f0:	ea43 0200 	orr.w	r2, r3, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3318      	adds	r3, #24
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	6811      	ldr	r1, [r2, #0]
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3318      	adds	r3, #24
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	440b      	add	r3, r1
 800241e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e00e      	b.n	8002442 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e006      	b.n	8002442 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d003      	beq.n	8002470 <HAL_CAN_GetRxMessage+0x24>
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b02      	cmp	r3, #2
 800246c:	f040 80f3 	bne.w	8002656 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10e      	bne.n	8002494 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0e7      	b.n	8002664 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0d8      	b.n	8002664 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	331b      	adds	r3, #27
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4413      	add	r3, r2
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0204 	and.w	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10c      	bne.n	80024ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	331b      	adds	r3, #27
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0d5b      	lsrs	r3, r3, #21
 80024e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e00b      	b.n	8002502 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	331b      	adds	r3, #27
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4413      	add	r3, r2
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	331b      	adds	r3, #27
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0202 	and.w	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	331b      	adds	r3, #27
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	331b      	adds	r3, #27
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	b2da      	uxtb	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	331b      	adds	r3, #27
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0a1a      	lsrs	r2, r3, #8
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4413      	add	r3, r2
 800259a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0c1a      	lsrs	r2, r3, #16
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	3302      	adds	r3, #2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e1a      	lsrs	r2, r3, #24
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3303      	adds	r3, #3
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3304      	adds	r3, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0a1a      	lsrs	r2, r3, #8
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3305      	adds	r3, #5
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	4413      	add	r3, r2
 8002600:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0c1a      	lsrs	r2, r3, #16
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	3306      	adds	r3, #6
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e1a      	lsrs	r2, r3, #24
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3307      	adds	r3, #7
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	e007      	b.n	8002652 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e006      	b.n	8002664 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d002      	beq.n	800268c <HAL_CAN_ActivateNotification+0x1e>
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d109      	bne.n	80026a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e006      	b.n	80026ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d07c      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f983 	bl	8002a26 <HAL_CAN_TxMailbox0CompleteCallback>
 8002720:	e016      	b.n	8002750 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e00c      	b.n	8002750 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	e002      	b.n	8002750 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f986 	bl	8002a5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d024      	beq.n	80027a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002762:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f962 	bl	8002a38 <HAL_CAN_TxMailbox1CompleteCallback>
 8002774:	e016      	b.n	80027a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	e00c      	b.n	80027a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	e002      	b.n	80027a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f965 	bl	8002a6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d024      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f941 	bl	8002a4a <HAL_CAN_TxMailbox2CompleteCallback>
 80027c8:	e016      	b.n	80027f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	e00c      	b.n	80027f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	e002      	b.n	80027f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f944 	bl	8002a80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2208      	movs	r2, #8
 8002836:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f933 	bl	8002aa4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f91b 	bl	8002a92 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002876:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2208      	movs	r2, #8
 800289a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f90a 	bl	8002ab6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fa40 	bl	8000d40 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2210      	movs	r2, #16
 80028da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8f3 	bl	8002ac8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00b      	beq.n	8002904 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2208      	movs	r2, #8
 80028fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8eb 	bl	8002ada <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d07b      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d072      	beq.n	80029fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	2b00      	cmp	r3, #0
 8002974:	d043      	beq.n	80029fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d03e      	beq.n	80029fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002986:	2b60      	cmp	r3, #96	; 0x60
 8002988:	d02b      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x32a>
 800298a:	2b60      	cmp	r3, #96	; 0x60
 800298c:	d82e      	bhi.n	80029ec <HAL_CAN_IRQHandler+0x334>
 800298e:	2b50      	cmp	r3, #80	; 0x50
 8002990:	d022      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x320>
 8002992:	2b50      	cmp	r3, #80	; 0x50
 8002994:	d82a      	bhi.n	80029ec <HAL_CAN_IRQHandler+0x334>
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d019      	beq.n	80029ce <HAL_CAN_IRQHandler+0x316>
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d826      	bhi.n	80029ec <HAL_CAN_IRQHandler+0x334>
 800299e:	2b30      	cmp	r3, #48	; 0x30
 80029a0:	d010      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x30c>
 80029a2:	2b30      	cmp	r3, #48	; 0x30
 80029a4:	d822      	bhi.n	80029ec <HAL_CAN_IRQHandler+0x334>
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d002      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x2f8>
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d005      	beq.n	80029ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029ae:	e01d      	b.n	80029ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f043 0308 	orr.w	r3, r3, #8
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029b8:	e019      	b.n	80029ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f043 0310 	orr.w	r3, r3, #16
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029c2:	e014      	b.n	80029ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f043 0320 	orr.w	r3, r3, #32
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029cc:	e00f      	b.n	80029ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029d6:	e00a      	b.n	80029ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029e0:	e005      	b.n	80029ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ea:	e000      	b.n	80029ee <HAL_CAN_IRQHandler+0x336>
            break;
 80029ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2204      	movs	r2, #4
 8002a04:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f867 	bl	8002aec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <__NVIC_EnableIRQ+0x34>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff4f 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff64 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ffb2 	bl	8002bf0 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff81 	bl	8002b9c <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff57 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_FLASH_Program+0xd8>)
 8002cdc:	7e1b      	ldrb	r3, [r3, #24]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_FLASH_Program+0x26>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e054      	b.n	8002d90 <HAL_FLASH_Program+0xd0>
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_FLASH_Program+0xd8>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002cec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cf0:	f000 f8b2 	bl	8002e58 <FLASH_WaitForLastOperation>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d144      	bne.n	8002d88 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d102      	bne.n	8002d0a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002d04:	2301      	movs	r3, #1
 8002d06:	757b      	strb	r3, [r7, #21]
 8002d08:	e007      	b.n	8002d1a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d102      	bne.n	8002d16 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002d10:	2302      	movs	r3, #2
 8002d12:	757b      	strb	r3, [r7, #21]
 8002d14:	e001      	b.n	8002d1a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002d16:	2304      	movs	r3, #4
 8002d18:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75bb      	strb	r3, [r7, #22]
 8002d1e:	e02d      	b.n	8002d7c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d20:	7dbb      	ldrb	r3, [r7, #22]
 8002d22:	005a      	lsls	r2, r3, #1
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	eb02 0c03 	add.w	ip, r2, r3
 8002d2a:	7dbb      	ldrb	r3, [r7, #22]
 8002d2c:	0119      	lsls	r1, r3, #4
 8002d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d32:	f1c1 0620 	rsb	r6, r1, #32
 8002d36:	f1a1 0020 	sub.w	r0, r1, #32
 8002d3a:	fa22 f401 	lsr.w	r4, r2, r1
 8002d3e:	fa03 f606 	lsl.w	r6, r3, r6
 8002d42:	4334      	orrs	r4, r6
 8002d44:	fa23 f000 	lsr.w	r0, r3, r0
 8002d48:	4304      	orrs	r4, r0
 8002d4a:	fa23 f501 	lsr.w	r5, r3, r1
 8002d4e:	b2a3      	uxth	r3, r4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4660      	mov	r0, ip
 8002d54:	f000 f864 	bl	8002e20 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d5c:	f000 f87c 	bl	8002e58 <FLASH_WaitForLastOperation>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_FLASH_Program+0xdc>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_FLASH_Program+0xdc>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002d76:	7dbb      	ldrb	r3, [r7, #22]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	75bb      	strb	r3, [r7, #22]
 8002d7c:	7dba      	ldrb	r2, [r7, #22]
 8002d7e:	7d7b      	ldrb	r3, [r7, #21]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3cd      	bcc.n	8002d20 <HAL_FLASH_Program+0x60>
 8002d84:	e000      	b.n	8002d88 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d86:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_FLASH_Program+0xd8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	761a      	strb	r2, [r3, #24]

  return status;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d98:	20000580 	.word	0x20000580
 8002d9c:	40022000 	.word	0x40022000

08002da0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_FLASH_Unlock+0x40>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_FLASH_Unlock+0x40>)
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_FLASH_Unlock+0x44>)
 8002dba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_FLASH_Unlock+0x40>)
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_FLASH_Unlock+0x48>)
 8002dc0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_FLASH_Unlock+0x40>)
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40022000 	.word	0x40022000
 8002de4:	45670123 	.word	0x45670123
 8002de8:	cdef89ab 	.word	0xcdef89ab

08002dec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_FLASH_Lock+0x1c>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_FLASH_Lock+0x1c>)
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000

08002e0c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <HAL_FLASH_GetError+0x10>)
 8002e12:	69db      	ldr	r3, [r3, #28]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	20000580 	.word	0x20000580

08002e20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <FLASH_Program_HalfWord+0x30>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <FLASH_Program_HalfWord+0x34>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <FLASH_Program_HalfWord+0x34>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	887a      	ldrh	r2, [r7, #2]
 8002e42:	801a      	strh	r2, [r3, #0]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000580 	.word	0x20000580
 8002e54:	40022000 	.word	0x40022000

08002e58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff f808 	bl	8001e74 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e66:	e010      	b.n	8002e8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d00c      	beq.n	8002e8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <FLASH_WaitForLastOperation+0x2e>
 8002e76:	f7fe fffd 	bl	8001e74 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d201      	bcs.n	8002e8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e025      	b.n	8002ed6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <FLASH_WaitForLastOperation+0x88>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e8      	bne.n	8002e68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <FLASH_WaitForLastOperation+0x88>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <FLASH_WaitForLastOperation+0x88>)
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <FLASH_WaitForLastOperation+0x88>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <FLASH_WaitForLastOperation+0x88>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <FLASH_WaitForLastOperation+0x88>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ecc:	f000 f80a 	bl	8002ee4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40022000 	.word	0x40022000

08002ee4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <FLASH_SetErrorCode+0x9c>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <FLASH_SetErrorCode+0x9c>)
 8002f04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f043 0310 	orr.w	r3, r3, #16
 8002f0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <FLASH_SetErrorCode+0x9c>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <FLASH_SetErrorCode+0x9c>)
 8002f24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <FLASH_SetErrorCode+0x9c>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <FLASH_SetErrorCode+0x9c>)
 8002f44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f240 1201 	movw	r2, #257	; 0x101
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d106      	bne.n	8002f6a <FLASH_SetErrorCode+0x86>
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	61d3      	str	r3, [r2, #28]
}  
 8002f68:	e002      	b.n	8002f70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <FLASH_SetErrorCode+0x98>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60d3      	str	r3, [r2, #12]
}  
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	20000580 	.word	0x20000580

08002f84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f96:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_FLASHEx_Erase+0xd0>)
 8002f98:	7e1b      	ldrb	r3, [r3, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_FLASHEx_Erase+0x1e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e053      	b.n	800304a <HAL_FLASHEx_Erase+0xc6>
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_FLASHEx_Erase+0xd0>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d116      	bne.n	8002fde <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fb4:	f7ff ff50 	bl	8002e58 <FLASH_WaitForLastOperation>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d141      	bne.n	8003042 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f000 f84c 	bl	800305c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fc8:	f7ff ff46 	bl	8002e58 <FLASH_WaitForLastOperation>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_FLASHEx_Erase+0xd4>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <HAL_FLASHEx_Erase+0xd4>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	6113      	str	r3, [r2, #16]
 8002fdc:	e031      	b.n	8003042 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fe2:	f7ff ff39 	bl	8002e58 <FLASH_WaitForLastOperation>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12a      	bne.n	8003042 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	e019      	b.n	8003030 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002ffc:	68b8      	ldr	r0, [r7, #8]
 8002ffe:	f000 f849 	bl	8003094 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003002:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003006:	f7ff ff27 	bl	8002e58 <FLASH_WaitForLastOperation>
 800300a:	4603      	mov	r3, r0
 800300c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_FLASHEx_Erase+0xd4>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_FLASHEx_Erase+0xd4>)
 8003014:	f023 0302 	bic.w	r3, r3, #2
 8003018:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	601a      	str	r2, [r3, #0]
            break;
 8003026:	e00c      	b.n	8003042 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800302e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	029a      	lsls	r2, r3, #10
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3dc      	bcc.n	8002ffc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003042:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_FLASHEx_Erase+0xd0>)
 8003044:	2200      	movs	r2, #0
 8003046:	761a      	strb	r2, [r3, #24]

  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000580 	.word	0x20000580
 8003058:	40022000 	.word	0x40022000

0800305c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <FLASH_MassErase+0x30>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <FLASH_MassErase+0x34>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <FLASH_MassErase+0x34>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <FLASH_MassErase+0x34>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <FLASH_MassErase+0x34>)
 800307c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003080:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	20000580 	.word	0x20000580
 8003090:	40022000 	.word	0x40022000

08003094 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <FLASH_PageErase+0x38>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <FLASH_PageErase+0x3c>)
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <FLASH_PageErase+0x3c>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <FLASH_PageErase+0x3c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <FLASH_PageErase+0x3c>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <FLASH_PageErase+0x3c>)
 80030ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030be:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000580 	.word	0x20000580
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b08b      	sub	sp, #44	; 0x2c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e169      	b.n	80033bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e8:	2201      	movs	r2, #1
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8158 	bne.w	80033b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a9a      	ldr	r2, [pc, #616]	; (8003374 <HAL_GPIO_Init+0x2a0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d05e      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003110:	4a98      	ldr	r2, [pc, #608]	; (8003374 <HAL_GPIO_Init+0x2a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d875      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003116:	4a98      	ldr	r2, [pc, #608]	; (8003378 <HAL_GPIO_Init+0x2a4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d058      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 800311c:	4a96      	ldr	r2, [pc, #600]	; (8003378 <HAL_GPIO_Init+0x2a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d86f      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003122:	4a96      	ldr	r2, [pc, #600]	; (800337c <HAL_GPIO_Init+0x2a8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d052      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003128:	4a94      	ldr	r2, [pc, #592]	; (800337c <HAL_GPIO_Init+0x2a8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d869      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800312e:	4a94      	ldr	r2, [pc, #592]	; (8003380 <HAL_GPIO_Init+0x2ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d04c      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003134:	4a92      	ldr	r2, [pc, #584]	; (8003380 <HAL_GPIO_Init+0x2ac>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d863      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800313a:	4a92      	ldr	r2, [pc, #584]	; (8003384 <HAL_GPIO_Init+0x2b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d046      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003140:	4a90      	ldr	r2, [pc, #576]	; (8003384 <HAL_GPIO_Init+0x2b0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d85d      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003146:	2b12      	cmp	r3, #18
 8003148:	d82a      	bhi.n	80031a0 <HAL_GPIO_Init+0xcc>
 800314a:	2b12      	cmp	r3, #18
 800314c:	d859      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_GPIO_Init+0x80>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	080031cf 	.word	0x080031cf
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031bb 	.word	0x080031bb
 8003160:	080031fd 	.word	0x080031fd
 8003164:	08003203 	.word	0x08003203
 8003168:	08003203 	.word	0x08003203
 800316c:	08003203 	.word	0x08003203
 8003170:	08003203 	.word	0x08003203
 8003174:	08003203 	.word	0x08003203
 8003178:	08003203 	.word	0x08003203
 800317c:	08003203 	.word	0x08003203
 8003180:	08003203 	.word	0x08003203
 8003184:	08003203 	.word	0x08003203
 8003188:	08003203 	.word	0x08003203
 800318c:	08003203 	.word	0x08003203
 8003190:	08003203 	.word	0x08003203
 8003194:	08003203 	.word	0x08003203
 8003198:	080031b1 	.word	0x080031b1
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	4a79      	ldr	r2, [pc, #484]	; (8003388 <HAL_GPIO_Init+0x2b4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031a6:	e02c      	b.n	8003202 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e029      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	3304      	adds	r3, #4
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e024      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	3308      	adds	r3, #8
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e01f      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	330c      	adds	r3, #12
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e01a      	b.n	8003204 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d6:	2304      	movs	r3, #4
 80031d8:	623b      	str	r3, [r7, #32]
          break;
 80031da:	e013      	b.n	8003204 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e4:	2308      	movs	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	611a      	str	r2, [r3, #16]
          break;
 80031ee:	e009      	b.n	8003204 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f0:	2308      	movs	r3, #8
 80031f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	615a      	str	r2, [r3, #20]
          break;
 80031fa:	e003      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x130>
          break;
 8003202:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	; 0xff
 8003208:	d801      	bhi.n	800320e <HAL_GPIO_Init+0x13a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_Init+0x13e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2bff      	cmp	r3, #255	; 0xff
 8003218:	d802      	bhi.n	8003220 <HAL_GPIO_Init+0x14c>
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x152>
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	3b08      	subs	r3, #8
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	210f      	movs	r1, #15
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80b1 	beq.w	80033b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_GPIO_Init+0x2b8>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a4c      	ldr	r2, [pc, #304]	; (800338c <HAL_GPIO_Init+0x2b8>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_GPIO_Init+0x2b8>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800326c:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_GPIO_Init+0x2bc>)
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003278:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a40      	ldr	r2, [pc, #256]	; (8003394 <HAL_GPIO_Init+0x2c0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_GPIO_Init+0x1ec>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <HAL_GPIO_Init+0x2c4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00d      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3e      	ldr	r2, [pc, #248]	; (800339c <HAL_GPIO_Init+0x2c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <HAL_GPIO_Init+0x1e4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <HAL_GPIO_Init+0x2cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_GPIO_Init+0x1e0>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b4:	2304      	movs	r3, #4
 80032b6:	e004      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e002      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032c0:	2300      	movs	r3, #0
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	f002 0203 	and.w	r2, r2, #3
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	4093      	lsls	r3, r2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032d2:	492f      	ldr	r1, [pc, #188]	; (8003390 <HAL_GPIO_Init+0x2bc>)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032ec:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	492c      	ldr	r1, [pc, #176]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4928      	ldr	r1, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003304:	4013      	ands	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4922      	ldr	r1, [pc, #136]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	43db      	mvns	r3, r3
 800332a:	491e      	ldr	r1, [pc, #120]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800332c:	4013      	ands	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4918      	ldr	r1, [pc, #96]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	43db      	mvns	r3, r3
 8003352:	4914      	ldr	r1, [pc, #80]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003354:	4013      	ands	r3, r2
 8003356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	60cb      	str	r3, [r1, #12]
 8003370:	e021      	b.n	80033b6 <HAL_GPIO_Init+0x2e2>
 8003372:	bf00      	nop
 8003374:	10320000 	.word	0x10320000
 8003378:	10310000 	.word	0x10310000
 800337c:	10220000 	.word	0x10220000
 8003380:	10210000 	.word	0x10210000
 8003384:	10120000 	.word	0x10120000
 8003388:	10110000 	.word	0x10110000
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	40010800 	.word	0x40010800
 8003398:	40010c00 	.word	0x40010c00
 800339c:	40011000 	.word	0x40011000
 80033a0:	40011400 	.word	0x40011400
 80033a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_GPIO_Init+0x304>)
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4909      	ldr	r1, [pc, #36]	; (80033d8 <HAL_GPIO_Init+0x304>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f ae8e 	bne.w	80030e8 <HAL_GPIO_Init+0x14>
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	372c      	adds	r7, #44	; 0x2c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	887b      	ldrh	r3, [r7, #2]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e001      	b.n	80033fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]
 8003416:	4613      	mov	r3, r2
 8003418:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800341a:	787b      	ldrb	r3, [r7, #1]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003420:	887a      	ldrh	r2, [r7, #2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003426:	e003      	b.n	8003430 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	041a      	lsls	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	611a      	str	r2, [r3, #16]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800344c:	887a      	ldrh	r2, [r7, #2]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	041a      	lsls	r2, r3, #16
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	43d9      	mvns	r1, r3
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	400b      	ands	r3, r1
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e272      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8087 	beq.w	800359a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800348c:	4b92      	ldr	r3, [pc, #584]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b04      	cmp	r3, #4
 8003496:	d00c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003498:	4b8f      	ldr	r3, [pc, #572]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d112      	bne.n	80034ca <HAL_RCC_OscConfig+0x5e>
 80034a4:	4b8c      	ldr	r3, [pc, #560]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d10b      	bne.n	80034ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b2:	4b89      	ldr	r3, [pc, #548]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06c      	beq.n	8003598 <HAL_RCC_OscConfig+0x12c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d168      	bne.n	8003598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e24c      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x76>
 80034d4:	4b80      	ldr	r3, [pc, #512]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a7f      	ldr	r2, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e02e      	b.n	8003540 <HAL_RCC_OscConfig+0xd4>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x98>
 80034ea:	4b7b      	ldr	r3, [pc, #492]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7a      	ldr	r2, [pc, #488]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b78      	ldr	r3, [pc, #480]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a77      	ldr	r2, [pc, #476]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01d      	b.n	8003540 <HAL_RCC_OscConfig+0xd4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0xbc>
 800350e:	4b72      	ldr	r3, [pc, #456]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a71      	ldr	r2, [pc, #452]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6e      	ldr	r2, [pc, #440]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xd4>
 8003528:	4b6b      	ldr	r3, [pc, #428]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6a      	ldr	r2, [pc, #424]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b68      	ldr	r3, [pc, #416]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a67      	ldr	r2, [pc, #412]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fc94 	bl	8001e74 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe fc90 	bl	8001e74 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e200      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b5d      	ldr	r3, [pc, #372]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0xe4>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fc80 	bl	8001e74 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fc7c 	bl	8001e74 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1ec      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x10c>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d063      	beq.n	800366e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a6:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d11c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x18c>
 80035be:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ca:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x176>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e1c0      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4939      	ldr	r1, [pc, #228]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	e03a      	b.n	800366e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003600:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_RCC_OscConfig+0x270>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe fc35 	bl	8001e74 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360e:	f7fe fc31 	bl	8001e74 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1a1      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4927      	ldr	r1, [pc, #156]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
 8003640:	e015      	b.n	800366e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_RCC_OscConfig+0x270>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fc14 	bl	8001e74 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe fc10 	bl	8001e74 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e180      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d03a      	beq.n	80036f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d019      	beq.n	80036b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003682:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_RCC_OscConfig+0x274>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003688:	f7fe fbf4 	bl	8001e74 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe fbf0 	bl	8001e74 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e160      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ae:	2001      	movs	r0, #1
 80036b0:	f000 faf4 	bl	8003c9c <RCC_Delay>
 80036b4:	e01c      	b.n	80036f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_OscConfig+0x274>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe fbda 	bl	8001e74 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c2:	e00f      	b.n	80036e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c4:	f7fe fbd6 	bl	8001e74 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d908      	bls.n	80036e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e146      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	42420000 	.word	0x42420000
 80036e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b92      	ldr	r3, [pc, #584]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e9      	bne.n	80036c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a6 	beq.w	800384a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b8b      	ldr	r3, [pc, #556]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4a87      	ldr	r2, [pc, #540]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	61d3      	str	r3, [r2, #28]
 800371a:	4b85      	ldr	r3, [pc, #532]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372a:	4b82      	ldr	r3, [pc, #520]	; (8003934 <HAL_RCC_OscConfig+0x4c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003736:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <HAL_RCC_OscConfig+0x4c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7e      	ldr	r2, [pc, #504]	; (8003934 <HAL_RCC_OscConfig+0x4c8>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7fe fb97 	bl	8001e74 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7fe fb93 	bl	8001e74 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e103      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b75      	ldr	r3, [pc, #468]	; (8003934 <HAL_RCC_OscConfig+0x4c8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x312>
 8003770:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6213      	str	r3, [r2, #32]
 800377c:	e02d      	b.n	80037da <HAL_RCC_OscConfig+0x36e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x334>
 8003786:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a69      	ldr	r2, [pc, #420]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6213      	str	r3, [r2, #32]
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	e01c      	b.n	80037da <HAL_RCC_OscConfig+0x36e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x356>
 80037a8:	4b61      	ldr	r3, [pc, #388]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a60      	ldr	r2, [pc, #384]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6213      	str	r3, [r2, #32]
 80037b4:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a5d      	ldr	r2, [pc, #372]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6213      	str	r3, [r2, #32]
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x36e>
 80037c2:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4a5a      	ldr	r2, [pc, #360]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6213      	str	r3, [r2, #32]
 80037ce:	4b58      	ldr	r3, [pc, #352]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fe fb47 	bl	8001e74 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fe fb43 	bl	8001e74 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0b1      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x37e>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7fe fb31 	bl	8001e74 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fe fb2d 	bl	8001e74 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e09b      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b40      	ldr	r3, [pc, #256]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4a3b      	ldr	r2, [pc, #236]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8087 	beq.w	8003962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003854:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d061      	beq.n	8003924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d146      	bne.n	80038f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b33      	ldr	r3, [pc, #204]	; (8003938 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fe fb01 	bl	8001e74 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fe fafd 	bl	8001e74 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e06d      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003888:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389c:	d108      	bne.n	80038b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4921      	ldr	r1, [pc, #132]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a19      	ldr	r1, [r3, #32]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	430b      	orrs	r3, r1
 80038c2:	491b      	ldr	r1, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fad1 	bl	8001e74 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe facd 	bl	8001e74 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e03d      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x46a>
 80038f4:	e035      	b.n	8003962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_RCC_OscConfig+0x4cc>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe faba 	bl	8001e74 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe fab6 	bl	8001e74 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e026      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x498>
 8003922:	e01e      	b.n	8003962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e019      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_OscConfig+0x500>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	429a      	cmp	r2, r3
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0d0      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d910      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	4965      	ldr	r1, [pc, #404]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d040      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d115      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e073      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e06b      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4936      	ldr	r1, [pc, #216]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fa08 	bl	8001e74 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fe fa04 	bl	8001e74 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e053      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d210      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 0207 	bic.w	r2, r3, #7
 8003aa6:	4922      	ldr	r1, [pc, #136]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f821 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1cc>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x1d0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe f8c8 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	08006250 	.word	0x08006250
 8003b3c:	20000008 	.word	0x20000008
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	b490      	push	{r4, r7}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b4c:	1d3c      	adds	r4, r7, #4
 8003b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b54:	f240 2301 	movw	r3, #513	; 0x201
 8003b58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b6e:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x40>
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0x46>
 8003b82:	e02b      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b86:	623b      	str	r3, [r7, #32]
      break;
 8003b88:	e02b      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	0c9b      	lsrs	r3, r3, #18
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3328      	adds	r3, #40	; 0x28
 8003b94:	443b      	add	r3, r7
 8003b96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d012      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	0c5b      	lsrs	r3, r3, #17
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	3328      	adds	r3, #40	; 0x28
 8003bb2:	443b      	add	r3, r7
 8003bb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bbe:	fb03 f202 	mul.w	r2, r3, r2
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e004      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	623b      	str	r3, [r7, #32]
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bde:	623b      	str	r3, [r7, #32]
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	6a3b      	ldr	r3, [r7, #32]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3728      	adds	r7, #40	; 0x28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc90      	pop	{r4, r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	08006238 	.word	0x08006238
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	007a1200 	.word	0x007a1200
 8003bfc:	003d0900 	.word	0x003d0900

08003c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20000008 	.word	0x20000008

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c18:	f7ff fff2 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	08006260 	.word	0x08006260

08003c3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	220f      	movs	r2, #15
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <HAL_RCC_GetClockConfig+0x58>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_RCC_GetClockConfig+0x58>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetClockConfig+0x58>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_RCC_GetClockConfig+0x58>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40022000 	.word	0x40022000

08003c9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <RCC_Delay+0x34>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <RCC_Delay+0x38>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a5b      	lsrs	r3, r3, #9
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cb8:	bf00      	nop
  }
  while (Delay --);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	60fa      	str	r2, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f9      	bne.n	8003cb8 <RCC_Delay+0x1c>
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000008 	.word	0x20000008
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e041      	b.n	8003d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd ff6a 	bl	8001bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fc9e 	bl	8004658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e03a      	b.n	8003e06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIM_Base_Start_IT+0x98>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_TIM_Base_Start_IT+0xa0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d010      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e007      	b.n	8003e04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e041      	b.n	8003eb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f839 	bl	8003eba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 fbfc 	bl	8004658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_IC_Start_IT+0x1a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	e013      	b.n	8003f0e <HAL_TIM_IC_Start_IT+0x42>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_IC_Start_IT+0x2a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	e00b      	b.n	8003f0e <HAL_TIM_IC_Start_IT+0x42>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_IC_Start_IT+0x3a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e003      	b.n	8003f0e <HAL_TIM_IC_Start_IT+0x42>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <HAL_TIM_IC_Start_IT+0x54>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e013      	b.n	8003f48 <HAL_TIM_IC_Start_IT+0x7c>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d104      	bne.n	8003f30 <HAL_TIM_IC_Start_IT+0x64>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e00b      	b.n	8003f48 <HAL_TIM_IC_Start_IT+0x7c>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d104      	bne.n	8003f40 <HAL_TIM_IC_Start_IT+0x74>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e003      	b.n	8003f48 <HAL_TIM_IC_Start_IT+0x7c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f50:	7bbb      	ldrb	r3, [r7, #14]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0b3      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_IC_Start_IT+0x9e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	e013      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0xc6>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_IC_Start_IT+0xae>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	e00b      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0xc6>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_IC_Start_IT+0xbe>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	e003      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0xc6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_IC_Start_IT+0xd6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	e013      	b.n	8003fca <HAL_TIM_IC_Start_IT+0xfe>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_IC_Start_IT+0xe6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb0:	e00b      	b.n	8003fca <HAL_TIM_IC_Start_IT+0xfe>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_IC_Start_IT+0xf6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc0:	e003      	b.n	8003fca <HAL_TIM_IC_Start_IT+0xfe>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d841      	bhi.n	8004054 <HAL_TIM_IC_Start_IT+0x188>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_TIM_IC_Start_IT+0x10c>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	08004055 	.word	0x08004055
 8003fe0:	08004055 	.word	0x08004055
 8003fe4:	08004055 	.word	0x08004055
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	08004055 	.word	0x08004055
 8003ff4:	08004055 	.word	0x08004055
 8003ff8:	08004031 	.word	0x08004031
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004055 	.word	0x08004055
 8004004:	08004055 	.word	0x08004055
 8004008:	08004043 	.word	0x08004043
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0202 	orr.w	r2, r2, #2
 800401a:	60da      	str	r2, [r3, #12]
      break;
 800401c:	e01b      	b.n	8004056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0204 	orr.w	r2, r2, #4
 800402c:	60da      	str	r2, [r3, #12]
      break;
 800402e:	e012      	b.n	8004056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	60da      	str	r2, [r3, #12]
      break;
 8004040:	e009      	b.n	8004056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0210 	orr.w	r2, r2, #16
 8004050:	60da      	str	r2, [r3, #12]
      break;
 8004052:	e000      	b.n	8004056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004054:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2201      	movs	r2, #1
 800405c:	6839      	ldr	r1, [r7, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fcff 	bl	8004a62 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <HAL_TIM_IC_Start_IT+0x200>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_IC_Start_IT+0x1c0>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d009      	beq.n	800408c <HAL_TIM_IC_Start_IT+0x1c0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_TIM_IC_Start_IT+0x204>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_IC_Start_IT+0x1c0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <HAL_TIM_IC_Start_IT+0x208>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800

080040d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d122      	bne.n	8004134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d11b      	bne.n	8004134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0202 	mvn.w	r2, #2
 8004104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fd78 	bl	8000c10 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa7c 	bl	8004620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa82 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0204 	mvn.w	r2, #4
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fd4e 	bl	8000c10 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa52 	bl	8004620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa58 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b08      	cmp	r3, #8
 8004194:	d122      	bne.n	80041dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0208 	mvn.w	r2, #8
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2204      	movs	r2, #4
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fd24 	bl	8000c10 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa28 	bl	8004620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fa2e 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0210 	mvn.w	r2, #16
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2208      	movs	r2, #8
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fcfa 	bl	8000c10 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9fe 	bl	8004620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fa04 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0201 	mvn.w	r2, #1
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fc1a 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fc79 	bl	8004b7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9c8 	bl	8004644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0220 	mvn.w	r2, #32
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fc44 	bl	8004b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_IC_ConfigChannel+0x1a>
 80042fe:	2302      	movs	r3, #2
 8004300:	e082      	b.n	8004408 <HAL_TIM_IC_ConfigChannel+0x120>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f000 f9fc 	bl	800471c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 020c 	bic.w	r2, r2, #12
 8004332:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6999      	ldr	r1, [r3, #24]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	e05a      	b.n	80043fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d11c      	bne.n	8004388 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f000 fa65 	bl	800482c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004370:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6999      	ldr	r1, [r3, #24]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	021a      	lsls	r2, r3, #8
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	619a      	str	r2, [r3, #24]
 8004386:	e03a      	b.n	80043fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11b      	bne.n	80043c6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f000 fab0 	bl	8004902 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 020c 	bic.w	r2, r2, #12
 80043b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	61da      	str	r2, [r3, #28]
 80043c4:	e01b      	b.n	80043fe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f000 facf 	bl	8004978 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69d9      	ldr	r1, [r3, #28]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	021a      	lsls	r2, r3, #8
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIM_ConfigClockSource+0x18>
 8004424:	2302      	movs	r3, #2
 8004426:	e0b3      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x180>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	d03e      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0xd0>
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	f200 8087 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x168>
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446e:	f000 8085 	beq.w	800457c <HAL_TIM_ConfigClockSource+0x16c>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	d87f      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d01a      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0xa2>
 800447c:	2b70      	cmp	r3, #112	; 0x70
 800447e:	d87b      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d050      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x116>
 8004484:	2b60      	cmp	r3, #96	; 0x60
 8004486:	d877      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 8004488:	2b50      	cmp	r3, #80	; 0x50
 800448a:	d03c      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xf6>
 800448c:	2b50      	cmp	r3, #80	; 0x50
 800448e:	d873      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d058      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x136>
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d86f      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d064      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x156>
 800449c:	2b30      	cmp	r3, #48	; 0x30
 800449e:	d86b      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d060      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x156>
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d867      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05c      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x156>
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d05a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044b0:	e062      	b.n	8004578 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6899      	ldr	r1, [r3, #8]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f000 faaf 	bl	8004a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	609a      	str	r2, [r3, #8]
      break;
 80044de:	e04e      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f000 fa98 	bl	8004a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e03b      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	461a      	mov	r2, r3
 8004514:	f000 f95c 	bl	80047d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2150      	movs	r1, #80	; 0x50
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa66 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 8004524:	e02b      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	461a      	mov	r2, r3
 8004534:	f000 f9b6 	bl	80048a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2160      	movs	r1, #96	; 0x60
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa56 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 8004544:	e01b      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	f000 f93c 	bl	80047d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2140      	movs	r1, #64	; 0x40
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa46 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 8004564:	e00b      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 fa3d 	bl	80049f0 <TIM_ITRx_SetConfig>
        break;
 8004576:	e002      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800457c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d831      	bhi.n	8004610 <HAL_TIM_ReadCapturedValue+0x78>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004611 	.word	0x08004611
 80045c0:	08004611 	.word	0x08004611
 80045c4:	080045f3 	.word	0x080045f3
 80045c8:	08004611 	.word	0x08004611
 80045cc:	08004611 	.word	0x08004611
 80045d0:	08004611 	.word	0x08004611
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004611 	.word	0x08004611
 80045dc:	08004611 	.word	0x08004611
 80045e0:	08004611 	.word	0x08004611
 80045e4:	08004607 	.word	0x08004607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ee:	60fb      	str	r3, [r7, #12]

      break;
 80045f0:	e00f      	b.n	8004612 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	60fb      	str	r3, [r7, #12]

      break;
 80045fa:	e00a      	b.n	8004612 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	60fb      	str	r3, [r7, #12]

      break;
 8004604:	e005      	b.n	8004612 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	60fb      	str	r3, [r7, #12]

      break;
 800460e:	e000      	b.n	8004612 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004610:	bf00      	nop
  }

  return tmpreg;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
	...

08004658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <TIM_Base_SetConfig+0xb8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_Base_SetConfig+0x30>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0x30>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a26      	ldr	r2, [pc, #152]	; (8004714 <TIM_Base_SetConfig+0xbc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x30>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a25      	ldr	r2, [pc, #148]	; (8004718 <TIM_Base_SetConfig+0xc0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <TIM_Base_SetConfig+0xb8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0x62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0x62>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a19      	ldr	r2, [pc, #100]	; (8004714 <TIM_Base_SetConfig+0xbc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0x62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <TIM_Base_SetConfig+0xc0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <TIM_Base_SetConfig+0xb8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800

0800471c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <TIM_TI1_SetConfig+0xa8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_TI1_SetConfig+0x46>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d007      	beq.n	8004762 <TIM_TI1_SetConfig+0x46>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <TIM_TI1_SetConfig+0xac>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_TI1_SetConfig+0x46>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <TIM_TI1_SetConfig+0xb0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <TIM_TI1_SetConfig+0x4a>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <TIM_TI1_SetConfig+0x4c>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e003      	b.n	8004786 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	b2db      	uxtb	r3, r3
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f023 030a 	bic.w	r3, r3, #10
 80047a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f003 030a 	and.w	r3, r3, #10
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800

080047d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 030a 	bic.w	r3, r3, #10
 800480c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800486a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	031b      	lsls	r3, r3, #12
 8004870:	b29b      	uxth	r3, r3
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800487e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0210 	bic.w	r2, r3, #16
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	b2db      	uxtb	r3, r3
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004952:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	031b      	lsls	r3, r3, #12
 80049bc:	b29b      	uxth	r3, r3
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	031b      	lsls	r3, r3, #12
 80049d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f043 0307 	orr.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	609a      	str	r2, [r3, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2201      	movs	r2, #1
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	401a      	ands	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
	...

08004aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e046      	b.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d009      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d10c      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800

08004b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9e:	2b84      	cmp	r3, #132	; 0x84
 8004ba0:	d005      	beq.n	8004bae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ba2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	3303      	adds	r3, #3
 8004bac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004bbe:	f000 fae7 	bl	8005190 <vTaskStartScheduler>
  
  return osOK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bca:	b089      	sub	sp, #36	; 0x24
 8004bcc:	af04      	add	r7, sp, #16
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <osThreadCreate+0x54>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01c      	beq.n	8004c1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685c      	ldr	r4, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691e      	ldr	r6, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ffc9 	bl	8004b8c <makeFreeRtosPriority>
 8004bfa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c04:	9202      	str	r2, [sp, #8]
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	9100      	str	r1, [sp, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4629      	mov	r1, r5
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 f8e8 	bl	8004de6 <xTaskCreateStatic>
 8004c16:	4603      	mov	r3, r0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e01c      	b.n	8004c56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685c      	ldr	r4, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c28:	b29e      	uxth	r6, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ffab 	bl	8004b8c <makeFreeRtosPriority>
 8004c36:	4602      	mov	r2, r0
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	9200      	str	r2, [sp, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4632      	mov	r2, r6
 8004c44:	4629      	mov	r1, r5
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f929 	bl	8004e9e <xTaskCreate>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d001      	beq.n	8004c56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e000      	b.n	8004c58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <osDelay+0x16>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	e000      	b.n	8004c78 <osDelay+0x18>
 8004c76:	2301      	movs	r3, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fa55 	bl	8005128 <vTaskDelay>
  
  return osOK;
 8004c7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f103 0208 	add.w	r2, r3, #8
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f103 0208 	add.w	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f103 0208 	add.w	r2, r3, #8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr

08004d24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d103      	bne.n	8004d44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e00c      	b.n	8004d5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3308      	adds	r3, #8
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <vListInsert+0x2e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d2f6      	bcs.n	8004d4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6852      	ldr	r2, [r2, #4]
 8004db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d103      	bne.n	8004dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1e5a      	subs	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b08e      	sub	sp, #56	; 0x38
 8004dea:	af04      	add	r7, sp, #16
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <xTaskCreateStatic+0x46>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61fb      	str	r3, [r7, #28]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e2c:	23b4      	movs	r3, #180	; 0xb4
 8004e2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2bb4      	cmp	r3, #180	; 0xb4
 8004e34:	d00a      	beq.n	8004e4c <xTaskCreateStatic+0x66>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	61bb      	str	r3, [r7, #24]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01e      	beq.n	8004e90 <xTaskCreateStatic+0xaa>
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01b      	beq.n	8004e90 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9303      	str	r3, [sp, #12]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	9302      	str	r3, [sp, #8]
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f850 	bl	8004f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e8a:	f000 f8e3 	bl	8005054 <prvAddNewTaskToReadyList>
 8004e8e:	e001      	b.n	8004e94 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e94:	697b      	ldr	r3, [r7, #20]
	}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3728      	adds	r7, #40	; 0x28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b08c      	sub	sp, #48	; 0x30
 8004ea2:	af04      	add	r7, sp, #16
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fe94 	bl	8005be0 <pvPortMalloc>
 8004eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ec0:	20b4      	movs	r0, #180	; 0xb4
 8004ec2:	f000 fe8d 	bl	8005be0 <pvPortMalloc>
 8004ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ed4:	e005      	b.n	8004ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f000 ff46 	bl	8005d68 <vPortFree>
 8004edc:	e001      	b.n	8004ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9303      	str	r3, [sp, #12]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	9302      	str	r3, [sp, #8]
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f80e 	bl	8004f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0c:	69f8      	ldr	r0, [r7, #28]
 8004f0e:	f000 f8a1 	bl	8005054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e002      	b.n	8004f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f18:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f40:	3b01      	subs	r3, #1
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f023 0307 	bic.w	r3, r3, #7
 8004f4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	617b      	str	r3, [r7, #20]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e012      	b.n	8004f9c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	7819      	ldrb	r1, [r3, #0]
 8004f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	3334      	adds	r3, #52	; 0x34
 8004f86:	460a      	mov	r2, r1
 8004f88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d9e9      	bls.n	8004f76 <prvInitialiseNewTask+0x4e>
 8004fa2:	e000      	b.n	8004fa6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004fa4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d901      	bls.n	8004fb8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb4:	2306      	movs	r3, #6
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fe79 	bl	8004cc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	3318      	adds	r3, #24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fe74 	bl	8004cc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f1c3 0207 	rsb	r2, r3, #7
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	334c      	adds	r3, #76	; 0x4c
 8005008:	2260      	movs	r2, #96	; 0x60
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fff3 	bl	8005ff8 <memset>
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <prvInitialiseNewTask+0x120>)
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	4a0c      	ldr	r2, [pc, #48]	; (800504c <prvInitialiseNewTask+0x124>)
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <prvInitialiseNewTask+0x128>)
 8005022:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	69b8      	ldr	r0, [r7, #24]
 800502a:	f000 fc29 	bl	8005880 <pxPortInitialiseStack>
 800502e:	4602      	mov	r2, r0
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005040:	bf00      	nop
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08006288 	.word	0x08006288
 800504c:	080062a8 	.word	0x080062a8
 8005050:	08006268 	.word	0x08006268

08005054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800505c:	f000 fcfe 	bl	8005a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005060:	4b2a      	ldr	r3, [pc, #168]	; (800510c <prvAddNewTaskToReadyList+0xb8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <prvAddNewTaskToReadyList+0xb8>)
 8005068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800506a:	4b29      	ldr	r3, [pc, #164]	; (8005110 <prvAddNewTaskToReadyList+0xbc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005072:	4a27      	ldr	r2, [pc, #156]	; (8005110 <prvAddNewTaskToReadyList+0xbc>)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005078:	4b24      	ldr	r3, [pc, #144]	; (800510c <prvAddNewTaskToReadyList+0xb8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d110      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005080:	f000 fad2 	bl	8005628 <prvInitialiseTaskLists>
 8005084:	e00d      	b.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005086:	4b23      	ldr	r3, [pc, #140]	; (8005114 <prvAddNewTaskToReadyList+0xc0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800508e:	4b20      	ldr	r3, [pc, #128]	; (8005110 <prvAddNewTaskToReadyList+0xbc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d802      	bhi.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <prvAddNewTaskToReadyList+0xbc>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <prvAddNewTaskToReadyList+0xc4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <prvAddNewTaskToReadyList+0xc4>)
 80050aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	2201      	movs	r2, #1
 80050b2:	409a      	lsls	r2, r3
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <prvAddNewTaskToReadyList+0xcc>)
 80050cc:	441a      	add	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f7ff fe02 	bl	8004cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050da:	f000 fcef 	bl	8005abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <prvAddNewTaskToReadyList+0xc0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <prvAddNewTaskToReadyList+0xbc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d207      	bcs.n	8005104 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	200006a0 	.word	0x200006a0
 8005110:	200005a0 	.word	0x200005a0
 8005114:	200006ac 	.word	0x200006ac
 8005118:	200006bc 	.word	0x200006bc
 800511c:	200006a8 	.word	0x200006a8
 8005120:	200005a4 	.word	0x200005a4
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800513a:	4b13      	ldr	r3, [pc, #76]	; (8005188 <vTaskDelay+0x60>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <vTaskDelay+0x30>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60bb      	str	r3, [r7, #8]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005158:	f000 f884 	bl	8005264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800515c:	2100      	movs	r1, #0
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb28 	bl	80057b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005164:	f000 f88c 	bl	8005280 <xTaskResumeAll>
 8005168:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d107      	bne.n	8005180 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <vTaskDelay+0x64>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200006c8 	.word	0x200006c8
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800519e:	463a      	mov	r2, r7
 80051a0:	1d39      	adds	r1, r7, #4
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb ff2e 	bl	8001008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	9202      	str	r2, [sp, #8]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	460a      	mov	r2, r1
 80051be:	4921      	ldr	r1, [pc, #132]	; (8005244 <vTaskStartScheduler+0xb4>)
 80051c0:	4821      	ldr	r0, [pc, #132]	; (8005248 <vTaskStartScheduler+0xb8>)
 80051c2:	f7ff fe10 	bl	8004de6 <xTaskCreateStatic>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4a20      	ldr	r2, [pc, #128]	; (800524c <vTaskStartScheduler+0xbc>)
 80051ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051cc:	4b1f      	ldr	r3, [pc, #124]	; (800524c <vTaskStartScheduler+0xbc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051d4:	2301      	movs	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e001      	b.n	80051de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d11b      	bne.n	800521c <vTaskStartScheduler+0x8c>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	613b      	str	r3, [r7, #16]
}
 80051f6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051f8:	4b15      	ldr	r3, [pc, #84]	; (8005250 <vTaskStartScheduler+0xc0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	334c      	adds	r3, #76	; 0x4c
 80051fe:	4a15      	ldr	r2, [pc, #84]	; (8005254 <vTaskStartScheduler+0xc4>)
 8005200:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <vTaskStartScheduler+0xc8>)
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <vTaskStartScheduler+0xcc>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <vTaskStartScheduler+0xd0>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005216:	f000 fbaf 	bl	8005978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800521a:	e00e      	b.n	800523a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d10a      	bne.n	800523a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <vTaskStartScheduler+0xa8>
}
 800523a:	bf00      	nop
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	08006248 	.word	0x08006248
 8005248:	080055f9 	.word	0x080055f9
 800524c:	200006c4 	.word	0x200006c4
 8005250:	200005a0 	.word	0x200005a0
 8005254:	20000018 	.word	0x20000018
 8005258:	200006c0 	.word	0x200006c0
 800525c:	200006ac 	.word	0x200006ac
 8005260:	200006a4 	.word	0x200006a4

08005264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <vTaskSuspendAll+0x18>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	4a03      	ldr	r2, [pc, #12]	; (800527c <vTaskSuspendAll+0x18>)
 8005270:	6013      	str	r3, [r2, #0]
}
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200006c8 	.word	0x200006c8

08005280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800528e:	4b41      	ldr	r3, [pc, #260]	; (8005394 <xTaskResumeAll+0x114>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <xTaskResumeAll+0x2c>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	603b      	str	r3, [r7, #0]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052ac:	f000 fbd6 	bl	8005a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052b0:	4b38      	ldr	r3, [pc, #224]	; (8005394 <xTaskResumeAll+0x114>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	4a37      	ldr	r2, [pc, #220]	; (8005394 <xTaskResumeAll+0x114>)
 80052b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ba:	4b36      	ldr	r3, [pc, #216]	; (8005394 <xTaskResumeAll+0x114>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d161      	bne.n	8005386 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052c2:	4b35      	ldr	r3, [pc, #212]	; (8005398 <xTaskResumeAll+0x118>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d05d      	beq.n	8005386 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ca:	e02e      	b.n	800532a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052cc:	4b33      	ldr	r3, [pc, #204]	; (800539c <xTaskResumeAll+0x11c>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3318      	adds	r3, #24
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fd5b 	bl	8004d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fd56 	bl	8004d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	4b2b      	ldr	r3, [pc, #172]	; (80053a0 <xTaskResumeAll+0x120>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	4a2a      	ldr	r2, [pc, #168]	; (80053a0 <xTaskResumeAll+0x120>)
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <xTaskResumeAll+0x124>)
 8005308:	441a      	add	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3304      	adds	r3, #4
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f7ff fce4 	bl	8004cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <xTaskResumeAll+0x128>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005324:	4b21      	ldr	r3, [pc, #132]	; (80053ac <xTaskResumeAll+0x12c>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <xTaskResumeAll+0x11c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1cc      	bne.n	80052cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005338:	f000 fa18 	bl	800576c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800533c:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <xTaskResumeAll+0x130>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005348:	f000 f836 	bl	80053b8 <xTaskIncrementTick>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005352:	4b16      	ldr	r3, [pc, #88]	; (80053ac <xTaskResumeAll+0x12c>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3b01      	subs	r3, #1
 800535c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f1      	bne.n	8005348 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005364:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <xTaskResumeAll+0x130>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <xTaskResumeAll+0x12c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <xTaskResumeAll+0x134>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005386:	f000 fb99 	bl	8005abc <vPortExitCritical>

	return xAlreadyYielded;
 800538a:	68bb      	ldr	r3, [r7, #8]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200006c8 	.word	0x200006c8
 8005398:	200006a0 	.word	0x200006a0
 800539c:	20000660 	.word	0x20000660
 80053a0:	200006a8 	.word	0x200006a8
 80053a4:	200005a4 	.word	0x200005a4
 80053a8:	200005a0 	.word	0x200005a0
 80053ac:	200006b4 	.word	0x200006b4
 80053b0:	200006b0 	.word	0x200006b0
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <xTaskIncrementTick+0x150>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 808d 	bne.w	80054e6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053cc:	4b4f      	ldr	r3, [pc, #316]	; (800550c <xTaskIncrementTick+0x154>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053d4:	4a4d      	ldr	r2, [pc, #308]	; (800550c <xTaskIncrementTick+0x154>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d120      	bne.n	8005422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053e0:	4b4b      	ldr	r3, [pc, #300]	; (8005510 <xTaskIncrementTick+0x158>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <xTaskIncrementTick+0x48>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	603b      	str	r3, [r7, #0]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <xTaskIncrementTick+0x46>
 8005400:	4b43      	ldr	r3, [pc, #268]	; (8005510 <xTaskIncrementTick+0x158>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b43      	ldr	r3, [pc, #268]	; (8005514 <xTaskIncrementTick+0x15c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a41      	ldr	r2, [pc, #260]	; (8005510 <xTaskIncrementTick+0x158>)
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4a41      	ldr	r2, [pc, #260]	; (8005514 <xTaskIncrementTick+0x15c>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b40      	ldr	r3, [pc, #256]	; (8005518 <xTaskIncrementTick+0x160>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <xTaskIncrementTick+0x160>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	f000 f9a5 	bl	800576c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005422:	4b3e      	ldr	r3, [pc, #248]	; (800551c <xTaskIncrementTick+0x164>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	429a      	cmp	r2, r3
 800542a:	d34d      	bcc.n	80054c8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542c:	4b38      	ldr	r3, [pc, #224]	; (8005510 <xTaskIncrementTick+0x158>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xTaskIncrementTick+0x82>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xTaskIncrementTick+0x84>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <xTaskIncrementTick+0x164>)
 8005442:	f04f 32ff 	mov.w	r2, #4294967295
 8005446:	601a      	str	r2, [r3, #0]
					break;
 8005448:	e03e      	b.n	80054c8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800544a:	4b31      	ldr	r3, [pc, #196]	; (8005510 <xTaskIncrementTick+0x158>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d203      	bcs.n	800546a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005462:	4a2e      	ldr	r2, [pc, #184]	; (800551c <xTaskIncrementTick+0x164>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6013      	str	r3, [r2, #0]
						break;
 8005468:	e02e      	b.n	80054c8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3304      	adds	r3, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fc90 	bl	8004d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3318      	adds	r3, #24
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fc87 	bl	8004d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	2201      	movs	r2, #1
 800548c:	409a      	lsls	r2, r3
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <xTaskIncrementTick+0x168>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	4a22      	ldr	r2, [pc, #136]	; (8005520 <xTaskIncrementTick+0x168>)
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <xTaskIncrementTick+0x16c>)
 80054a6:	441a      	add	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7ff fc15 	bl	8004cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <xTaskIncrementTick+0x170>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3b4      	bcc.n	800542c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c6:	e7b1      	b.n	800542c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <xTaskIncrementTick+0x170>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4915      	ldr	r1, [pc, #84]	; (8005524 <xTaskIncrementTick+0x16c>)
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e004      	b.n	80054f0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <xTaskIncrementTick+0x174>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a0f      	ldr	r2, [pc, #60]	; (800552c <xTaskIncrementTick+0x174>)
 80054ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTaskIncrementTick+0x178>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200006c8 	.word	0x200006c8
 800550c:	200006a4 	.word	0x200006a4
 8005510:	20000658 	.word	0x20000658
 8005514:	2000065c 	.word	0x2000065c
 8005518:	200006b8 	.word	0x200006b8
 800551c:	200006c0 	.word	0x200006c0
 8005520:	200006a8 	.word	0x200006a8
 8005524:	200005a4 	.word	0x200005a4
 8005528:	200005a0 	.word	0x200005a0
 800552c:	200006b0 	.word	0x200006b0
 8005530:	200006b4 	.word	0x200006b4

08005534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800553a:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <vTaskSwitchContext+0xac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005542:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <vTaskSwitchContext+0xb0>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005548:	e044      	b.n	80055d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800554a:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <vTaskSwitchContext+0xb0>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <vTaskSwitchContext+0xb4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800555e:	7afb      	ldrb	r3, [r7, #11]
 8005560:	f1c3 031f 	rsb	r3, r3, #31
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	4921      	ldr	r1, [pc, #132]	; (80055ec <vTaskSwitchContext+0xb8>)
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <vTaskSwitchContext+0x5c>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <vTaskSwitchContext+0x5a>
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4a14      	ldr	r2, [pc, #80]	; (80055ec <vTaskSwitchContext+0xb8>)
 800559c:	4413      	add	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3308      	adds	r3, #8
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d104      	bne.n	80055c0 <vTaskSwitchContext+0x8c>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <vTaskSwitchContext+0xbc>)
 80055c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <vTaskSwitchContext+0xbc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	334c      	adds	r3, #76	; 0x4c
 80055d0:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <vTaskSwitchContext+0xc0>)
 80055d2:	6013      	str	r3, [r2, #0]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	200006c8 	.word	0x200006c8
 80055e4:	200006b4 	.word	0x200006b4
 80055e8:	200006a8 	.word	0x200006a8
 80055ec:	200005a4 	.word	0x200005a4
 80055f0:	200005a0 	.word	0x200005a0
 80055f4:	20000018 	.word	0x20000018

080055f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005600:	f000 f852 	bl	80056a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <prvIdleTask+0x28>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d9f9      	bls.n	8005600 <prvIdleTask+0x8>
			{
				taskYIELD();
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <prvIdleTask+0x2c>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800561c:	e7f0      	b.n	8005600 <prvIdleTask+0x8>
 800561e:	bf00      	nop
 8005620:	200005a4 	.word	0x200005a4
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	e00c      	b.n	800564e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <prvInitialiseTaskLists+0x60>)
 8005640:	4413      	add	r3, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fb20 	bl	8004c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3301      	adds	r3, #1
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b06      	cmp	r3, #6
 8005652:	d9ef      	bls.n	8005634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005654:	480d      	ldr	r0, [pc, #52]	; (800568c <prvInitialiseTaskLists+0x64>)
 8005656:	f7ff fb17 	bl	8004c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800565a:	480d      	ldr	r0, [pc, #52]	; (8005690 <prvInitialiseTaskLists+0x68>)
 800565c:	f7ff fb14 	bl	8004c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005660:	480c      	ldr	r0, [pc, #48]	; (8005694 <prvInitialiseTaskLists+0x6c>)
 8005662:	f7ff fb11 	bl	8004c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005666:	480c      	ldr	r0, [pc, #48]	; (8005698 <prvInitialiseTaskLists+0x70>)
 8005668:	f7ff fb0e 	bl	8004c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800566c:	480b      	ldr	r0, [pc, #44]	; (800569c <prvInitialiseTaskLists+0x74>)
 800566e:	f7ff fb0b 	bl	8004c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <prvInitialiseTaskLists+0x78>)
 8005674:	4a05      	ldr	r2, [pc, #20]	; (800568c <prvInitialiseTaskLists+0x64>)
 8005676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <prvInitialiseTaskLists+0x7c>)
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <prvInitialiseTaskLists+0x68>)
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200005a4 	.word	0x200005a4
 800568c:	20000630 	.word	0x20000630
 8005690:	20000644 	.word	0x20000644
 8005694:	20000660 	.word	0x20000660
 8005698:	20000674 	.word	0x20000674
 800569c:	2000068c 	.word	0x2000068c
 80056a0:	20000658 	.word	0x20000658
 80056a4:	2000065c 	.word	0x2000065c

080056a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ae:	e019      	b.n	80056e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056b0:	f000 f9d4 	bl	8005a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056b4:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <prvCheckTasksWaitingTermination+0x50>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fb67 	bl	8004d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <prvCheckTasksWaitingTermination+0x54>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <prvCheckTasksWaitingTermination+0x54>)
 80056ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056da:	f000 f9ef 	bl	8005abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f810 	bl	8005704 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e1      	bne.n	80056b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000674 	.word	0x20000674
 80056fc:	200006a0 	.word	0x200006a0
 8005700:	20000688 	.word	0x20000688

08005704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	334c      	adds	r3, #76	; 0x4c
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fc87 	bl	8006024 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d108      	bne.n	8005732 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb1f 	bl	8005d68 <vPortFree>
				vPortFree( pxTCB );
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fb1c 	bl	8005d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005730:	e018      	b.n	8005764 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d103      	bne.n	8005744 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb13 	bl	8005d68 <vPortFree>
	}
 8005742:	e00f      	b.n	8005764 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800574a:	2b02      	cmp	r3, #2
 800574c:	d00a      	beq.n	8005764 <prvDeleteTCB+0x60>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <prvDeleteTCB+0x5e>
	}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005772:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <prvResetNextTaskUnblockTime+0x40>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <prvResetNextTaskUnblockTime+0x14>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <prvResetNextTaskUnblockTime+0x16>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <prvResetNextTaskUnblockTime+0x44>)
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800578e:	e008      	b.n	80057a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <prvResetNextTaskUnblockTime+0x40>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <prvResetNextTaskUnblockTime+0x44>)
 80057a0:	6013      	str	r3, [r2, #0]
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	20000658 	.word	0x20000658
 80057b0:	200006c0 	.word	0x200006c0

080057b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057c4:	4b28      	ldr	r3, [pc, #160]	; (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fae2 	bl	8004d94 <uxListRemove>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	2201      	movs	r2, #1
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43da      	mvns	r2, r3
 80057e4:	4b21      	ldr	r3, [pc, #132]	; (800586c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	4a20      	ldr	r2, [pc, #128]	; (800586c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d10a      	bne.n	800580c <prvAddCurrentTaskToDelayedList+0x58>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	481a      	ldr	r0, [pc, #104]	; (8005870 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005806:	f7ff fa6a 	bl	8004cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800580a:	e026      	b.n	800585a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d209      	bcs.n	8005838 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005824:	4b13      	ldr	r3, [pc, #76]	; (8005874 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3304      	adds	r3, #4
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f7ff fa77 	bl	8004d24 <vListInsert>
}
 8005836:	e010      	b.n	800585a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <prvAddCurrentTaskToDelayedList+0xc4>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7ff fa6d 	bl	8004d24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <prvAddCurrentTaskToDelayedList+0xc8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d202      	bcs.n	800585a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6013      	str	r3, [r2, #0]
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200006a4 	.word	0x200006a4
 8005868:	200005a0 	.word	0x200005a0
 800586c:	200006a8 	.word	0x200006a8
 8005870:	2000068c 	.word	0x2000068c
 8005874:	2000065c 	.word	0x2000065c
 8005878:	20000658 	.word	0x20000658
 800587c:	200006c0 	.word	0x200006c0

08005880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b04      	subs	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b04      	subs	r3, #4
 800589e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <pxPortInitialiseStack+0x54>)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3b14      	subs	r3, #20
 80058ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3b20      	subs	r3, #32
 80058c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058c8:	68fb      	ldr	r3, [r7, #12]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	080058d9 	.word	0x080058d9

080058d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80058de:	2300      	movs	r3, #0
 80058e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <prvTaskExitError+0x54>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d00a      	beq.n	8005902 <prvTaskExitError+0x2a>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <prvTaskExitError+0x28>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60bb      	str	r3, [r7, #8]
}
 8005914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005916:	bf00      	nop
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0fc      	beq.n	8005918 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000014 	.word	0x20000014

08005930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	f04e 0e0d 	orr.w	lr, lr, #13
 800594e:	4770      	bx	lr

08005950 <pxCurrentTCBConst2>:
 8005950:	200005a0 	.word	0x200005a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005958:	4806      	ldr	r0, [pc, #24]	; (8005974 <prvPortStartFirstTask+0x1c>)
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f380 8808 	msr	MSP, r0
 8005962:	b662      	cpsie	i
 8005964:	b661      	cpsie	f
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	df00      	svc	0
 8005970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005972:	bf00      	nop
 8005974:	e000ed08 	.word	0xe000ed08

08005978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800597e:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <xPortStartScheduler+0xd0>)
 8005980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <xPortStartScheduler+0xd4>)
 80059a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059a6:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059a8:	2207      	movs	r2, #7
 80059aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ac:	e009      	b.n	80059c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80059ae:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d0ef      	beq.n	80059ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1c3 0307 	rsb	r3, r3, #7
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d00a      	beq.n	80059f0 <xPortStartScheduler+0x78>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60bb      	str	r3, [r7, #8]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a02:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <xPortStartScheduler+0xd8>)
 8005a04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a26:	f000 f8b9 	bl	8005b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <xPortStartScheduler+0xe0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a30:	f7ff ff92 	bl	8005958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a34:	f7ff fd7e 	bl	8005534 <vTaskSwitchContext>
	prvTaskExitError();
 8005a38:	f7ff ff4e 	bl	80058d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	e000e400 	.word	0xe000e400
 8005a4c:	200006cc 	.word	0x200006cc
 8005a50:	200006d0 	.word	0x200006d0
 8005a54:	e000ed20 	.word	0xe000ed20
 8005a58:	20000014 	.word	0x20000014

08005a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <vPortEnterCritical+0x58>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	; (8005ab4 <vPortEnterCritical+0x58>)
 8005a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <vPortEnterCritical+0x58>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d10f      	bne.n	8005aa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <vPortEnterCritical+0x5c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	603b      	str	r3, [r7, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortEnterCritical+0x4a>
	}
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000014 	.word	0x20000014
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <vPortExitCritical+0x4c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <vPortExitCritical+0x24>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <vPortExitCritical+0x4c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <vPortExitCritical+0x4c>)
 8005ae8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <vPortExitCritical+0x4c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d105      	bne.n	8005afe <vPortExitCritical+0x42>
 8005af2:	2300      	movs	r3, #0
 8005af4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005afc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	20000014 	.word	0x20000014
 8005b0c:	00000000 	.word	0x00000000

08005b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b10:	f3ef 8009 	mrs	r0, PSP
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <pxCurrentTCBConst>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b20:	6010      	str	r0, [r2, #0]
 8005b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b2a:	f380 8811 	msr	BASEPRI, r0
 8005b2e:	f7ff fd01 	bl	8005534 <vTaskSwitchContext>
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8811 	msr	BASEPRI, r0
 8005b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b46:	f380 8809 	msr	PSP, r0
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	4770      	bx	lr

08005b50 <pxCurrentTCBConst>:
 8005b50:	200005a0 	.word	0x200005a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7ff fc21 	bl	80053b8 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x30>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <vPortSetupTimerInterrupt+0x30>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	e000e010 	.word	0xe000e010
 8005bd0:	e000e018 	.word	0xe000e018
 8005bd4:	20000008 	.word	0x20000008
 8005bd8:	10624dd3 	.word	0x10624dd3
 8005bdc:	e000e014 	.word	0xe000e014

08005be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bec:	f7ff fb3a 	bl	8005264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bf0:	4b58      	ldr	r3, [pc, #352]	; (8005d54 <pvPortMalloc+0x174>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bf8:	f000 f910 	bl	8005e1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bfc:	4b56      	ldr	r3, [pc, #344]	; (8005d58 <pvPortMalloc+0x178>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f040 808e 	bne.w	8005d26 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01d      	beq.n	8005c4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c10:	2208      	movs	r2, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d014      	beq.n	8005c4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f023 0307 	bic.w	r3, r3, #7
 8005c28:	3308      	adds	r3, #8
 8005c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <pvPortMalloc+0x6c>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	617b      	str	r3, [r7, #20]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d069      	beq.n	8005d26 <pvPortMalloc+0x146>
 8005c52:	4b42      	ldr	r3, [pc, #264]	; (8005d5c <pvPortMalloc+0x17c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d864      	bhi.n	8005d26 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c5c:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <pvPortMalloc+0x180>)
 8005c5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c60:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <pvPortMalloc+0x180>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c66:	e004      	b.n	8005c72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d903      	bls.n	8005c84 <pvPortMalloc+0xa4>
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f1      	bne.n	8005c68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c84:	4b33      	ldr	r3, [pc, #204]	; (8005d54 <pvPortMalloc+0x174>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d04b      	beq.n	8005d26 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2208      	movs	r2, #8
 8005c94:	4413      	add	r3, r2
 8005c96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	2308      	movs	r3, #8
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d91f      	bls.n	8005cf0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <pvPortMalloc+0xf8>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	613b      	str	r3, [r7, #16]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f000 f8f8 	bl	8005ee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <pvPortMalloc+0x17c>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <pvPortMalloc+0x17c>)
 8005cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <pvPortMalloc+0x17c>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <pvPortMalloc+0x184>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d203      	bcs.n	8005d12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <pvPortMalloc+0x17c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <pvPortMalloc+0x184>)
 8005d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <pvPortMalloc+0x178>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d26:	f7ff faab 	bl	8005280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <pvPortMalloc+0x16a>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60fb      	str	r3, [r7, #12]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <pvPortMalloc+0x168>
	return pvReturn;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3728      	adds	r7, #40	; 0x28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	200012dc 	.word	0x200012dc
 8005d58:	200012e8 	.word	0x200012e8
 8005d5c:	200012e0 	.word	0x200012e0
 8005d60:	200012d4 	.word	0x200012d4
 8005d64:	200012e4 	.word	0x200012e4

08005d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d048      	beq.n	8005e0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	425b      	negs	r3, r3
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <vPortFree+0xac>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <vPortFree+0x44>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <vPortFree+0x62>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	60bb      	str	r3, [r7, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <vPortFree+0xac>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d019      	beq.n	8005e0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d115      	bne.n	8005e0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <vPortFree+0xac>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	401a      	ands	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005df0:	f7ff fa38 	bl	8005264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <vPortFree+0xb0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	4a06      	ldr	r2, [pc, #24]	; (8005e18 <vPortFree+0xb0>)
 8005e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e02:	6938      	ldr	r0, [r7, #16]
 8005e04:	f000 f86c 	bl	8005ee0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e08:	f7ff fa3a 	bl	8005280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e0c:	bf00      	nop
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	200012e8 	.word	0x200012e8
 8005e18:	200012e0 	.word	0x200012e0

08005e1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e28:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <prvHeapInit+0xac>)
 8005e2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3307      	adds	r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0307 	bic.w	r3, r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <prvHeapInit+0xac>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <prvHeapInit+0xb0>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <prvHeapInit+0xb0>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e68:	2208      	movs	r2, #8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <prvHeapInit+0xb8>)
 8005eaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <prvHeapInit+0xbc>)
 8005eb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <prvHeapInit+0xc0>)
 8005eb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	200006d4 	.word	0x200006d4
 8005ecc:	200012d4 	.word	0x200012d4
 8005ed0:	200012dc 	.word	0x200012dc
 8005ed4:	200012e4 	.word	0x200012e4
 8005ed8:	200012e0 	.word	0x200012e0
 8005edc:	200012e8 	.word	0x200012e8

08005ee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ee8:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <prvInsertBlockIntoFreeList+0xa8>)
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e002      	b.n	8005ef4 <prvInsertBlockIntoFreeList+0x14>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d8f7      	bhi.n	8005eee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d108      	bne.n	8005f22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d118      	bne.n	8005f68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <prvInsertBlockIntoFreeList+0xac>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d00d      	beq.n	8005f5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	441a      	add	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e008      	b.n	8005f70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <prvInsertBlockIntoFreeList+0xac>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e003      	b.n	8005f70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d002      	beq.n	8005f7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	200012d4 	.word	0x200012d4
 8005f8c:	200012dc 	.word	0x200012dc

08005f90 <__libc_init_array>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	2600      	movs	r6, #0
 8005f94:	4d0c      	ldr	r5, [pc, #48]	; (8005fc8 <__libc_init_array+0x38>)
 8005f96:	4c0d      	ldr	r4, [pc, #52]	; (8005fcc <__libc_init_array+0x3c>)
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	42a6      	cmp	r6, r4
 8005f9e:	d109      	bne.n	8005fb4 <__libc_init_array+0x24>
 8005fa0:	f000 f8f0 	bl	8006184 <_init>
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	4d0a      	ldr	r5, [pc, #40]	; (8005fd0 <__libc_init_array+0x40>)
 8005fa8:	4c0a      	ldr	r4, [pc, #40]	; (8005fd4 <__libc_init_array+0x44>)
 8005faa:	1b64      	subs	r4, r4, r5
 8005fac:	10a4      	asrs	r4, r4, #2
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	d105      	bne.n	8005fbe <__libc_init_array+0x2e>
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb8:	4798      	blx	r3
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7ee      	b.n	8005f9c <__libc_init_array+0xc>
 8005fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc2:	4798      	blx	r3
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7f2      	b.n	8005fae <__libc_init_array+0x1e>
 8005fc8:	080062c8 	.word	0x080062c8
 8005fcc:	080062c8 	.word	0x080062c8
 8005fd0:	080062c8 	.word	0x080062c8
 8005fd4:	080062cc 	.word	0x080062cc

08005fd8 <__retarget_lock_acquire_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <__retarget_lock_release_recursive>:
 8005fda:	4770      	bx	lr

08005fdc <memcpy>:
 8005fdc:	440a      	add	r2, r1
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe4:	d100      	bne.n	8005fe8 <memcpy+0xc>
 8005fe6:	4770      	bx	lr
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff4:	d1f9      	bne.n	8005fea <memcpy+0xe>
 8005ff6:	bd10      	pop	{r4, pc}

08005ff8 <memset>:
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4402      	add	r2, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d100      	bne.n	8006002 <memset+0xa>
 8006000:	4770      	bx	lr
 8006002:	f803 1b01 	strb.w	r1, [r3], #1
 8006006:	e7f9      	b.n	8005ffc <memset+0x4>

08006008 <cleanup_glue>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	460c      	mov	r4, r1
 800600c:	6809      	ldr	r1, [r1, #0]
 800600e:	4605      	mov	r5, r0
 8006010:	b109      	cbz	r1, 8006016 <cleanup_glue+0xe>
 8006012:	f7ff fff9 	bl	8006008 <cleanup_glue>
 8006016:	4621      	mov	r1, r4
 8006018:	4628      	mov	r0, r5
 800601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601e:	f000 b869 	b.w	80060f4 <_free_r>
	...

08006024 <_reclaim_reent>:
 8006024:	4b2c      	ldr	r3, [pc, #176]	; (80060d8 <_reclaim_reent+0xb4>)
 8006026:	b570      	push	{r4, r5, r6, lr}
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4604      	mov	r4, r0
 800602c:	4283      	cmp	r3, r0
 800602e:	d051      	beq.n	80060d4 <_reclaim_reent+0xb0>
 8006030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006032:	b143      	cbz	r3, 8006046 <_reclaim_reent+0x22>
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d14a      	bne.n	80060d0 <_reclaim_reent+0xac>
 800603a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800603c:	6819      	ldr	r1, [r3, #0]
 800603e:	b111      	cbz	r1, 8006046 <_reclaim_reent+0x22>
 8006040:	4620      	mov	r0, r4
 8006042:	f000 f857 	bl	80060f4 <_free_r>
 8006046:	6961      	ldr	r1, [r4, #20]
 8006048:	b111      	cbz	r1, 8006050 <_reclaim_reent+0x2c>
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f852 	bl	80060f4 <_free_r>
 8006050:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006052:	b111      	cbz	r1, 800605a <_reclaim_reent+0x36>
 8006054:	4620      	mov	r0, r4
 8006056:	f000 f84d 	bl	80060f4 <_free_r>
 800605a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800605c:	b111      	cbz	r1, 8006064 <_reclaim_reent+0x40>
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f848 	bl	80060f4 <_free_r>
 8006064:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006066:	b111      	cbz	r1, 800606e <_reclaim_reent+0x4a>
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f843 	bl	80060f4 <_free_r>
 800606e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006070:	b111      	cbz	r1, 8006078 <_reclaim_reent+0x54>
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f83e 	bl	80060f4 <_free_r>
 8006078:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800607a:	b111      	cbz	r1, 8006082 <_reclaim_reent+0x5e>
 800607c:	4620      	mov	r0, r4
 800607e:	f000 f839 	bl	80060f4 <_free_r>
 8006082:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006084:	b111      	cbz	r1, 800608c <_reclaim_reent+0x68>
 8006086:	4620      	mov	r0, r4
 8006088:	f000 f834 	bl	80060f4 <_free_r>
 800608c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800608e:	b111      	cbz	r1, 8006096 <_reclaim_reent+0x72>
 8006090:	4620      	mov	r0, r4
 8006092:	f000 f82f 	bl	80060f4 <_free_r>
 8006096:	69a3      	ldr	r3, [r4, #24]
 8006098:	b1e3      	cbz	r3, 80060d4 <_reclaim_reent+0xb0>
 800609a:	4620      	mov	r0, r4
 800609c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800609e:	4798      	blx	r3
 80060a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060a2:	b1b9      	cbz	r1, 80060d4 <_reclaim_reent+0xb0>
 80060a4:	4620      	mov	r0, r4
 80060a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060aa:	f7ff bfad 	b.w	8006008 <cleanup_glue>
 80060ae:	5949      	ldr	r1, [r1, r5]
 80060b0:	b941      	cbnz	r1, 80060c4 <_reclaim_reent+0xa0>
 80060b2:	3504      	adds	r5, #4
 80060b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b6:	2d80      	cmp	r5, #128	; 0x80
 80060b8:	68d9      	ldr	r1, [r3, #12]
 80060ba:	d1f8      	bne.n	80060ae <_reclaim_reent+0x8a>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 f819 	bl	80060f4 <_free_r>
 80060c2:	e7ba      	b.n	800603a <_reclaim_reent+0x16>
 80060c4:	680e      	ldr	r6, [r1, #0]
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f814 	bl	80060f4 <_free_r>
 80060cc:	4631      	mov	r1, r6
 80060ce:	e7ef      	b.n	80060b0 <_reclaim_reent+0x8c>
 80060d0:	2500      	movs	r5, #0
 80060d2:	e7ef      	b.n	80060b4 <_reclaim_reent+0x90>
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	bf00      	nop
 80060d8:	20000018 	.word	0x20000018

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_lock+0x8>)
 80060de:	f7ff bf7b 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	200012ec 	.word	0x200012ec

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f7ff bf76 	b.w	8005fda <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	200012ec 	.word	0x200012ec

080060f4 <_free_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4605      	mov	r5, r0
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d040      	beq.n	800617e <_free_r+0x8a>
 80060fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006100:	1f0c      	subs	r4, r1, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	bfb8      	it	lt
 8006106:	18e4      	addlt	r4, r4, r3
 8006108:	f7ff ffe8 	bl	80060dc <__malloc_lock>
 800610c:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <_free_r+0x8c>)
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	b933      	cbnz	r3, 8006120 <_free_r+0x2c>
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6014      	str	r4, [r2, #0]
 8006116:	4628      	mov	r0, r5
 8006118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800611c:	f7ff bfe4 	b.w	80060e8 <__malloc_unlock>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d908      	bls.n	8006136 <_free_r+0x42>
 8006124:	6820      	ldr	r0, [r4, #0]
 8006126:	1821      	adds	r1, r4, r0
 8006128:	428b      	cmp	r3, r1
 800612a:	bf01      	itttt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	1809      	addeq	r1, r1, r0
 8006132:	6021      	streq	r1, [r4, #0]
 8006134:	e7ed      	b.n	8006112 <_free_r+0x1e>
 8006136:	461a      	mov	r2, r3
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b10b      	cbz	r3, 8006140 <_free_r+0x4c>
 800613c:	42a3      	cmp	r3, r4
 800613e:	d9fa      	bls.n	8006136 <_free_r+0x42>
 8006140:	6811      	ldr	r1, [r2, #0]
 8006142:	1850      	adds	r0, r2, r1
 8006144:	42a0      	cmp	r0, r4
 8006146:	d10b      	bne.n	8006160 <_free_r+0x6c>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	4401      	add	r1, r0
 800614c:	1850      	adds	r0, r2, r1
 800614e:	4283      	cmp	r3, r0
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	d1e0      	bne.n	8006116 <_free_r+0x22>
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4401      	add	r1, r0
 800615a:	6011      	str	r1, [r2, #0]
 800615c:	6053      	str	r3, [r2, #4]
 800615e:	e7da      	b.n	8006116 <_free_r+0x22>
 8006160:	d902      	bls.n	8006168 <_free_r+0x74>
 8006162:	230c      	movs	r3, #12
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	e7d6      	b.n	8006116 <_free_r+0x22>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	1821      	adds	r1, r4, r0
 800616c:	428b      	cmp	r3, r1
 800616e:	bf01      	itttt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	1809      	addeq	r1, r1, r0
 8006176:	6021      	streq	r1, [r4, #0]
 8006178:	6063      	str	r3, [r4, #4]
 800617a:	6054      	str	r4, [r2, #4]
 800617c:	e7cb      	b.n	8006116 <_free_r+0x22>
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	200012f0 	.word	0x200012f0

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
