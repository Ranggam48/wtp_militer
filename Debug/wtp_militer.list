
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800850c  0800850c  0001850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008688  08008688  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001324  20000078  08008708  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  08008708  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab37  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dbd  00000000  00000000  0003abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  0003e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00040130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b576  00000000  00000000  000417b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a770  00000000  00000000  0005cd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ca02  00000000  00000000  0007749e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113ea0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  00113ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080084f4 	.word	0x080084f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080084f4 	.word	0x080084f4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__gesf2>:
 8000d60:	f04f 3cff 	mov.w	ip, #4294967295
 8000d64:	e006      	b.n	8000d74 <__cmpsf2+0x4>
 8000d66:	bf00      	nop

08000d68 <__lesf2>:
 8000d68:	f04f 0c01 	mov.w	ip, #1
 8000d6c:	e002      	b.n	8000d74 <__cmpsf2+0x4>
 8000d6e:	bf00      	nop

08000d70 <__cmpsf2>:
 8000d70:	f04f 0c01 	mov.w	ip, #1
 8000d74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	bf18      	it	ne
 8000d86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8a:	d011      	beq.n	8000db0 <__cmpsf2+0x40>
 8000d8c:	b001      	add	sp, #4
 8000d8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d92:	bf18      	it	ne
 8000d94:	ea90 0f01 	teqne	r0, r1
 8000d98:	bf58      	it	pl
 8000d9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d9e:	bf88      	it	hi
 8000da0:	17c8      	asrhi	r0, r1, #31
 8000da2:	bf38      	it	cc
 8000da4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000da8:	bf18      	it	ne
 8000daa:	f040 0001 	orrne.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db4:	d102      	bne.n	8000dbc <__cmpsf2+0x4c>
 8000db6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dba:	d105      	bne.n	8000dc8 <__cmpsf2+0x58>
 8000dbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dc0:	d1e4      	bne.n	8000d8c <__cmpsf2+0x1c>
 8000dc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dc6:	d0e1      	beq.n	8000d8c <__cmpsf2+0x1c>
 8000dc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__aeabi_cfrcmple>:
 8000dd0:	4684      	mov	ip, r0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	4661      	mov	r1, ip
 8000dd6:	e7ff      	b.n	8000dd8 <__aeabi_cfcmpeq>

08000dd8 <__aeabi_cfcmpeq>:
 8000dd8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dda:	f7ff ffc9 	bl	8000d70 <__cmpsf2>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf48      	it	mi
 8000de2:	f110 0f00 	cmnmi.w	r0, #0
 8000de6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000de8 <__aeabi_fcmpeq>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff fff4 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000df0:	bf0c      	ite	eq
 8000df2:	2001      	moveq	r0, #1
 8000df4:	2000      	movne	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_fcmplt>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffea 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000e04:	bf34      	ite	cc
 8000e06:	2001      	movcc	r0, #1
 8000e08:	2000      	movcs	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_fcmple>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffe0 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000e18:	bf94      	ite	ls
 8000e1a:	2001      	movls	r0, #1
 8000e1c:	2000      	movhi	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmpge>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffd2 	bl	8000dd0 <__aeabi_cfrcmple>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmpgt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffc8 	bl	8000dd0 <__aeabi_cfrcmple>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_f2uiz>:
 8000e4c:	0042      	lsls	r2, r0, #1
 8000e4e:	d20e      	bcs.n	8000e6e <__aeabi_f2uiz+0x22>
 8000e50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e54:	d30b      	bcc.n	8000e6e <__aeabi_f2uiz+0x22>
 8000e56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5e:	d409      	bmi.n	8000e74 <__aeabi_f2uiz+0x28>
 8000e60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	4770      	bx	lr
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4770      	bx	lr
 8000e74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e78:	d101      	bne.n	8000e7e <__aeabi_f2uiz+0x32>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d102      	bne.n	8000e84 <__aeabi_f2uiz+0x38>
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e82:	4770      	bx	lr
 8000e84:	f04f 0000 	mov.w	r0, #0
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <bytestowrite>:

/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite(uint16_t size, uint16_t offset) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	460a      	mov	r2, r1
 8000e96:	80fb      	strh	r3, [r7, #6]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	80bb      	strh	r3, [r7, #4]
	if ((size + offset) < PAGE_SIZE)
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea4:	dc01      	bgt.n	8000eaa <bytestowrite+0x1e>
		return size;
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	e003      	b.n	8000eb2 <bytestowrite+0x26>
	else
		return PAGE_SIZE - offset;
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000eb0:	b29b      	uxth	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <EEPROM_Write>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	60ba      	str	r2, [r7, #8]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	81fb      	strh	r3, [r7, #14]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	81bb      	strh	r3, [r7, #12]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE) / log(2);
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da00      	bge.n	8000ee6 <EEPROM_Write+0x2a>
 8000ee4:	333f      	adds	r3, #63	; 0x3f
 8000ee6:	119b      	asrs	r3, r3, #6
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	4413      	add	r3, r2
 8000eee:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage - startPage) + 1;
 8000ef0:	8b7a      	ldrh	r2, [r7, #26]
 8000ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i = 0; i < numofpages; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
 8000f04:	e034      	b.n	8000f70 <EEPROM_Write+0xb4>
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage << paddrposition | offset;
 8000f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset); // calculate the remaining bytes to be written
 8000f1a:	89ba      	ldrh	r2, [r7, #12]
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffb3 	bl	8000e8c <bytestowrite>
 8000f26:	4603      	mov	r3, r0
 8000f28:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 8000f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4413      	add	r3, r2
 8000f30:	8af9      	ldrh	r1, [r7, #22]
 8000f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f36:	9202      	str	r2, [sp, #8]
 8000f38:	8aba      	ldrh	r2, [r7, #20]
 8000f3a:	9201      	str	r2, [sp, #4]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2302      	movs	r3, #2
 8000f40:	460a      	mov	r2, r1
 8000f42:	21a0      	movs	r1, #160	; 0xa0
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <EEPROM_Write+0xc8>)
 8000f46:	f003 fafb 	bl	8004540 <HAL_I2C_Mem_Write>
				bytesremaining, 1000);  // write the data to the EEPROM

		startPage += 1; // increment the page, so that a new page address can be selected for further write
 8000f4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0; // since we will be writing to a new page, so offset will be 0
 8000f50:	2300      	movs	r3, #0
 8000f52:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;  // reduce the size of the bytes
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	8abb      	ldrh	r3, [r7, #20]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000f5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f5e:	8abb      	ldrh	r3, [r7, #20]
 8000f60:	4413      	add	r3, r2
 8000f62:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);  // Write cycle delay (5ms)
 8000f64:	2005      	movs	r0, #5
 8000f66:	f001 ff9b 	bl	8002ea0 <HAL_Delay>
	for (int i = 0; i < numofpages; i++) {
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	8b3b      	ldrh	r3, [r7, #24]
 8000f72:	6a3a      	ldr	r2, [r7, #32]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbc6      	blt.n	8000f06 <EEPROM_Write+0x4a>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200004ac 	.word	0x200004ac

08000f88 <float2Bytes>:

void float2Bytes(uint8_t *ftoa_bytes_temp, float float_variable) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	thing.a = float_variable;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < 4; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e00b      	b.n	8000fb4 <float2Bytes+0x2c>
		ftoa_bytes_temp[i] = thing.bytes[i];
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3210      	adds	r2, #16
 8000fa6:	443a      	add	r2, r7
 8000fa8:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000fac:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d9f0      	bls.n	8000f9c <float2Bytes+0x14>
	}

}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <Bytes2float>:

float Bytes2float(uint8_t *ftoa_bytes_temp) {
 8000fc6:	b480      	push	{r7}
 8000fc8:	b087      	sub	sp, #28
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	for (uint8_t i = 0; i < 4; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75fb      	strb	r3, [r7, #23]
 8000fd2:	e00b      	b.n	8000fec <Bytes2float+0x26>
		thing.bytes[i] = ftoa_bytes_temp[i];
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	441a      	add	r2, r3
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	3318      	adds	r3, #24
 8000fe0:	443b      	add	r3, r7
 8000fe2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++) {
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	75fb      	strb	r3, [r7, #23]
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d9f0      	bls.n	8000fd4 <Bytes2float+0xe>
	}

	float float_variable = thing.a;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	613b      	str	r3, [r7, #16]
	return float_variable;
 8000ff6:	693b      	ldr	r3, [r7, #16]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <EEPROM_Write_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM(uint16_t page, uint16_t offset, float data) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	603a      	str	r2, [r7, #0]
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	460b      	mov	r3, r1
 8001012:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <EEPROM_Write_NUM+0x2c>)
 8001018:	f7ff ffb6 	bl	8000f88 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 800101c:	88b9      	ldrh	r1, [r7, #4]
 800101e:	88f8      	ldrh	r0, [r7, #6]
 8001020:	2304      	movs	r3, #4
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <EEPROM_Write_NUM+0x2c>)
 8001024:	f7ff ff4a 	bl	8000ebc <EEPROM_Write>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000094 	.word	0x20000094

08001034 <EEPROM_Read_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM(uint16_t page, uint16_t offset) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	4613      	mov	r3, r2
 8001042:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8001044:	f107 020c 	add.w	r2, r7, #12
 8001048:	88b9      	ldrh	r1, [r7, #4]
 800104a:	88f8      	ldrh	r0, [r7, #6]
 800104c:	2304      	movs	r3, #4
 800104e:	f000 f80b 	bl	8001068 <EEPROM_Read>

	return (Bytes2float(buffer));
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffb5 	bl	8000fc6 <Bytes2float>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <EEPROM_Read>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af04      	add	r7, sp, #16
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	81fb      	strh	r3, [r7, #14]
 8001076:	460b      	mov	r3, r1
 8001078:	81bb      	strh	r3, [r7, #12]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE) / log(2);
 800107e:	2306      	movs	r3, #6
 8001080:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8001086:	88fa      	ldrh	r2, [r7, #6]
 8001088:	89bb      	ldrh	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	da00      	bge.n	8001092 <EEPROM_Read+0x2a>
 8001090:	333f      	adds	r3, #63	; 0x3f
 8001092:	119b      	asrs	r3, r3, #6
 8001094:	b29a      	uxth	r2, r3
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	4413      	add	r3, r2
 800109a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage - startPage) + 1;
 800109c:	8b7a      	ldrh	r2, [r7, #26]
 800109e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i < numofpages; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	e031      	b.n	8001116 <EEPROM_Read+0xae>
		uint16_t MemAddress = startPage << paddrposition | offset;
 80010b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80010c6:	89ba      	ldrh	r2, [r7, #12]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fedd 	bl	8000e8c <bytestowrite>
 80010d2:	4603      	mov	r3, r0
 80010d4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 80010d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	8af9      	ldrh	r1, [r7, #22]
 80010de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e2:	9202      	str	r2, [sp, #8]
 80010e4:	8aba      	ldrh	r2, [r7, #20]
 80010e6:	9201      	str	r2, [sp, #4]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2302      	movs	r3, #2
 80010ec:	460a      	mov	r2, r1
 80010ee:	21a0      	movs	r1, #160	; 0xa0
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <EEPROM_Read+0xc0>)
 80010f2:	f003 fb1f 	bl	8004734 <HAL_I2C_Mem_Read>
				bytesremaining, 1000);
		startPage += 1;
 80010f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f8:	3301      	adds	r3, #1
 80010fa:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8abb      	ldrh	r3, [r7, #20]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8001108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800110a:	8abb      	ldrh	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i < numofpages; i++) {
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	3301      	adds	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	8b3b      	ldrh	r3, [r7, #24]
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbc9      	blt.n	80010b2 <EEPROM_Read+0x4a>
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004ac 	.word	0x200004ac
 800112c:	00000000 	.word	0x00000000

08001130 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 8082 	bne.w	8001246 <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (ultrasonic1.Is_First_Captured == 0) // if the first value is not captured
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d11a      	bne.n	8001180 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 800114a:	2100      	movs	r1, #0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f005 fa13 	bl	8006578 <HAL_TIM_ReadCapturedValue>
 8001152:	4603      	mov	r3, r0
 8001154:	4a40      	ldr	r2, [pc, #256]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001156:	6013      	str	r3, [r2, #0]
			TIM_CHANNEL_1); // read the first value
			ultrasonic1.Is_First_Captured = 1; // set the first captured as true
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 800115a:	2201      	movs	r2, #1
 800115c:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 020a 	bic.w	r2, r2, #10
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0202 	orr.w	r2, r2, #2
 800117c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 800117e:	e062      	b.n	8001246 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured == 1) // if the first is already captured
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001182:	7b1b      	ldrb	r3, [r3, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d15e      	bne.n	8001246 <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f005 f9f4 	bl	8006578 <HAL_TIM_ReadCapturedValue>
 8001190:	4603      	mov	r3, r0
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001194:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1) {
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d907      	bls.n	80011ba <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011ac:	685a      	ldr	r2, [r3, #4]
						- ultrasonic1.IC_Val1;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1ad3      	subs	r3, r2, r3
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b6:	6093      	str	r3, [r2, #8]
 80011b8:	e00f      	b.n	80011da <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2) {
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d909      	bls.n	80011da <HAL_TIM_IC_CaptureCallback+0xaa>
						+ ultrasonic1.IC_Val2;
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011c8:	685a      	ldr	r2, [r3, #4]
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011cc:	681b      	ldr	r3, [r3, #0]
						+ ultrasonic1.IC_Val2;
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011d4:	33ff      	adds	r3, #255	; 0xff
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011d8:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034 / 2;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9ac 	bl	800053c <__aeabi_ui2d>
 80011e4:	a31a      	add	r3, pc, #104	; (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff fa21 	bl	8000630 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fe:	f7ff fb41 	bl	8000884 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc4b 	bl	8000aa4 <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001212:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001216:	2200      	movs	r2, #0
 8001218:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a1a      	ldr	r2, [r3, #32]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020a 	bic.w	r2, r2, #10
 8001228:	621a      	str	r2, [r3, #32]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a12      	ldr	r2, [r2, #32]
 8001234:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0202 	bic.w	r2, r2, #2
 8001244:	60da      	str	r2, [r3, #12]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	b020c49c 	.word	0xb020c49c
 8001254:	3fa16872 	.word	0x3fa16872
 8001258:	20000098 	.word	0x20000098
 800125c:	20000500 	.word	0x20000500

08001260 <HAL_CAN_RxFifo1MsgPendingCallback>:
extern uint32_t mode;

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 800126a:	4a32      	ldr	r2, [pc, #200]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 800126c:	2101      	movs	r1, #1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 fa35 	bl	80036de <HAL_CAN_GetRxMessage>

	if (RxHeader.IDE == CAN_ID_EXT) {
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d152      	bne.n	8001322 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
		uint8_t id = RxHeader.ExtId & 0xFF;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	73fb      	strb	r3, [r7, #15]
		uint8_t cmd = RxHeader.ExtId >> 8;
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	73bb      	strb	r3, [r7, #14]

		if (id == 255 || id == selfID) {
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2bff      	cmp	r3, #255	; 0xff
 800128e:	d004      	beq.n	800129a <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d143      	bne.n	8001322 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			switch (cmd) {
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	2b23      	cmp	r3, #35	; 0x23
 800129e:	d006      	beq.n	80012ae <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 80012a0:	2b23      	cmp	r3, #35	; 0x23
 80012a2:	dc41      	bgt.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d012      	beq.n	80012ce <HAL_CAN_RxFifo1MsgPendingCallback+0x6e>
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d01d      	beq.n	80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>

		}
	}
	//}

}
 80012ac:	e03c      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				canSetMode = -1;
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	601a      	str	r2, [r3, #0]
				ind = 0;
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
				mode = buffer_get_int32(RxData, &ind);
 80012bc:	4920      	ldr	r1, [pc, #128]	; (8001340 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80012be:	481c      	ldr	r0, [pc, #112]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012c0:	f000 f884 	bl	80013cc <buffer_get_int32>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 80012ca:	601a      	str	r2, [r3, #0]
				break;
 80012cc:	e02c      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 80012d6:	18d0      	adds	r0, r2, r3
 80012d8:	491c      	ldr	r1, [pc, #112]	; (800134c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	3b01      	subs	r3, #1
 80012e0:	461a      	mov	r2, r3
 80012e2:	f007 f833 	bl	800834c <memcpy>
				break;
 80012e6:	e01f      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				rxbuf_ind = (unsigned int) RxData[0] << 8;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80012f0:	6013      	str	r3, [r2, #0]
				rxbuf_ind |= RxData[1];
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001300:	6013      	str	r3, [r2, #0]
				if (rxbuf_ind < RX_BUFFER_SIZE) {
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b3f      	cmp	r3, #63	; 0x3f
 8001308:	d80d      	bhi.n	8001326 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
					memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8001310:	1898      	adds	r0, r3, r2
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	3b02      	subs	r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	f007 f816 	bl	800834c <memcpy>
				break;
 8001320:	e001      	b.n	8001326 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
		}
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
				break;
 8001326:	bf00      	nop
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200000e8 	.word	0x200000e8
 8001334:	200000ac 	.word	0x200000ac
 8001338:	20000000 	.word	0x20000000
 800133c:	2000013c 	.word	0x2000013c
 8001340:	200000f4 	.word	0x200000f4
 8001344:	20000430 	.word	0x20000430
 8001348:	200000f8 	.word	0x200000f8
 800134c:	200000e9 	.word	0x200000e9
 8001350:	20000138 	.word	0x20000138
 8001354:	200000ea 	.word	0x200000ea

08001358 <buffer_append_int32>:

void buffer_append_int32(uint8_t *buffer, int32_t number, int32_t *index) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1618      	asrs	r0, r3, #24
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6011      	str	r1, [r2, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	b2c2      	uxtb	r2, r0
 800137a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1418      	asrs	r0, r3, #16
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6011      	str	r1, [r2, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	b2c2      	uxtb	r2, r0
 8001392:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1218      	asrs	r0, r3, #8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6011      	str	r1, [r2, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	b2c2      	uxtb	r2, r0
 80013aa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1c59      	adds	r1, r3, #1
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6011      	str	r1, [r2, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	int32_t res = ((uint32_t) buffer[*index]) << 24
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	061a      	lsls	r2, r3, #24
			| ((uint32_t) buffer[*index + 1]) << 16
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	440b      	add	r3, r1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	041b      	lsls	r3, r3, #16
 80013f2:	431a      	orrs	r2, r3
			| ((uint32_t) buffer[*index + 2]) << 8
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3302      	adds	r3, #2
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	4313      	orrs	r3, r2
			| ((uint32_t) buffer[*index + 3]);
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	3203      	adds	r2, #3
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	440a      	add	r2, r1
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	4313      	orrs	r3, r2
	int32_t res = ((uint32_t) buffer[*index]) << 24
 8001412:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	601a      	str	r2, [r3, #0]
	return res;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
	...

0800142c <comm_can_transmit_eid>:

void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d901      	bls.n	8001444 <comm_can_transmit_eid+0x18>
		len = 8;
 8001440:	2308      	movs	r3, #8
 8001442:	71fb      	strb	r3, [r7, #7]
	}

	TxHeader.IDE = CAN_ID_EXT;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <comm_can_transmit_eid+0x50>)
 8001446:	2204      	movs	r2, #4
 8001448:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = id;
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <comm_can_transmit_eid+0x50>)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <comm_can_transmit_eid+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = len;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <comm_can_transmit_eid+0x50>)
 800145a:	6113      	str	r3, [r2, #16]
	memcpy(TxData, data, len);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	461a      	mov	r2, r3
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <comm_can_transmit_eid+0x54>)
 8001464:	f006 ff72 	bl	800834c <memcpy>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <comm_can_transmit_eid+0x58>)
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <comm_can_transmit_eid+0x54>)
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <comm_can_transmit_eid+0x50>)
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <comm_can_transmit_eid+0x5c>)
 8001470:	f002 f85b 	bl	800352a <HAL_CAN_AddTxMessage>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200000c8 	.word	0x200000c8
 8001480:	200000e0 	.word	0x200000e0
 8001484:	200000f0 	.word	0x200000f0
 8001488:	20000484 	.word	0x20000484

0800148c <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) (duty * 100.0), &send_index);
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff f86f 	bl	8000580 <__aeabi_f2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <comm_can_set_duty+0x58>)
 80014a8:	f7ff f8c2 	bl	8000630 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff face 	bl	8000a54 <__aeabi_d2iz>
 80014b8:	4601      	mov	r1, r0
 80014ba:	f107 020c 	add.w	r2, r7, #12
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff48 	bl	8001358 <buffer_append_int32>
	comm_can_transmit_eid(
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f107 0108 	add.w	r1, r7, #8
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffa8 	bl	800142c <comm_can_transmit_eid>
			controller_id | ((uint32_t) CAN_PACKET_SET_DUTY_GEN << 8), buffer,
			send_index);
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40590000 	.word	0x40590000

080014e8 <comm_can_db_signal>:

void comm_can_db_signal(uint8_t controller_id, int command) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) command, &send_index);
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff28 	bl	8001358 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t) 35 << 8), buffer,
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f107 0108 	add.w	r1, r7, #8
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff88 	bl	800142c <comm_can_transmit_eid>
			send_index);
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <comm_can_send_buffer>:
			controller_id | ((uint32_t) CAN_PACKET_ERRORMASSAGE << 8), buffer,
			send_index);
}

void comm_can_send_buffer(uint8_t controller_id, uint8_t *data,
		unsigned int len, uint8_t send) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	461a      	mov	r2, r3
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	4613      	mov	r3, r2
 8001536:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d829      	bhi.n	8001592 <comm_can_send_buffer+0x6e>
		uint32_t ind = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = controller_id;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	61ba      	str	r2, [r7, #24]
 8001548:	3328      	adds	r3, #40	; 0x28
 800154a:	443b      	add	r3, r7
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	f803 2c18 	strb.w	r2, [r3, #-24]
		send_buffer[ind++] = send;	     // untuk memilih commands pada receiver
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	61ba      	str	r2, [r7, #24]
 8001558:	3328      	adds	r3, #40	; 0x28
 800155a:	443b      	add	r3, r7
 800155c:	7bba      	ldrb	r2, [r7, #14]
 800155e:	f803 2c18 	strb.w	r2, [r3, #-24]
		memcpy(send_buffer + ind, data, len);
 8001562:	f107 0210 	add.w	r2, r7, #16
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4413      	add	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4618      	mov	r0, r3
 8001570:	f006 feec 	bl	800834c <memcpy>
		ind += len;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
		comm_can_transmit_eid(
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f107 0110 	add.w	r1, r7, #16
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff4e 	bl	800142c <comm_can_transmit_eid>
					send_buffer, send_len + 1);
		}
		//------------------------------------------------

	}
}
 8001590:	e048      	b.n	8001624 <comm_can_send_buffer+0x100>
		unsigned int end_a = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
		for (unsigned int i = 0; i < len; i += 7) {
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	e03d      	b.n	8001618 <comm_can_send_buffer+0xf4>
			if (i > 255) {
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	2bff      	cmp	r3, #255	; 0xff
 80015a0:	d83f      	bhi.n	8001622 <comm_can_send_buffer+0xfe>
			end_a = i + 7;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	3307      	adds	r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
			uint8_t send_len = 7;
 80015a8:	2307      	movs	r3, #7
 80015aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			send_buffer[0] = i;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3307      	adds	r3, #7
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d30b      	bcc.n	80015d6 <comm_can_send_buffer+0xb2>
				memcpy(send_buffer + 1, data + i, send_len);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	3301      	adds	r3, #1
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4411      	add	r1, r2
 80015ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 febc 	bl	800834c <memcpy>
 80015d4:	e011      	b.n	80015fa <comm_can_send_buffer+0xd6>
				send_len = len - i;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				memcpy(send_buffer + 1, data + i, send_len);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	3301      	adds	r3, #1
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	4411      	add	r1, r2
 80015f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fea9 	bl	800834c <memcpy>
			comm_can_transmit_eid(
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f443 5020 	orr.w	r0, r3, #10240	; 0x2800
 8001600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff ff0d 	bl	800142c <comm_can_transmit_eid>
		for (unsigned int i = 0; i < len; i += 7) {
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3307      	adds	r3, #7
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3bd      	bcc.n	800159c <comm_can_send_buffer+0x78>
}
 8001620:	e000      	b.n	8001624 <comm_can_send_buffer+0x100>
				break;
 8001622:	bf00      	nop
}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <vApplicationGetIdleTaskMemory+0x28>)
 800163c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <vApplicationGetIdleTaskMemory+0x2c>)
 8001642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000140 	.word	0x20000140
 8001658:	200001f4 	.word	0x200001f4

0800165c <delay_s>:

	return value * 60 * 1000;

}

void delay_s(uint8_t value) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	osDelay(value * 1000);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fcad 	bl	8006fd0 <osDelay>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <backWash>:

void delay_m(uint8_t value) {
	osDelay(value * 1000 * 60);
}

void backWash(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

	Control_Valve_1(OFF);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 fd0a 	bl	80020a0 <Control_Valve_1>
	//osDelay(1000); // delay menghabiskan air pada selang
	Pump_1(OFF);
 800168c:	2001      	movs	r0, #1
 800168e:	f000 fdaf 	bl	80021f0 <Pump_1>
	delay_s(2); // delay menghabiskan air pada selang
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff ffe2 	bl	800165c <delay_s>
	Ozone(OFF);
 8001698:	2001      	movs	r0, #1
 800169a:	f000 fd8b 	bl	80021b4 <Ozone>
	Compressor(OFF);
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 fd6a 	bl	8002178 <Compressor>
	flagBackwash = 0; // memulai rekam waktu filtrasi rdf sampai tersumbat
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <backWash+0xac>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	setFlagBackwash(flagBackwash);
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <backWash+0xac>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f9bf 	bl	8001a32 <setFlagBackwash>
	//Pump_2(OFF);

	delay_s(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f7ff ffd1 	bl	800165c <delay_s>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 80016ba:	2100      	movs	r1, #0
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff ff13 	bl	80014e8 <comm_can_db_signal>
	delay_s(5);
 80016c2:	2005      	movs	r0, #5
 80016c4:	f7ff ffca 	bl	800165c <delay_s>
	comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 80016c8:	2104      	movs	r1, #4
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff ff0c 	bl	80014e8 <comm_can_db_signal>
	delay_s(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff ffc3 	bl	800165c <delay_s>

	Control_Valve_3(ON);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 fd1e 	bl	8002118 <Control_Valve_3>
	Control_Valve_2(OFF);
 80016dc:	2001      	movs	r0, #1
 80016de:	f000 fcfd 	bl	80020dc <Control_Valve_2>
	Pump_3(ON); // pompa backwash menyala
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 fdc0 	bl	8002268 <Pump_3>

	uint8_t i = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	71fb      	strb	r3, [r7, #7]

	while (i <= 20) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80016ec:	e006      	b.n	80016fc <backWash+0x7c>
		osDelay(1000);
 80016ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f2:	f005 fc6d 	bl	8006fd0 <osDelay>
		i++;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	3301      	adds	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
	while (i <= 20) { //menunggu sinyal dari driver bahwa backwash telah selesai
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b14      	cmp	r3, #20
 8001700:	d9f5      	bls.n	80016ee <backWash+0x6e>
	}
	Pump_3(OFF); //pompa backwash mati
 8001702:	2001      	movs	r0, #1
 8001704:	f000 fdb0 	bl	8002268 <Pump_3>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 8001708:	2100      	movs	r1, #0
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff feec 	bl	80014e8 <comm_can_db_signal>
	delay_s(5);
 8001710:	2005      	movs	r0, #5
 8001712:	f7ff ffa3 	bl	800165c <delay_s>

	Control_Valve_3(OFF);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 fcfe 	bl	8002118 <Control_Valve_3>
	Control_Valve_2(ON);
 800171c:	2000      	movs	r0, #0
 800171e:	f000 fcdd 	bl	80020dc <Control_Valve_2>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000040a 	.word	0x2000040a

08001730 <process>:

void process(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

	delay_s(7);
 8001734:	2007      	movs	r0, #7
 8001736:	f7ff ff91 	bl	800165c <delay_s>
//		mode = 0;
//		comm_can_db_signal(0, 0);
//		return;
//	}

	flagTimerEAB = 1; // flag untuk memulai timer EAB
 800173a:	4b76      	ldr	r3, [pc, #472]	; (8001914 <process+0x1e4>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]

	while (timerEAB < 180) {
 8001740:	e00a      	b.n	8001758 <process+0x28>
		EAB(ON);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 fc86 	bl	8002054 <EAB>
		delay_s(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ff87 	bl	800165c <delay_s>
		if (mode == 0) {
 800174e:	4b72      	ldr	r3, [pc, #456]	; (8001918 <process+0x1e8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 80b8 	beq.w	80018c8 <process+0x198>
	while (timerEAB < 180) {
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <process+0x1ec>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2bb3      	cmp	r3, #179	; 0xb3
 800175e:	d9f0      	bls.n	8001742 <process+0x12>
//
//		if (clean) {
//			break;
//		}
//	}
	EAB(OFF);
 8001760:	2001      	movs	r0, #1
 8001762:	f000 fc77 	bl	8002054 <EAB>

	flagTimerEAB = 0; // flag untuk menghentikan timer EAB
 8001766:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <process+0x1e4>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

	flagRecoveryEAB = 1; // flag untuk recover EAB
 800176c:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <process+0x1f0>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]

	while (timerRecoveryEAB < 100) {
 8001772:	e007      	b.n	8001784 <process+0x54>
		delay_s(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff ff71 	bl	800165c <delay_s>
		if (mode == 0) {
 800177a:	4b67      	ldr	r3, [pc, #412]	; (8001918 <process+0x1e8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a4 	beq.w	80018cc <process+0x19c>
	while (timerRecoveryEAB < 100) {
 8001784:	4b67      	ldr	r3, [pc, #412]	; (8001924 <process+0x1f4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b63      	cmp	r3, #99	; 0x63
 800178a:	d9f3      	bls.n	8001774 <process+0x44>
			goto end;
		}
	}

	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff feaa 	bl	80014e8 <comm_can_db_signal>

	flagRecoveryEAB = 0; // flag untuk recover EAB
 8001794:	4b62      	ldr	r3, [pc, #392]	; (8001920 <process+0x1f0>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]

	backWash();
 800179a:	f7ff ff71 	bl	8001680 <backWash>

	label2: // balik lagi ke sini jika air masih penuh

	if (flagBackwash == 1) {
 800179e:	4b62      	ldr	r3, [pc, #392]	; (8001928 <process+0x1f8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <process+0x7a>
		backWash();
 80017a6:	f7ff ff6b 	bl	8001680 <backWash>
	}

	comm_can_set_duty(0, 95);
 80017aa:	4960      	ldr	r1, [pc, #384]	; (800192c <process+0x1fc>)
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff fe6d 	bl	800148c <comm_can_set_duty>
	comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 80017b2:	2102      	movs	r1, #2
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fe97 	bl	80014e8 <comm_can_db_signal>

	delay_s(7); //delay untuk menunggu rdf putaran penuh
 80017ba:	2007      	movs	r0, #7
 80017bc:	f7ff ff4e 	bl	800165c <delay_s>

	Control_Valve_1(ON);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 fc6d 	bl	80020a0 <Control_Valve_1>

	Pump_1(ON);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 fd12 	bl	80021f0 <Pump_1>
	Control_Valve_4(ON); // control valve 4 dialokasikan untuk solenoid valve oksigen konsentrator
 80017cc:	2000      	movs	r0, #0
 80017ce:	f000 fcc1 	bl	8002154 <Control_Valve_4>

	delay_s(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff ff42 	bl	800165c <delay_s>

	Ozone(ON);
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 fceb 	bl	80021b4 <Ozone>
	Compressor(ON);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 fcca 	bl	8002178 <Compressor>
	Pump_2(ON);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f000 fd21 	bl	800222c <Pump_2>

	// mengisi tangki backwash
	Control_Valve_3(ON);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 fc94 	bl	8002118 <Control_Valve_3>
	Control_Valve_2(OFF);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f000 fc73 	bl	80020dc <Control_Valve_2>

	delay_s(6); // delay
 80017f6:	2006      	movs	r0, #6
 80017f8:	f7ff ff30 	bl	800165c <delay_s>

	// tutup tangki backwash
	Control_Valve_3(OFF);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 fc8b 	bl	8002118 <Control_Valve_3>
	Control_Valve_2(ON);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 fc6a 	bl	80020dc <Control_Valve_2>

	flagBackwash = 1; // penanda start backwash untuk perhitungan lamanya filter tersumbat
 8001808:	4b47      	ldr	r3, [pc, #284]	; (8001928 <process+0x1f8>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
	setFlagBackwash(flagBackwash);
 800180e:	4b46      	ldr	r3, [pc, #280]	; (8001928 <process+0x1f8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f90d 	bl	8001a32 <setFlagBackwash>
	lamaMampet = 0; // reset waktu mampet filter
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <process+0x200>)
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]

	delay_s(20);
 800181e:	2014      	movs	r0, #20
 8001820:	f7ff ff1c 	bl	800165c <delay_s>

	while (1) {

		osDelay(1000);
 8001824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001828:	f005 fbd2 	bl	8006fd0 <osDelay>

		if (flow < 4 //|| level == 1
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <process+0x204>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fae1 	bl	8000dfc <__aeabi_fcmplt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <process+0x118>
		|| mode == 0) {
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <process+0x1e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ed      	bne.n	8001824 <process+0xf4>
			countBackwash++;
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <process+0x208>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <process+0x208>)
 8001852:	801a      	strh	r2, [r3, #0]
			delay_s(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff ff01 	bl	800165c <delay_s>
			setCountBackwash(countBackwash);
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <process+0x208>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8b4 	bl	80019cc <setCountBackwash>
			dataCan[0] = countBackwash & 0x0ff;
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <process+0x208>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <process+0x20c>)
 800186c:	701a      	strb	r2, [r3, #0]
			dataCan[1] = (countBackwash & 0xff00) >> 8;
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <process+0x208>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <process+0x20c>)
 800187a:	705a      	strb	r2, [r3, #1]
			dataCan[2] = lamaMampet & 0x00ff;
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <process+0x200>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <process+0x20c>)
 8001884:	709a      	strb	r2, [r3, #2]
			dataCan[3] = (lamaMampet & 0xff00) >> 8;
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <process+0x200>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <process+0x20c>)
 8001892:	70da      	strb	r2, [r3, #3]
			comm_can_transmit_eid(4, dataCan, 8);
 8001894:	2208      	movs	r2, #8
 8001896:	4929      	ldr	r1, [pc, #164]	; (800193c <process+0x20c>)
 8001898:	2004      	movs	r0, #4
 800189a:	f7ff fdc7 	bl	800142c <comm_can_transmit_eid>
			Ozone(OFF);
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fc88 	bl	80021b4 <Ozone>
			Compressor(OFF);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f000 fc67 	bl	8002178 <Compressor>
			delay_s(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff fed6 	bl	800165c <delay_s>
			Control_Valve_4(OFF);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 fc4f 	bl	8002154 <Control_Valve_4>
			backWash();
 80018b6:	f7ff fee3 	bl	8001680 <backWash>
			break;
 80018ba:	bf00      	nop
		}
	}

	if (mode == 0) {
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <process+0x1e8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f af6c 	bne.w	800179e <process+0x6e>
		goto end;
 80018c6:	e002      	b.n	80018ce <process+0x19e>
			goto end;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <process+0x19e>
			goto end;
 80018cc:	bf00      	nop
//	}
	goto label2;

	end:

	EAB(OFF);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 fbc0 	bl	8002054 <EAB>
	delay_s(3);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f7ff fec1 	bl	800165c <delay_s>
	Pump_2(OFF);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 fca6 	bl	800222c <Pump_2>
	mode = 0;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <process+0x1e8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	countProcess++;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <process+0x210>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <process+0x210>)
 80018ee:	6013      	str	r3, [r2, #0]
	setCountProcess(countProcess);
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <process+0x210>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f87a 	bl	80019ee <setCountProcess>
	comm_can_db_signal(0, 0);
 80018fa:	2100      	movs	r1, #0
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fdf3 	bl	80014e8 <comm_can_db_signal>

	flagTimerEAB = 0;
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <process+0x1e4>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
	flagRecoveryEAB = 0;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <process+0x1f0>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000040b 	.word	0x2000040b
 8001918:	20000430 	.word	0x20000430
 800191c:	20000428 	.word	0x20000428
 8001920:	2000040c 	.word	0x2000040c
 8001924:	2000042c 	.word	0x2000042c
 8001928:	2000040a 	.word	0x2000040a
 800192c:	42be0000 	.word	0x42be0000
 8001930:	20000434 	.word	0x20000434
 8001934:	20000444 	.word	0x20000444
 8001938:	20000436 	.word	0x20000436
 800193c:	20000410 	.word	0x20000410
 8001940:	20000438 	.word	0x20000438

08001944 <setMode>:

void setMode(uint32_t value) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, MODE, value);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff f9af 	bl	8000cb0 <__aeabi_ui2f>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff fb53 	bl	8001004 <EEPROM_Write_NUM>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <setTimerEAB>:

void setTimerEAB(uint32_t value) {
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMEREAB, value);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff f99e 	bl	8000cb0 <__aeabi_ui2f>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	2104      	movs	r1, #4
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff fb42 	bl	8001004 <EEPROM_Write_NUM>

}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <setLamaPakaiEAB>:

void setLamaPakaiEAB(uint32_t value) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPAKAIEAB, value);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff f98d 	bl	8000cb0 <__aeabi_ui2f>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	2118      	movs	r1, #24
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fb31 	bl	8001004 <EEPROM_Write_NUM>

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <setTimerRcoveryEAB>:

void setTimerRcoveryEAB(uint32_t value) {
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMERRECOVERYEAB, value);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff f97c 	bl	8000cb0 <__aeabi_ui2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	211c      	movs	r1, #28
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fb20 	bl	8001004 <EEPROM_Write_NUM>

}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <setCountBackwash>:
//	dataWrite[2] = value;
//	Flash_Write_Data(ADDRESS, (uint32_t*) value, 10);

}

void setCountBackwash(uint32_t value) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTBACKWASH, value);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff f96b 	bl	8000cb0 <__aeabi_ui2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	210c      	movs	r1, #12
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fb0f 	bl	8001004 <EEPROM_Write_NUM>

}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <setCountProcess>:

void setCountProcess(uint32_t value) {
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTPROCESS, value);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff f95a 	bl	8000cb0 <__aeabi_ui2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	2110      	movs	r1, #16
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fafe 	bl	8001004 <EEPROM_Write_NUM>

}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <setLamaProcess>:

void setLamaProcess(uint32_t value) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPROCESS, value);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff f949 	bl	8000cb0 <__aeabi_ui2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	2114      	movs	r1, #20
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff faed 	bl	8001004 <EEPROM_Write_NUM>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <setFlagBackwash>:

void setFlagBackwash(uint32_t value) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, FLAGBACKWASH, value);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff f938 	bl	8000cb0 <__aeabi_ui2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	2120      	movs	r1, #32
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fadc 	bl	8001004 <EEPROM_Write_NUM>

}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <Task2>:

// kumpulan task freeRTOS

void Task2(void const *argument) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <Task2+0x74>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d102      	bne.n	8001a6a <Task2+0x16>
				{
			process();
 8001a64:	f7ff fe64 	bl	8001730 <process>
 8001a68:	e023      	b.n	8001ab2 <Task2+0x5e>
		}

		else if (mode == 2) // mode 2 untuk opsi menggunakan sensor water level
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <Task2+0x74>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d01f      	beq.n	8001ab2 <Task2+0x5e>
				{

		}

		else if (mode == 3) // mode 2 untuk opsi menggunakan sensor water level
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <Task2+0x74>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d01b      	beq.n	8001ab2 <Task2+0x5e>
				{
		}

		else if (mode == 0) {
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <Task2+0x74>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d117      	bne.n	8001ab2 <Task2+0x5e>
			lamaProcess = 0;
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <Task2+0x78>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
			setLamaProcess(lamaProcess);
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <Task2+0x78>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ffbf 	bl	8001a10 <setLamaProcess>
			timerEAB = 0;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <Task2+0x7c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			setTimerEAB(timerEAB);
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <Task2+0x7c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff62 	bl	8001966 <setTimerEAB>
			timerRecoveryEAB = 0;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <Task2+0x80>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <Task2+0x80>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff7c 	bl	80019aa <setTimerRcoveryEAB>
		}
		cobaTask2++;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <Task2+0x84>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <Task2+0x84>)
 8001abc:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 8001abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac2:	f005 fa85 	bl	8006fd0 <osDelay>
		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001ac6:	e7c9      	b.n	8001a5c <Task2+0x8>
 8001ac8:	20000430 	.word	0x20000430
 8001acc:	2000043c 	.word	0x2000043c
 8001ad0:	20000428 	.word	0x20000428
 8001ad4:	2000042c 	.word	0x2000042c
 8001ad8:	2000040d 	.word	0x2000040d

08001adc <TaskTimer>:

	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <TaskTimer+0xec>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d120      	bne.n	8001b2e <TaskTimer+0x52>

			timerEAB++;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <TaskTimer+0xf0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <TaskTimer+0xf0>)
 8001af4:	6013      	str	r3, [r2, #0]
			setTimerEAB(timerEAB);
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <TaskTimer+0xf0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff33 	bl	8001966 <setTimerEAB>
			if (timerEAB % 60 == 0) {
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <TaskTimer+0xf0>)
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <TaskTimer+0xf4>)
 8001b06:	fba3 2301 	umull	r2, r3, r3, r1
 8001b0a:	095a      	lsrs	r2, r3, #5
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	1aca      	subs	r2, r1, r3
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d109      	bne.n	8001b2e <TaskTimer+0x52>
				lamaPakaiEAB++;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <TaskTimer+0xf8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <TaskTimer+0xf8>)
 8001b22:	6013      	str	r3, [r2, #0]
				setLamaPakaiEAB(lamaPakaiEAB);
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <TaskTimer+0xf8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff2d 	bl	8001988 <setLamaPakaiEAB>
			}

		}

		if (flagRecoveryEAB == 1) {
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <TaskTimer+0xfc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d109      	bne.n	8001b4a <TaskTimer+0x6e>
			timerRecoveryEAB++;
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <TaskTimer+0x100>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <TaskTimer+0x100>)
 8001b3e:	6013      	str	r3, [r2, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <TaskTimer+0x100>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff30 	bl	80019aa <setTimerRcoveryEAB>
		}

		if (flagBackwash == 1) {
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <TaskTimer+0x104>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d105      	bne.n	8001b5e <TaskTimer+0x82>
			lamaMampet++;
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <TaskTimer+0x108>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <TaskTimer+0x108>)
 8001b5c:	801a      	strh	r2, [r3, #0]
		}

		if (mode == 2) {
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <TaskTimer+0x10c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d109      	bne.n	8001b7a <TaskTimer+0x9e>
			lamaProcess++;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <TaskTimer+0x110>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <TaskTimer+0x110>)
 8001b6e:	6013      	str	r3, [r2, #0]
			setLamaProcess(lamaProcess);
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <TaskTimer+0x110>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff4b 	bl	8001a10 <setLamaProcess>
		}

		flow = signalCounter / 7.5;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <TaskTimer+0x114>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcec 	bl	800055c <__aeabi_i2d>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <TaskTimer+0x118>)
 8001b8a:	f7fe fe7b 	bl	8000884 <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe ff85 	bl	8000aa4 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <TaskTimer+0x11c>)
 8001b9e:	6013      	str	r3, [r2, #0]
		signalCounter = 0;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <TaskTimer+0x114>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
		cobaTaskTimer++;
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <TaskTimer+0x120>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <TaskTimer+0x120>)
 8001bb0:	701a      	strb	r2, [r3, #0]
		currentEAB = 4.56; //Get_Current_EAB();
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <TaskTimer+0x124>)
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <TaskTimer+0x128>)
 8001bb6:	601a      	str	r2, [r3, #0]
		voltEAB = 12.11; //Get_Volt_EAB();
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <TaskTimer+0x12c>)
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <TaskTimer+0x130>)
 8001bbc:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc2:	f005 fa05 	bl	8006fd0 <osDelay>
		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001bc6:	e78d      	b.n	8001ae4 <TaskTimer+0x8>
 8001bc8:	2000040b 	.word	0x2000040b
 8001bcc:	20000428 	.word	0x20000428
 8001bd0:	88888889 	.word	0x88888889
 8001bd4:	20000440 	.word	0x20000440
 8001bd8:	2000040c 	.word	0x2000040c
 8001bdc:	2000042c 	.word	0x2000042c
 8001be0:	2000040a 	.word	0x2000040a
 8001be4:	20000434 	.word	0x20000434
 8001be8:	20000430 	.word	0x20000430
 8001bec:	2000043c 	.word	0x2000043c
 8001bf0:	20000450 	.word	0x20000450
 8001bf4:	401e0000 	.word	0x401e0000
 8001bf8:	20000444 	.word	0x20000444
 8001bfc:	2000040e 	.word	0x2000040e
 8001c00:	20000448 	.word	0x20000448
 8001c04:	4091eb85 	.word	0x4091eb85
 8001c08:	2000044c 	.word	0x2000044c
 8001c0c:	4141c28f 	.word	0x4141c28f

08001c10 <TaskFlow>:

	}
	/* USER CODE END 5 */
}

void TaskFlow(void const *argument) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001c18:	2120      	movs	r1, #32
 8001c1a:	4816      	ldr	r0, [pc, #88]	; (8001c74 <TaskFlow+0x64>)
 8001c1c:	f002 fb1c 	bl	8004258 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73bb      	strb	r3, [r7, #14]
	uint8_t stateSensorPrv = -1;
 8001c24:	23ff      	movs	r3, #255	; 0xff
 8001c26:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <TaskFlow+0x64>)
 8001c2c:	f002 fb14 	bl	8004258 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73bb      	strb	r3, [r7, #14]
		level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));
 8001c34:	2110      	movs	r1, #16
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <TaskFlow+0x64>)
 8001c38:	f002 fb0e 	bl	8004258 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <TaskFlow+0x68>)
 8001c42:	701a      	strb	r2, [r3, #0]
		level2 = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15));
 8001c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <TaskFlow+0x6c>)
 8001c4a:	f002 fb05 	bl	8004258 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <TaskFlow+0x70>)
 8001c54:	701a      	strb	r2, [r3, #0]
		if (stateSensorNow != stateSensorPrv) {
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d006      	beq.n	8001c6c <TaskFlow+0x5c>
			signalCounter++;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <TaskFlow+0x74>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <TaskFlow+0x74>)
 8001c66:	6013      	str	r3, [r2, #0]
			stateSensorPrv = stateSensorNow;
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	73fb      	strb	r3, [r7, #15]
		}
		//cobaTaskFlow++;
		osDelay(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f005 f9af 	bl	8006fd0 <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001c72:	e7d9      	b.n	8001c28 <TaskFlow+0x18>
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	20000408 	.word	0x20000408
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	20000409 	.word	0x20000409
 8001c84:	20000450 	.word	0x20000450

08001c88 <TaskButton>:
	}
	/* USER CODE END 5 */
}

void TaskButton(void const *argument) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c94:	4818      	ldr	r0, [pc, #96]	; (8001cf8 <TaskButton+0x70>)
 8001c96:	f002 fadf 	bl	8004258 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73bb      	strb	r3, [r7, #14]
	uint8_t stateButtonPrv = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]

	/* Infinite loop */
	for (;;) {
		stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca6:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <TaskButton+0x70>)
 8001ca8:	f002 fad6 	bl	8004258 <HAL_GPIO_ReadPin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73bb      	strb	r3, [r7, #14]
		if (stateButtonNow == 1 && stateButtonPrv == 0) {
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d111      	bne.n	8001cda <TaskButton+0x52>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10e      	bne.n	8001cda <TaskButton+0x52>
			mode++;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <TaskButton+0x74>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <TaskButton+0x74>)
 8001cc4:	6013      	str	r3, [r2, #0]
			if (mode > 1) {
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <TaskButton+0x74>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d902      	bls.n	8001cd4 <TaskButton+0x4c>
				mode = 0;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <TaskButton+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
			}
			stateButtonPrv = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <TaskButton+0x5c>
		} else if (stateButtonNow == 0) {
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <TaskButton+0x5c>
			stateButtonPrv = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(10);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f005 f973 	bl	8006fd0 <osDelay>
		//cobaTaskButton++;
		setMode(mode);
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <TaskButton+0x74>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe28 	bl	8001944 <setMode>
		stateButtonNow = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001cf4:	e7d5      	b.n	8001ca2 <TaskButton+0x1a>
 8001cf6:	bf00      	nop
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	20000430 	.word	0x20000430

08001d00 <TaskCanTx>:
	}
	/* USER CODE END 5 */
}

void TaskCanTx(void const *argument) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		manageData();
 8001d08:	f000 fd8c 	bl	8002824 <manageData>
		comm_can_send_buffer(7, bufferCanTx, sizeof(bufferCanTx), 1);
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	2220      	movs	r2, #32
 8001d10:	490b      	ldr	r1, [pc, #44]	; (8001d40 <TaskCanTx+0x40>)
 8001d12:	2007      	movs	r0, #7
 8001d14:	f7ff fc06 	bl	8001524 <comm_can_send_buffer>
		HAL_UART_Receive(&huart1, dataUart, sizeof(dataUart), 500);
 8001d18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4909      	ldr	r1, [pc, #36]	; (8001d44 <TaskCanTx+0x44>)
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <TaskCanTx+0x48>)
 8001d22:	f004 ff70 	bl	8006c06 <HAL_UART_Receive>
		if ((dataUart[0] == 50)) {
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <TaskCanTx+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b32      	cmp	r3, #50	; 0x32
 8001d2c:	d103      	bne.n	8001d36 <TaskCanTx+0x36>
			clean = dataUart[1];
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <TaskCanTx+0x44>)
 8001d30:	785a      	ldrb	r2, [r3, #1]
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <TaskCanTx+0x4c>)
 8001d34:	701a      	strb	r2, [r3, #0]
		}
		osDelay(500);
 8001d36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d3a:	f005 f949 	bl	8006fd0 <osDelay>
		manageData();
 8001d3e:	e7e3      	b.n	8001d08 <TaskCanTx+0x8>
 8001d40:	200005dc 	.word	0x200005dc
 8001d44:	20000418 	.word	0x20000418
 8001d48:	20000590 	.word	0x20000590
 8001d4c:	20000424 	.word	0x20000424

08001d50 <fungsiInit>:

	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b0a4      	sub	sp, #144	; 0x90
 8001d54:	af00      	add	r7, sp, #0

	gpio_init();
 8001d56:	f000 f8e7 	bl	8001f28 <gpio_init>

	// pembacaan eeprom
	mode = EEPROM_Read_NUM(1, MODE);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff f969 	bl	8001034 <EEPROM_Read_NUM>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f871 	bl	8000e4c <__aeabi_f2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <fungsiInit+0x194>)
 8001d6e:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f001 f895 	bl	8002ea0 <HAL_Delay>
	timerEAB = EEPROM_Read_NUM(1, TIMEREAB);
 8001d76:	2104      	movs	r1, #4
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff f95b 	bl	8001034 <EEPROM_Read_NUM>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f863 	bl	8000e4c <__aeabi_f2uiz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <fungsiInit+0x198>)
 8001d8a:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f001 f887 	bl	8002ea0 <HAL_Delay>
	countBackwash = EEPROM_Read_NUM(1, COUNTBACKWASH);
 8001d92:	210c      	movs	r1, #12
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff f94d 	bl	8001034 <EEPROM_Read_NUM>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f855 	bl	8000e4c <__aeabi_f2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b51      	ldr	r3, [pc, #324]	; (8001eec <fungsiInit+0x19c>)
 8001da8:	801a      	strh	r2, [r3, #0]
	HAL_Delay(10);
 8001daa:	200a      	movs	r0, #10
 8001dac:	f001 f878 	bl	8002ea0 <HAL_Delay>
	countProcess = EEPROM_Read_NUM(1, COUNTPROCESS);
 8001db0:	2110      	movs	r1, #16
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff f93e 	bl	8001034 <EEPROM_Read_NUM>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f846 	bl	8000e4c <__aeabi_f2uiz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a4b      	ldr	r2, [pc, #300]	; (8001ef0 <fungsiInit+0x1a0>)
 8001dc4:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f001 f86a 	bl	8002ea0 <HAL_Delay>
	lamaProcess = EEPROM_Read_NUM(1, LAMAPROCESS);
 8001dcc:	2114      	movs	r1, #20
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff f930 	bl	8001034 <EEPROM_Read_NUM>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f838 	bl	8000e4c <__aeabi_f2uiz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a45      	ldr	r2, [pc, #276]	; (8001ef4 <fungsiInit+0x1a4>)
 8001de0:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001de2:	200a      	movs	r0, #10
 8001de4:	f001 f85c 	bl	8002ea0 <HAL_Delay>
	lamaPakaiEAB = EEPROM_Read_NUM(1, LAMAPAKAIEAB);
 8001de8:	2118      	movs	r1, #24
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff f922 	bl	8001034 <EEPROM_Read_NUM>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f82a 	bl	8000e4c <__aeabi_f2uiz>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <fungsiInit+0x1a8>)
 8001dfc:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f001 f84e 	bl	8002ea0 <HAL_Delay>
	timerRecoveryEAB = EEPROM_Read_NUM(1, TIMERRECOVERYEAB);
 8001e04:	211c      	movs	r1, #28
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff f914 	bl	8001034 <EEPROM_Read_NUM>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f81c 	bl	8000e4c <__aeabi_f2uiz>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <fungsiInit+0x1ac>)
 8001e18:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f001 f840 	bl	8002ea0 <HAL_Delay>

//	setMode(mode);
//	setLamaPakaiEAB(660);
//	setCountBackwash(173);

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 64);
 8001e20:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <fungsiInit+0x1b0>)
 8001e22:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001e26:	461d      	mov	r5, r3
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8001e34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 f87c 	bl	8006f38 <osThreadCreate>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <fungsiInit+0x1b4>)
 8001e44:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 64);
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <fungsiInit+0x1b8>)
 8001e48:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8001e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 f869 	bl	8006f38 <osThreadCreate>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <fungsiInit+0x1bc>)
 8001e6a:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskFlow, TaskFlow, osPriorityBelowNormal, 0, 32);
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <fungsiInit+0x1c0>)
 8001e6e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001e72:	461d      	mov	r5, r3
 8001e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFlowHandle = osThreadCreate(osThread(TaskFlow), NULL);
 8001e80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f005 f856 	bl	8006f38 <osThreadCreate>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <fungsiInit+0x1c4>)
 8001e90:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskButton, TaskButton, osPriorityBelowNormal, 0, 32);
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <fungsiInit+0x1c8>)
 8001e94:	f107 0420 	add.w	r4, r7, #32
 8001e98:	461d      	mov	r5, r3
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskButtonHandle = osThreadCreate(osThread(TaskButton), NULL);
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f005 f843 	bl	8006f38 <osThreadCreate>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <fungsiInit+0x1cc>)
 8001eb6:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskCanTx, TaskCanTx, osPriorityBelowNormal, 0, 64);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <fungsiInit+0x1d0>)
 8001eba:	1d3c      	adds	r4, r7, #4
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskCanTxHandle = osThreadCreate(osThread(TaskCanTx), NULL);
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f005 f832 	bl	8006f38 <osThreadCreate>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <fungsiInit+0x1d4>)
 8001ed8:	6013      	str	r3, [r2, #0]
}
 8001eda:	bf00      	nop
 8001edc:	3790      	adds	r7, #144	; 0x90
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000430 	.word	0x20000430
 8001ee8:	20000428 	.word	0x20000428
 8001eec:	20000436 	.word	0x20000436
 8001ef0:	20000438 	.word	0x20000438
 8001ef4:	2000043c 	.word	0x2000043c
 8001ef8:	20000440 	.word	0x20000440
 8001efc:	2000042c 	.word	0x2000042c
 8001f00:	08008544 	.word	0x08008544
 8001f04:	200003f8 	.word	0x200003f8
 8001f08:	08008560 	.word	0x08008560
 8001f0c:	200003f4 	.word	0x200003f4
 8001f10:	0800857c 	.word	0x0800857c
 8001f14:	200003fc 	.word	0x200003fc
 8001f18:	08008598 	.word	0x08008598
 8001f1c:	20000400 	.word	0x20000400
 8001f20:	080085b4 	.word	0x080085b4
 8001f24:	20000404 	.word	0x20000404

08001f28 <gpio_init>:

extern uint16_t indicator;
extern uint8_t indicator1, indicator2;
extern uint8_t bufferCanTx[32];

void gpio_init(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <gpio_init+0x11c>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a40      	ldr	r2, [pc, #256]	; (8002044 <gpio_init+0x11c>)
 8001f42:	f043 0320 	orr.w	r3, r3, #32
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <gpio_init+0x11c>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <gpio_init+0x11c>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <gpio_init+0x11c>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <gpio_init+0x11c>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <gpio_init+0x11c>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a34      	ldr	r2, [pc, #208]	; (8002044 <gpio_init+0x11c>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <gpio_init+0x11c>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <gpio_init+0x11c>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <gpio_init+0x11c>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <gpio_init+0x11c>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f64f 4103 	movw	r1, #64515	; 0xfc03
 8001fa2:	4829      	ldr	r0, [pc, #164]	; (8002048 <gpio_init+0x120>)
 8001fa4:	f002 f96f 	bl	8004286 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001fae:	4827      	ldr	r0, [pc, #156]	; (800204c <gpio_init+0x124>)
 8001fb0:	f002 f969 	bl	8004286 <HAL_GPIO_WritePin>
	GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 8001fb4:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8001fb8:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4619      	mov	r1, r3
 8001fcc:	481e      	ldr	r0, [pc, #120]	; (8002048 <gpio_init+0x120>)
 8001fce:	f001 ffbf 	bl	8003f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001fd2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001fd6:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <gpio_init+0x124>)
 8001fec:	f001 ffb0 	bl	8003f50 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_4;
 8001ff0:	2330      	movs	r3, #48	; 0x30
 8001ff2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	4619      	mov	r1, r3
 8002002:	4811      	ldr	r0, [pc, #68]	; (8002048 <gpio_init+0x120>)
 8002004:	f001 ffa4 	bl	8003f50 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	4619      	mov	r1, r3
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <gpio_init+0x124>)
 800201e:	f001 ff97 	bl	8003f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002026:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202c:	2301      	movs	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <gpio_init+0x128>)
 8002038:	f001 ff8a 	bl	8003f50 <HAL_GPIO_Init>
//
//	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40010c00 	.word	0x40010c00
 800204c:	40010800 	.word	0x40010800
 8002050:	40011000 	.word	0x40011000

08002054 <EAB>:
//
//void Pump_3(uint8_t value) {
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
//}

void EAB(uint8_t value) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, value);
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	461a      	mov	r2, r3
 8002062:	2101      	movs	r1, #1
 8002064:	480b      	ldr	r0, [pc, #44]	; (8002094 <EAB+0x40>)
 8002066:	f002 f90e 	bl	8004286 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, value);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	461a      	mov	r2, r3
 800206e:	2120      	movs	r1, #32
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <EAB+0x44>)
 8002072:	f002 f908 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d103      	bne.n	8002084 <EAB+0x30>
		bufferCanTx[12] = 0;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <EAB+0x48>)
 800207e:	2200      	movs	r2, #0
 8002080:	731a      	strb	r2, [r3, #12]
	} else {
		bufferCanTx[12] = 1;
	}

}
 8002082:	e002      	b.n	800208a <EAB+0x36>
		bufferCanTx[12] = 1;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <EAB+0x48>)
 8002086:	2201      	movs	r2, #1
 8002088:	731a      	strb	r2, [r3, #12]
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40010c00 	.word	0x40010c00
 8002098:	40010800 	.word	0x40010800
 800209c:	200005dc 	.word	0x200005dc

080020a0 <Control_Valve_1>:

void Control_Valve_1(uint8_t value) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, value);
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b2:	4808      	ldr	r0, [pc, #32]	; (80020d4 <Control_Valve_1+0x34>)
 80020b4:	f002 f8e7 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d103      	bne.n	80020c6 <Control_Valve_1+0x26>
		bufferCanTx[11] = 0;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <Control_Valve_1+0x38>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	72da      	strb	r2, [r3, #11]
	} else {
		bufferCanTx[11] = 1;
	}

}
 80020c4:	e002      	b.n	80020cc <Control_Valve_1+0x2c>
		bufferCanTx[11] = 1;
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <Control_Valve_1+0x38>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	72da      	strb	r2, [r3, #11]
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010800 	.word	0x40010800
 80020d8:	200005dc 	.word	0x200005dc

080020dc <Control_Valve_2>:

void Control_Valve_2(uint8_t value) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, value);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	461a      	mov	r2, r3
 80020ea:	2102      	movs	r1, #2
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <Control_Valve_2+0x34>)
 80020ee:	f002 f8ca 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <Control_Valve_2+0x24>
		bufferCanTx[10] = 0;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <Control_Valve_2+0x38>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	729a      	strb	r2, [r3, #10]
	} else {
		bufferCanTx[10] = 1;
	}
}
 80020fe:	e002      	b.n	8002106 <Control_Valve_2+0x2a>
		bufferCanTx[10] = 1;
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <Control_Valve_2+0x38>)
 8002102:	2201      	movs	r2, #1
 8002104:	729a      	strb	r2, [r3, #10]
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40010c00 	.word	0x40010c00
 8002114:	200005dc 	.word	0x200005dc

08002118 <Control_Valve_3>:

void Control_Valve_3(uint8_t value) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value);
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	461a      	mov	r2, r3
 8002126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <Control_Valve_3+0x34>)
 800212c:	f002 f8ab 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d103      	bne.n	800213e <Control_Valve_3+0x26>
		bufferCanTx[9] = 0;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <Control_Valve_3+0x38>)
 8002138:	2200      	movs	r2, #0
 800213a:	725a      	strb	r2, [r3, #9]
	} else {
		bufferCanTx[9] = 1;
	}

}
 800213c:	e002      	b.n	8002144 <Control_Valve_3+0x2c>
		bufferCanTx[9] = 1;
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <Control_Valve_3+0x38>)
 8002140:	2201      	movs	r2, #1
 8002142:	725a      	strb	r2, [r3, #9]
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40010c00 	.word	0x40010c00
 8002150:	200005dc 	.word	0x200005dc

08002154 <Control_Valve_4>:

void Control_Valve_4(uint8_t value) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value);
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	461a      	mov	r2, r3
 8002162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <Control_Valve_4+0x20>)
 8002168:	f002 f88d 	bl	8004286 <HAL_GPIO_WritePin>
//	if (value == 1) {
//		bufferCanTx[8] = 0;
//	} else {
//		bufferCanTx[8] = 1;
//	}
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40010c00 	.word	0x40010c00

08002178 <Compressor>:
//	} else {
//		bufferCanTx[8] = 1;
//	}
}

void Compressor(uint8_t value) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, value);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	461a      	mov	r2, r3
 8002186:	2110      	movs	r1, #16
 8002188:	4808      	ldr	r0, [pc, #32]	; (80021ac <Compressor+0x34>)
 800218a:	f002 f87c 	bl	8004286 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
	if (value == 1) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d103      	bne.n	800219c <Compressor+0x24>
		bufferCanTx[13] = 0;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <Compressor+0x38>)
 8002196:	2200      	movs	r2, #0
 8002198:	735a      	strb	r2, [r3, #13]
	} else {
		bufferCanTx[13] = 1;
	}

}
 800219a:	e002      	b.n	80021a2 <Compressor+0x2a>
		bufferCanTx[13] = 1;
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <Compressor+0x38>)
 800219e:	2201      	movs	r2, #1
 80021a0:	735a      	strb	r2, [r3, #13]
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40010800 	.word	0x40010800
 80021b0:	200005dc 	.word	0x200005dc

080021b4 <Ozone>:

void Ozone(uint8_t value) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	461a      	mov	r2, r3
 80021c2:	2102      	movs	r1, #2
 80021c4:	4808      	ldr	r0, [pc, #32]	; (80021e8 <Ozone+0x34>)
 80021c6:	f002 f85e 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d103      	bne.n	80021d8 <Ozone+0x24>
		bufferCanTx[14] = 0;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <Ozone+0x38>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	739a      	strb	r2, [r3, #14]
	} else {
		bufferCanTx[14] = 1;
	}
}
 80021d6:	e002      	b.n	80021de <Ozone+0x2a>
		bufferCanTx[14] = 1;
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <Ozone+0x38>)
 80021da:	2201      	movs	r2, #1
 80021dc:	739a      	strb	r2, [r3, #14]
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010800 	.word	0x40010800
 80021ec:	200005dc 	.word	0x200005dc

080021f0 <Pump_1>:

void Pump_1(uint8_t value) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002202:	4808      	ldr	r0, [pc, #32]	; (8002224 <Pump_1+0x34>)
 8002204:	f002 f83f 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d103      	bne.n	8002216 <Pump_1+0x26>
		bufferCanTx[8] = 0;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <Pump_1+0x38>)
 8002210:	2200      	movs	r2, #0
 8002212:	721a      	strb	r2, [r3, #8]
	} else {
		bufferCanTx[8] = 1;
	}
}
 8002214:	e002      	b.n	800221c <Pump_1+0x2c>
		bufferCanTx[8] = 1;
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <Pump_1+0x38>)
 8002218:	2201      	movs	r2, #1
 800221a:	721a      	strb	r2, [r3, #8]
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40010c00 	.word	0x40010c00
 8002228:	200005dc 	.word	0x200005dc

0800222c <Pump_2>:

void Pump_2(uint8_t value) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223e:	4808      	ldr	r0, [pc, #32]	; (8002260 <Pump_2+0x34>)
 8002240:	f002 f821 	bl	8004286 <HAL_GPIO_WritePin>

	if (value == 1) {
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d103      	bne.n	8002252 <Pump_2+0x26>
		bufferCanTx[7] = 0;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <Pump_2+0x38>)
 800224c:	2200      	movs	r2, #0
 800224e:	71da      	strb	r2, [r3, #7]
	} else {
		bufferCanTx[7] = 1;
	}
}
 8002250:	e002      	b.n	8002258 <Pump_2+0x2c>
		bufferCanTx[7] = 1;
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <Pump_2+0x38>)
 8002254:	2201      	movs	r2, #1
 8002256:	71da      	strb	r2, [r3, #7]
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40010c00 	.word	0x40010c00
 8002264:	200005dc 	.word	0x200005dc

08002268 <Pump_3>:

void Pump_3(uint8_t value) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800227a:	4808      	ldr	r0, [pc, #32]	; (800229c <Pump_3+0x34>)
 800227c:	f002 f803 	bl	8004286 <HAL_GPIO_WritePin>
	if (value == 1) {
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d103      	bne.n	800228e <Pump_3+0x26>
		bufferCanTx[6] = 0;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <Pump_3+0x38>)
 8002288:	2200      	movs	r2, #0
 800228a:	719a      	strb	r2, [r3, #6]
	} else {
		bufferCanTx[6] = 1;
	}
}
 800228c:	e002      	b.n	8002294 <Pump_3+0x2c>
		bufferCanTx[6] = 1;
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <Pump_3+0x38>)
 8002290:	2201      	movs	r2, #1
 8002292:	719a      	strb	r2, [r3, #6]
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	200005dc 	.word	0x200005dc

080022a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022aa:	f000 fdc7 	bl	8002e3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022ae:	f000 f829 	bl	8002304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022b2:	f000 fa25 	bl	8002700 <MX_GPIO_Init>
	MX_CAN_Init();
 80022b6:	f000 f8b1 	bl	800241c <MX_CAN_Init>
	MX_TIM2_Init();
 80022ba:	f000 f935 	bl	8002528 <MX_TIM2_Init>
	MX_TIM3_Init();
 80022be:	f000 f9a7 	bl	8002610 <MX_TIM3_Init>
	MX_I2C1_Init();
 80022c2:	f000 f903 	bl	80024cc <MX_I2C1_Init>
	MX_ADC1_Init();
 80022c6:	f000 f879 	bl	80023bc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80022ca:	f000 f9ef 	bl	80026ac <MX_USART1_UART_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	fungsiInit();
 80022ce:	f7ff fd3f 	bl	8001d50 <fungsiInit>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <main+0x58>)
 80022d4:	1d3c      	adds	r4, r7, #4
 80022d6:	461d      	mov	r5, r3
 80022d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fe25 	bl	8006f38 <osThreadCreate>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <main+0x5c>)
 80022f2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80022f4:	f004 fe19 	bl	8006f2a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80022f8:	e7fe      	b.n	80022f8 <main+0x54>
 80022fa:	bf00      	nop
 80022fc:	080085dc 	.word	0x080085dc
 8002300:	200005d4 	.word	0x200005d4

08002304 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b094      	sub	sp, #80	; 0x50
 8002308:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800230a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230e:	2228      	movs	r2, #40	; 0x28
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f006 f828 	bl	8008368 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002334:	2301      	movs	r3, #1
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002342:	2301      	movs	r3, #1
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002346:	2302      	movs	r3, #2
 8002348:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800234a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002354:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235a:	4618      	mov	r0, r3
 800235c:	f002 ffac 	bl	80052b8 <HAL_RCC_OscConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <SystemClock_Config+0x66>
		Error_Handler();
 8002366:	f000 fa57 	bl	8002818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800236a:	230f      	movs	r3, #15
 800236c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236e:	2302      	movs	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fa18 	bl	80057bc <HAL_RCC_ClockConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0x92>
		Error_Handler();
 8002392:	f000 fa41 	bl	8002818 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002396:	2302      	movs	r3, #2
 8002398:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fbd2 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0xae>
		Error_Handler();
 80023ae:	f000 fa33 	bl	8002818 <Error_Handler>
	}
}
 80023b2:	bf00      	nop
 80023b4:	3750      	adds	r7, #80	; 0x50
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_ADC1_Init+0x58>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <MX_ADC1_Init+0x5c>)
 80023d0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <MX_ADC1_Init+0x58>)
 80023d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_ADC1_Init+0x58>)
 80023dc:	2201      	movs	r2, #1
 80023de:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_ADC1_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_ADC1_Init+0x58>)
 80023e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023ec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_ADC1_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_ADC1_Init+0x58>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <MX_ADC1_Init+0x58>)
 80023fc:	f000 fd74 	bl	8002ee8 <HAL_ADC_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_ADC1_Init+0x4e>
		Error_Handler();
 8002406:	f000 fa07 	bl	8002818 <Error_Handler>
//  }
//  /* USER CODE BEGIN ADC1_Init 2 */
//
//  /* USER CODE END ADC1_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000454 	.word	0x20000454
 8002418:	40012400 	.word	0x40012400

0800241c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <MX_CAN_Init+0xac>)
 8002426:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 18;
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <MX_CAN_Init+0xa8>)
 800242a:	2212      	movs	r2, #18
 800242c:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <MX_CAN_Init+0xa8>)
 800243c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002440:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <MX_CAN_Init+0xa8>)
 800244a:	2200      	movs	r2, #0
 800244c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002450:	2200      	movs	r2, #0
 8002452:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002456:	2200      	movs	r2, #0
 8002458:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_CAN_Init+0xa8>)
 800245c:	2200      	movs	r2, #0
 800245e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002462:	2200      	movs	r2, #0
 8002464:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_CAN_Init+0xa8>)
 8002468:	2200      	movs	r2, #0
 800246a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800246c:	4815      	ldr	r0, [pc, #84]	; (80024c4 <MX_CAN_Init+0xa8>)
 800246e:	f000 fe54 	bl	800311a <HAL_CAN_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_CAN_Init+0x60>
		Error_Handler();
 8002478:	f000 f9ce 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800247c:	2301      	movs	r3, #1
 800247e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8002480:	230a      	movs	r3, #10
 8002482:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002484:	2301      	movs	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800249c:	2301      	movs	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80024a4:	463b      	mov	r3, r7
 80024a6:	4619      	mov	r1, r3
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_CAN_Init+0xa8>)
 80024aa:	f000 ff31 	bl	8003310 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_CAN_Init+0xa8>)
 80024b0:	f000 fff7 	bl	80034a2 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80024b4:	2110      	movs	r1, #16
 80024b6:	4803      	ldr	r0, [pc, #12]	; (80024c4 <MX_CAN_Init+0xa8>)
 80024b8:	f001 fa22 	bl	8003900 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000484 	.word	0x20000484
 80024c8:	40006400 	.word	0x40006400

080024cc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <MX_I2C1_Init+0x50>)
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <MX_I2C1_Init+0x54>)
 80024d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_I2C1_Init+0x50>)
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <MX_I2C1_Init+0x58>)
 80024da:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_I2C1_Init+0x50>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_I2C1_Init+0x50>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_I2C1_Init+0x50>)
 80024ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ee:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <MX_I2C1_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_I2C1_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <MX_I2C1_Init+0x50>)
 800250a:	f001 fed5 	bl	80042b8 <HAL_I2C_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002514:	f000 f980 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200004ac 	.word	0x200004ac
 8002520:	40005400 	.word	0x40005400
 8002524:	00061a80 	.word	0x00061a80

08002528 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800252e:	f107 0318 	add.w	r3, r7, #24
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002546:	463b      	mov	r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <MX_TIM2_Init+0xe4>)
 8002554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002558:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <MX_TIM2_Init+0xe4>)
 800255c:	2247      	movs	r2, #71	; 0x47
 800255e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <MX_TIM2_Init+0xe4>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535 - 1;
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <MX_TIM2_Init+0xe4>)
 8002568:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800256c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <MX_TIM2_Init+0xe4>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <MX_TIM2_Init+0xe4>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800257a:	4824      	ldr	r0, [pc, #144]	; (800260c <MX_TIM2_Init+0xe4>)
 800257c:	f003 fb9c 	bl	8005cb8 <HAL_TIM_Base_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x62>
		Error_Handler();
 8002586:	f000 f947 	bl	8002818 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	4619      	mov	r1, r3
 8002596:	481d      	ldr	r0, [pc, #116]	; (800260c <MX_TIM2_Init+0xe4>)
 8002598:	f003 ff2a 	bl	80063f0 <HAL_TIM_ConfigClockSource>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80025a2:	f000 f939 	bl	8002818 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80025a6:	4819      	ldr	r0, [pc, #100]	; (800260c <MX_TIM2_Init+0xe4>)
 80025a8:	f003 fc28 	bl	8005dfc <HAL_TIM_IC_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM2_Init+0x8e>
		Error_Handler();
 80025b2:	f000 f931 	bl	8002818 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	4619      	mov	r1, r3
 80025c4:	4811      	ldr	r0, [pc, #68]	; (800260c <MX_TIM2_Init+0xe4>)
 80025c6:	f004 fa61 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80025d0:	f000 f922 	bl	8002818 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025d8:	2301      	movs	r3, #1
 80025da:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80025e4:	463b      	mov	r3, r7
 80025e6:	2200      	movs	r2, #0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4808      	ldr	r0, [pc, #32]	; (800260c <MX_TIM2_Init+0xe4>)
 80025ec:	f003 fe6c 	bl	80062c8 <HAL_TIM_IC_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM2_Init+0xd2>
		Error_Handler();
 80025f6:	f000 f90f 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80025fa:	2100      	movs	r1, #0
 80025fc:	4803      	ldr	r0, [pc, #12]	; (800260c <MX_TIM2_Init+0xe4>)
 80025fe:	f003 fc55 	bl	8005eac <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000500 	.word	0x20000500

08002610 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002624:	463b      	mov	r3, r7
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_TIM3_Init+0x94>)
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <MX_TIM3_Init+0x98>)
 8002630:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <MX_TIM3_Init+0x94>)
 8002634:	2247      	movs	r2, #71	; 0x47
 8002636:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_TIM3_Init+0x94>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <MX_TIM3_Init+0x94>)
 8002640:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002644:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <MX_TIM3_Init+0x94>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <MX_TIM3_Init+0x94>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002652:	4814      	ldr	r0, [pc, #80]	; (80026a4 <MX_TIM3_Init+0x94>)
 8002654:	f003 fb30 	bl	8005cb8 <HAL_TIM_Base_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM3_Init+0x52>
		Error_Handler();
 800265e:	f000 f8db 	bl	8002818 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002666:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	4619      	mov	r1, r3
 800266e:	480d      	ldr	r0, [pc, #52]	; (80026a4 <MX_TIM3_Init+0x94>)
 8002670:	f003 febe 	bl	80063f0 <HAL_TIM_ConfigClockSource>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM3_Init+0x6e>
		Error_Handler();
 800267a:	f000 f8cd 	bl	8002818 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002686:	463b      	mov	r3, r7
 8002688:	4619      	mov	r1, r3
 800268a:	4806      	ldr	r0, [pc, #24]	; (80026a4 <MX_TIM3_Init+0x94>)
 800268c:	f004 f9fe 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002696:	f000 f8bf 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000548 	.word	0x20000548
 80026a8:	40000400 	.word	0x40000400

080026ac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <MX_USART1_UART_Init+0x50>)
 80026b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026d2:	220c      	movs	r2, #12
 80026d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026e4:	f004 fa42 	bl	8006b6c <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80026ee:	f000 f893 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000590 	.word	0x20000590
 80026fc:	40013800 	.word	0x40013800

08002700 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <MX_GPIO_Init+0xc4>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <MX_GPIO_Init+0xc4>)
 800271a:	f043 0320 	orr.w	r3, r3, #32
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <MX_GPIO_Init+0xc4>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <MX_GPIO_Init+0xc4>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <MX_GPIO_Init+0xc4>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <MX_GPIO_Init+0xc4>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_GPIO_Init+0xc4>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <MX_GPIO_Init+0xc4>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_GPIO_Init+0xc4>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002762:	4819      	ldr	r0, [pc, #100]	; (80027c8 <MX_GPIO_Init+0xc8>)
 8002764:	f001 fd8f 	bl	8004286 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800276e:	4817      	ldr	r0, [pc, #92]	; (80027cc <MX_GPIO_Init+0xcc>)
 8002770:	f001 fd89 	bl	8004286 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	2118      	movs	r1, #24
 8002778:	4813      	ldr	r0, [pc, #76]	; (80027c8 <MX_GPIO_Init+0xc8>)
 800277a:	f001 fd84 	bl	8004286 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB11 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_3 | GPIO_PIN_4;
 800277e:	f640 0318 	movw	r3, #2072	; 0x818
 8002782:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002784:	2301      	movs	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2302      	movs	r3, #2
 800278e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	480c      	ldr	r0, [pc, #48]	; (80027c8 <MX_GPIO_Init+0xc8>)
 8002798:	f001 fbda 	bl	8003f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800279c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	4805      	ldr	r0, [pc, #20]	; (80027cc <MX_GPIO_Init+0xcc>)
 80027b6:	f001 fbcb 	bl	8003f50 <HAL_GPIO_Init>

}
 80027ba:	bf00      	nop
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010c00 	.word	0x40010c00
 80027cc:	40010800 	.word	0x40010800

080027d0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
//		for (uint8_t a = 0; a < 8; a++) {
//			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			osDelay(50);
//		}
//		comm_can_transmit_eid(4, send, 8);
		cobaTask1++;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <StartDefaultTask+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <StartDefaultTask+0x20>)
 80027e2:	701a      	strb	r2, [r3, #0]
		osDelay(10000);
 80027e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80027e8:	f004 fbf2 	bl	8006fd0 <osDelay>
		cobaTask1++;
 80027ec:	e7f4      	b.n	80027d8 <StartDefaultTask+0x8>
 80027ee:	bf00      	nop
 80027f0:	200005d8 	.word	0x200005d8

080027f4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002806:	f000 fb2f 	bl	8002e68 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40000800 	.word	0x40000800

08002818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002820:	e7fe      	b.n	8002820 <Error_Handler+0x8>
	...

08002824 <manageData>:
extern uint8_t indicator1, indicator2;
extern uint32_t mode;

uint8_t bufferCanTx[32];

void manageData(void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0

	// data timer proses EAB
	bufferCanTx[0] = timerEAB & 0xff;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <manageData+0x9c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <manageData+0xa0>)
 8002830:	701a      	strb	r2, [r3, #0]
	bufferCanTx[1] = timerEAB >> 8;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <manageData+0x9c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <manageData+0xa0>)
 800283c:	705a      	strb	r2, [r3, #1]

	// data arus eab karena float dikali 100 dulu
	bufferCanTx[2] = (uint32_t) (currentEAB * 100) & 0xff;
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <manageData+0xa4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4922      	ldr	r1, [pc, #136]	; (80028cc <manageData+0xa8>)
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fc83 	bl	8000150 <__aeabi_fmul>
 800284a:	4603      	mov	r3, r0
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fafd 	bl	8000e4c <__aeabi_f2uiz>
 8002852:	4603      	mov	r3, r0
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <manageData+0xa0>)
 8002858:	709a      	strb	r2, [r3, #2]
	bufferCanTx[3] = (uint32_t) (currentEAB * 100) >> 8;
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <manageData+0xa4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	491b      	ldr	r1, [pc, #108]	; (80028cc <manageData+0xa8>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fc75 	bl	8000150 <__aeabi_fmul>
 8002866:	4603      	mov	r3, r0
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe faef 	bl	8000e4c <__aeabi_f2uiz>
 800286e:	4603      	mov	r3, r0
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <manageData+0xa0>)
 8002876:	70da      	strb	r2, [r3, #3]

	// data teganagn eab karena float dikali 100 dulu
	bufferCanTx[4] = (uint32_t) (voltEAB * 100) & 0xff;
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <manageData+0xac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4913      	ldr	r1, [pc, #76]	; (80028cc <manageData+0xa8>)
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fc66 	bl	8000150 <__aeabi_fmul>
 8002884:	4603      	mov	r3, r0
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fae0 	bl	8000e4c <__aeabi_f2uiz>
 800288c:	4603      	mov	r3, r0
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <manageData+0xa0>)
 8002892:	711a      	strb	r2, [r3, #4]
	bufferCanTx[5] = (uint32_t) (voltEAB * 100) >> 8;
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <manageData+0xac>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <manageData+0xa8>)
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fc58 	bl	8000150 <__aeabi_fmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fad2 	bl	8000e4c <__aeabi_f2uiz>
 80028a8:	4603      	mov	r3, r0
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <manageData+0xa0>)
 80028b0:	715a      	strb	r2, [r3, #5]

	//data indicator
//	bufferCanTx[6] = indicator1;
//	bufferCanTx[7] = indicator2;

	bufferCanTx[15] = (uint8_t) mode;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <manageData+0xb0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <manageData+0xa0>)
 80028ba:	73da      	strb	r2, [r3, #15]

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000428 	.word	0x20000428
 80028c4:	200005dc 	.word	0x200005dc
 80028c8:	20000448 	.word	0x20000448
 80028cc:	42c80000 	.word	0x42c80000
 80028d0:	2000044c 	.word	0x2000044c
 80028d4:	20000430 	.word	0x20000430

080028d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_MspInit+0x68>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_MspInit+0x68>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6193      	str	r3, [r2, #24]
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_MspInit+0x68>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_MspInit+0x68>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_MspInit+0x68>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	61d3      	str	r3, [r2, #28]
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_MspInit+0x68>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	210f      	movs	r1, #15
 8002912:	f06f 0001 	mvn.w	r0, #1
 8002916:	f001 faf0 	bl	8003efa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_MspInit+0x6c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_MspInit+0x6c>)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40010000 	.word	0x40010000

08002948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_ADC_MspInit+0x6c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d121      	bne.n	80029ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_ADC_MspInit+0x70>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <HAL_ADC_MspInit+0x70>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_ADC_MspInit+0x70>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_ADC_MspInit+0x70>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_ADC_MspInit+0x70>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_ADC_MspInit+0x70>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8002998:	23c1      	movs	r3, #193	; 0xc1
 800299a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800299c:	2303      	movs	r3, #3
 800299e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4619      	mov	r1, r3
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <HAL_ADC_MspInit+0x74>)
 80029a8:	f001 fad2 	bl	8003f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40012400 	.word	0x40012400
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010800 	.word	0x40010800

080029c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <HAL_CAN_MspInit+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d14b      	bne.n	8002a78 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_CAN_MspInit+0xc4>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_CAN_MspInit+0xc4>)
 80029e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_CAN_MspInit+0xc4>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_CAN_MspInit+0xc4>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_CAN_MspInit+0xc4>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_CAN_MspInit+0xc4>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4818      	ldr	r0, [pc, #96]	; (8002a88 <HAL_CAN_MspInit+0xc8>)
 8002a26:	f001 fa93 	bl	8003f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4812      	ldr	r0, [pc, #72]	; (8002a88 <HAL_CAN_MspInit+0xc8>)
 8002a40:	f001 fa86 	bl	8003f50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_CAN_MspInit+0xcc>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_CAN_MspInit+0xcc>)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2105      	movs	r1, #5
 8002a6c:	2015      	movs	r0, #21
 8002a6e:	f001 fa44 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002a72:	2015      	movs	r0, #21
 8002a74:	f001 fa5d 	bl	8003f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a78:	bf00      	nop
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40006400 	.word	0x40006400
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010c00 	.word	0x40010c00
 8002a8c:	40010000 	.word	0x40010000

08002a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <HAL_I2C_MspInit+0x70>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d123      	bne.n	8002af8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ac8:	23c0      	movs	r3, #192	; 0xc0
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002acc:	2312      	movs	r3, #18
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480b      	ldr	r0, [pc, #44]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002adc:	f001 fa38 	bl	8003f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aea:	61d3      	str	r3, [r2, #28]
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002af8:	bf00      	nop
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40005400 	.word	0x40005400
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010c00 	.word	0x40010c00

08002b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d13f      	bne.n	8002bac <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	61d3      	str	r3, [r2, #28]
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6193      	str	r3, [r2, #24]
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	4619      	mov	r1, r3
 8002b70:	481a      	ldr	r0, [pc, #104]	; (8002bdc <HAL_TIM_Base_MspInit+0xd0>)
 8002b72:	f001 f9ed 	bl	8003f50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_TIM_Base_MspInit+0xd4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_TIM_Base_MspInit+0xd4>)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2105      	movs	r1, #5
 8002b9e:	201c      	movs	r0, #28
 8002ba0:	f001 f9ab 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ba4:	201c      	movs	r0, #28
 8002ba6:	f001 f9c4 	bl	8003f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002baa:	e010      	b.n	8002bce <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <HAL_TIM_Base_MspInit+0xd8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10b      	bne.n	8002bce <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	61d3      	str	r3, [r2, #28]
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	; 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010800 	.word	0x40010800
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40000400 	.word	0x40000400

08002be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d131      	bne.n	8002c6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a1a      	ldr	r2, [pc, #104]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480b      	ldr	r0, [pc, #44]	; (8002c7c <HAL_UART_MspInit+0x94>)
 8002c4e:	f001 f97f 	bl	8003f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <HAL_UART_MspInit+0x94>)
 8002c68:	f001 f972 	bl	8003f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c6c:	bf00      	nop
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40013800 	.word	0x40013800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010800 	.word	0x40010800

08002c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_InitTick+0xe8>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a33      	ldr	r2, [pc, #204]	; (8002d68 <HAL_InitTick+0xe8>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	61d3      	str	r3, [r2, #28]
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_InitTick+0xe8>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cae:	f107 0210 	add.w	r2, r7, #16
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 fef9 	bl	8005ab0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f002 feca 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8002ccc:	6378      	str	r0, [r7, #52]	; 0x34
 8002cce:	e004      	b.n	8002cda <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cd0:	f002 fec6 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_InitTick+0xec>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_InitTick+0xf0>)
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_InitTick+0xf4>)
 8002cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_InitTick+0xf0>)
 8002cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cf4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_InitTick+0xf0>)
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_InitTick+0xf0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_InitTick+0xf0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_InitTick+0xf0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002d0e:	4818      	ldr	r0, [pc, #96]	; (8002d70 <HAL_InitTick+0xf0>)
 8002d10:	f002 ffd2 	bl	8005cb8 <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11b      	bne.n	8002d5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002d22:	4813      	ldr	r0, [pc, #76]	; (8002d70 <HAL_InitTick+0xf0>)
 8002d24:	f003 f818 	bl	8005d58 <HAL_TIM_Base_Start_IT>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d111      	bne.n	8002d5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d36:	201e      	movs	r0, #30
 8002d38:	f001 f8fb 	bl	8003f32 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d808      	bhi.n	8002d54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002d42:	2200      	movs	r2, #0
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	201e      	movs	r0, #30
 8002d48:	f001 f8d7 	bl	8003efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_InitTick+0xf8>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e002      	b.n	8002d5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3738      	adds	r7, #56	; 0x38
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	431bde83 	.word	0x431bde83
 8002d70:	200005fc 	.word	0x200005fc
 8002d74:	40000800 	.word	0x40000800
 8002d78:	20000008 	.word	0x20000008

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <CAN1_RX1_IRQHandler+0x10>)
 8002dae:	f000 fdcc 	bl	800394a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000484 	.word	0x20000484

08002dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <TIM2_IRQHandler+0x10>)
 8002dc2:	f003 f979 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000500 	.word	0x20000500

08002dd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <TIM4_IRQHandler+0x10>)
 8002dd6:	f003 f96f 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200005fc 	.word	0x200005fc

08002de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002df2:	490d      	ldr	r1, [pc, #52]	; (8002e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df8:	e002      	b.n	8002e00 <LoopCopyDataInit>

08002dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfe:	3304      	adds	r3, #4

08002e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e04:	d3f9      	bcc.n	8002dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e08:	4c0a      	ldr	r4, [pc, #40]	; (8002e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e0c:	e001      	b.n	8002e12 <LoopFillZerobss>

08002e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e10:	3204      	adds	r2, #4

08002e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e14:	d3fb      	bcc.n	8002e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e16:	f7ff ffe5 	bl	8002de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e1a:	f005 fa71 	bl	8008300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e1e:	f7ff fa41 	bl	80022a4 <main>
  bx lr
 8002e22:	4770      	bx	lr
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002e2c:	08008690 	.word	0x08008690
  ldr r2, =_sbss
 8002e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002e34:	2000139c 	.word	0x2000139c

08002e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC1_2_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_Init+0x28>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <HAL_Init+0x28>)
 8002e46:	f043 0310 	orr.w	r3, r3, #16
 8002e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f001 f849 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e52:	200f      	movs	r0, #15
 8002e54:	f7ff ff14 	bl	8002c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e58:	f7ff fd3e 	bl	80028d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40022000 	.word	0x40022000

08002e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_IncTick+0x1c>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_IncTick+0x20>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_IncTick+0x20>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	20000644 	.word	0x20000644

08002e8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <HAL_GetTick+0x10>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000644 	.word	0x20000644

08002ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d005      	beq.n	8002ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_Delay+0x44>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ec6:	bf00      	nop
 8002ec8:	f7ff ffe0 	bl	8002e8c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d8f7      	bhi.n	8002ec8 <HAL_Delay+0x28>
  {
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000000c 	.word	0x2000000c

08002ee8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0be      	b.n	8003088 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fd0e 	bl	8002948 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f8b3 	bl	8003098 <ADC_ConversionStop_Disable>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 8099 	bne.w	8003076 <HAL_ADC_Init+0x18e>
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 8095 	bne.w	8003076 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f54:	f023 0302 	bic.w	r3, r3, #2
 8002f58:	f043 0202 	orr.w	r2, r3, #2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7b1b      	ldrb	r3, [r3, #12]
 8002f6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f80:	d003      	beq.n	8002f8a <HAL_ADC_Init+0xa2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_ADC_Init+0xa8>
 8002f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8e:	e000      	b.n	8002f92 <HAL_ADC_Init+0xaa>
 8002f90:	2300      	movs	r3, #0
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7d1b      	ldrb	r3, [r3, #20]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d119      	bne.n	8002fd4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7b1b      	ldrb	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	035a      	lsls	r2, r3, #13
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	e00b      	b.n	8002fd4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_ADC_Init+0x1a8>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003004:	d003      	beq.n	800300e <HAL_ADC_Init+0x126>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d104      	bne.n	8003018 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	3b01      	subs	r3, #1
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	430a      	orrs	r2, r1
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_ADC_Init+0x1ac>)
 8003034:	4013      	ands	r3, r2
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d10b      	bne.n	8003054 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003052:	e018      	b.n	8003086 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f023 0312 	bic.w	r3, r3, #18
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003074:	e007      	b.n	8003086 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	ffe1f7fd 	.word	0xffe1f7fd
 8003094:	ff1f0efe 	.word	0xff1f0efe

08003098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d12e      	bne.n	8003110 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030c2:	f7ff fee3 	bl	8002e8c <HAL_GetTick>
 80030c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030c8:	e01b      	b.n	8003102 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030ca:	f7ff fedf 	bl	8002e8c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d914      	bls.n	8003102 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10d      	bne.n	8003102 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d0dc      	beq.n	80030ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0ed      	b.n	8003308 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fc41 	bl	80029c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800314e:	f7ff fe9d 	bl	8002e8c <HAL_GetTick>
 8003152:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003154:	e012      	b.n	800317c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003156:	f7ff fe99 	bl	8002e8c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b0a      	cmp	r3, #10
 8003162:	d90b      	bls.n	800317c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2205      	movs	r2, #5
 8003174:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0c5      	b.n	8003308 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0e5      	beq.n	8003156 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0202 	bic.w	r2, r2, #2
 8003198:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319a:	f7ff fe77 	bl	8002e8c <HAL_GetTick>
 800319e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a0:	e012      	b.n	80031c8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a2:	f7ff fe73 	bl	8002e8c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b0a      	cmp	r3, #10
 80031ae:	d90b      	bls.n	80031c8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2205      	movs	r2, #5
 80031c0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e09f      	b.n	8003308 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7e1b      	ldrb	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d108      	bne.n	80031f0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e007      	b.n	8003200 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e5b      	ldrb	r3, [r3, #25]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d108      	bne.n	800321a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e007      	b.n	800322a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7e9b      	ldrb	r3, [r3, #26]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0220 	bic.w	r2, r2, #32
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7edb      	ldrb	r3, [r3, #27]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d108      	bne.n	800326e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0210 	bic.w	r2, r2, #16
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e007      	b.n	800327e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0210 	orr.w	r2, r2, #16
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7f1b      	ldrb	r3, [r3, #28]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0208 	orr.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e007      	b.n	80032a8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0208 	bic.w	r2, r2, #8
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7f5b      	ldrb	r3, [r3, #29]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0204 	orr.w	r2, r2, #4
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e007      	b.n	80032d2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0204 	bic.w	r2, r2, #4
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	ea42 0103 	orr.w	r1, r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003326:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d003      	beq.n	8003336 <HAL_CAN_ConfigFilter+0x26>
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b02      	cmp	r3, #2
 8003332:	f040 80aa 	bne.w	800348a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2201      	movs	r2, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	401a      	ands	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d123      	bne.n	80033b8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003392:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3248      	adds	r2, #72	; 0x48
 8003398:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	3348      	adds	r3, #72	; 0x48
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d122      	bne.n	8003406 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3248      	adds	r2, #72	; 0x48
 80033e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033fc:	6979      	ldr	r1, [r7, #20]
 80033fe:	3348      	adds	r3, #72	; 0x48
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003420:	e007      	b.n	8003432 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	431a      	orrs	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	401a      	ands	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800344c:	e007      	b.n	800345e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	431a      	orrs	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	431a      	orrs	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800347c:	f023 0201 	bic.w	r2, r3, #1
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e006      	b.n	8003498 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d12e      	bne.n	8003514 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ce:	f7ff fcdd 	bl	8002e8c <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034d4:	e012      	b.n	80034fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034d6:	f7ff fcd9 	bl	8002e8c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b0a      	cmp	r3, #10
 80034e2:	d90b      	bls.n	80034fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2205      	movs	r2, #5
 80034f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e012      	b.n	8003522 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e006      	b.n	8003522 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800352a:	b480      	push	{r7}
 800352c:	b089      	sub	sp, #36	; 0x24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d003      	beq.n	8003556 <HAL_CAN_AddTxMessage+0x2c>
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	2b02      	cmp	r3, #2
 8003552:	f040 80b8 	bne.w	80036c6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a0 	beq.w	80036b6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	0e1b      	lsrs	r3, r3, #24
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d907      	bls.n	8003596 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e09e      	b.n	80036d4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003596:	2201      	movs	r2, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	6809      	ldr	r1, [r1, #0]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3318      	adds	r3, #24
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	440b      	add	r3, r1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e00f      	b.n	80035e4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035d4:	68f9      	ldr	r1, [r7, #12]
 80035d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3318      	adds	r3, #24
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	440b      	add	r3, r1
 80035e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3318      	adds	r3, #24
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	440b      	add	r3, r1
 80035f4:	3304      	adds	r3, #4
 80035f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	7d1b      	ldrb	r3, [r3, #20]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d111      	bne.n	8003624 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3318      	adds	r3, #24
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	6811      	ldr	r1, [r2, #0]
 8003614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3318      	adds	r3, #24
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	440b      	add	r3, r1
 8003620:	3304      	adds	r3, #4
 8003622:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3307      	adds	r3, #7
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	061a      	lsls	r2, r3, #24
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3306      	adds	r3, #6
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3305      	adds	r3, #5
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	4313      	orrs	r3, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	3204      	adds	r2, #4
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	4610      	mov	r0, r2
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	6811      	ldr	r1, [r2, #0]
 800364c:	ea43 0200 	orr.w	r2, r3, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	440b      	add	r3, r1
 8003656:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800365a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3303      	adds	r3, #3
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	061a      	lsls	r2, r3, #24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3302      	adds	r3, #2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3301      	adds	r3, #1
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	4313      	orrs	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	4610      	mov	r0, r2
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	6811      	ldr	r1, [r2, #0]
 8003682:	ea43 0200 	orr.w	r2, r3, r0
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	440b      	add	r3, r1
 800368c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003690:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3318      	adds	r3, #24
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	6811      	ldr	r1, [r2, #0]
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3318      	adds	r3, #24
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	440b      	add	r3, r1
 80036b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e00e      	b.n	80036d4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e006      	b.n	80036d4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3724      	adds	r7, #36	; 0x24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036de:	b480      	push	{r7}
 80036e0:	b087      	sub	sp, #28
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d003      	beq.n	8003702 <HAL_CAN_GetRxMessage+0x24>
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 80f3 	bne.w	80038e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10e      	bne.n	8003726 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d116      	bne.n	8003744 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0e7      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0d8      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	331b      	adds	r3, #27
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0204 	and.w	r2, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10c      	bne.n	800377c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	331b      	adds	r3, #27
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	4413      	add	r3, r2
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0d5b      	lsrs	r3, r3, #21
 8003772:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e00b      	b.n	8003794 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	331b      	adds	r3, #27
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	4413      	add	r3, r2
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	331b      	adds	r3, #27
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	4413      	add	r3, r2
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0202 	and.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	331b      	adds	r3, #27
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	331b      	adds	r3, #27
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	331b      	adds	r3, #27
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0a1a      	lsrs	r2, r3, #8
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4413      	add	r3, r2
 800382c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	0c1a      	lsrs	r2, r3, #16
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	3302      	adds	r3, #2
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e1a      	lsrs	r2, r3, #24
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	3303      	adds	r3, #3
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0a1a      	lsrs	r2, r3, #8
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3305      	adds	r3, #5
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0c1a      	lsrs	r2, r3, #16
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	3306      	adds	r3, #6
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	0e1a      	lsrs	r2, r3, #24
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	3307      	adds	r3, #7
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e007      	b.n	80038e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0220 	orr.w	r2, r2, #32
 80038e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e006      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003910:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <HAL_CAN_ActivateNotification+0x1e>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d109      	bne.n	8003932 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6959      	ldr	r1, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e006      	b.n	8003940 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b08a      	sub	sp, #40	; 0x28
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d07c      	beq.n	8003a8a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d023      	beq.n	80039e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f983 	bl	8003cb8 <HAL_CAN_TxMailbox0CompleteCallback>
 80039b2:	e016      	b.n	80039e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	e00c      	b.n	80039e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e002      	b.n	80039e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f986 	bl	8003cee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d024      	beq.n	8003a36 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f962 	bl	8003cca <HAL_CAN_TxMailbox1CompleteCallback>
 8003a06:	e016      	b.n	8003a36 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	e00c      	b.n	8003a36 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e002      	b.n	8003a36 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f965 	bl	8003d00 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d024      	beq.n	8003a8a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f941 	bl	8003cdc <HAL_CAN_TxMailbox2CompleteCallback>
 8003a5a:	e016      	b.n	8003a8a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e00c      	b.n	8003a8a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	e002      	b.n	8003a8a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f944 	bl	8003d12 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00c      	beq.n	8003aae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2210      	movs	r2, #16
 8003aac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f933 	bl	8003d36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f91b 	bl	8003d24 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f90a 	bl	8003d48 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fd fb87 	bl	8001260 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8f3 	bl	8003d5a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8eb 	bl	8003d6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d07b      	beq.n	8003c98 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d072      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d043      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d03e      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c18:	2b60      	cmp	r3, #96	; 0x60
 8003c1a:	d02b      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x32a>
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d82e      	bhi.n	8003c7e <HAL_CAN_IRQHandler+0x334>
 8003c20:	2b50      	cmp	r3, #80	; 0x50
 8003c22:	d022      	beq.n	8003c6a <HAL_CAN_IRQHandler+0x320>
 8003c24:	2b50      	cmp	r3, #80	; 0x50
 8003c26:	d82a      	bhi.n	8003c7e <HAL_CAN_IRQHandler+0x334>
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d019      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x316>
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d826      	bhi.n	8003c7e <HAL_CAN_IRQHandler+0x334>
 8003c30:	2b30      	cmp	r3, #48	; 0x30
 8003c32:	d010      	beq.n	8003c56 <HAL_CAN_IRQHandler+0x30c>
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d822      	bhi.n	8003c7e <HAL_CAN_IRQHandler+0x334>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d002      	beq.n	8003c42 <HAL_CAN_IRQHandler+0x2f8>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d005      	beq.n	8003c4c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c40:	e01d      	b.n	8003c7e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	f043 0308 	orr.w	r3, r3, #8
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c4a:	e019      	b.n	8003c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	f043 0310 	orr.w	r3, r3, #16
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c54:	e014      	b.n	8003c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c5e:	e00f      	b.n	8003c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c68:	e00a      	b.n	8003c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c72:	e005      	b.n	8003c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c7c:	e000      	b.n	8003c80 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c7e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f867 	bl	8003d7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	3728      	adds	r7, #40	; 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc2:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	60d3      	str	r3, [r2, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4906      	ldr	r1, [pc, #24]	; (8003e28 <__NVIC_EnableIRQ+0x34>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	6039      	str	r1, [r7, #0]
 8003e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db0a      	blt.n	8003e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <__NVIC_SetPriority+0x4c>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	0112      	lsls	r2, r2, #4
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e54:	e00a      	b.n	8003e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <__NVIC_SetPriority+0x50>)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	3b04      	subs	r3, #4
 8003e64:	0112      	lsls	r2, r2, #4
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	440b      	add	r3, r1
 8003e6a:	761a      	strb	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e100 	.word	0xe000e100
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f1c3 0307 	rsb	r3, r3, #7
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf28      	it	cs
 8003e9e:	2304      	movcs	r3, #4
 8003ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d902      	bls.n	8003eb0 <NVIC_EncodePriority+0x30>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3b03      	subs	r3, #3
 8003eae:	e000      	b.n	8003eb2 <NVIC_EncodePriority+0x32>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	4313      	orrs	r3, r2
         );
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff4f 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0c:	f7ff ff64 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff ffb2 	bl	8003e80 <NVIC_EncodePriority>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff81 	bl	8003e2c <__NVIC_SetPriority>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff57 	bl	8003df4 <__NVIC_EnableIRQ>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b08b      	sub	sp, #44	; 0x2c
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f62:	e169      	b.n	8004238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f64:	2201      	movs	r2, #1
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	f040 8158 	bne.w	8004232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4a9a      	ldr	r2, [pc, #616]	; (80041f0 <HAL_GPIO_Init+0x2a0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d05e      	beq.n	800404a <HAL_GPIO_Init+0xfa>
 8003f8c:	4a98      	ldr	r2, [pc, #608]	; (80041f0 <HAL_GPIO_Init+0x2a0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d875      	bhi.n	800407e <HAL_GPIO_Init+0x12e>
 8003f92:	4a98      	ldr	r2, [pc, #608]	; (80041f4 <HAL_GPIO_Init+0x2a4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d058      	beq.n	800404a <HAL_GPIO_Init+0xfa>
 8003f98:	4a96      	ldr	r2, [pc, #600]	; (80041f4 <HAL_GPIO_Init+0x2a4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d86f      	bhi.n	800407e <HAL_GPIO_Init+0x12e>
 8003f9e:	4a96      	ldr	r2, [pc, #600]	; (80041f8 <HAL_GPIO_Init+0x2a8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d052      	beq.n	800404a <HAL_GPIO_Init+0xfa>
 8003fa4:	4a94      	ldr	r2, [pc, #592]	; (80041f8 <HAL_GPIO_Init+0x2a8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d869      	bhi.n	800407e <HAL_GPIO_Init+0x12e>
 8003faa:	4a94      	ldr	r2, [pc, #592]	; (80041fc <HAL_GPIO_Init+0x2ac>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04c      	beq.n	800404a <HAL_GPIO_Init+0xfa>
 8003fb0:	4a92      	ldr	r2, [pc, #584]	; (80041fc <HAL_GPIO_Init+0x2ac>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d863      	bhi.n	800407e <HAL_GPIO_Init+0x12e>
 8003fb6:	4a92      	ldr	r2, [pc, #584]	; (8004200 <HAL_GPIO_Init+0x2b0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d046      	beq.n	800404a <HAL_GPIO_Init+0xfa>
 8003fbc:	4a90      	ldr	r2, [pc, #576]	; (8004200 <HAL_GPIO_Init+0x2b0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d85d      	bhi.n	800407e <HAL_GPIO_Init+0x12e>
 8003fc2:	2b12      	cmp	r3, #18
 8003fc4:	d82a      	bhi.n	800401c <HAL_GPIO_Init+0xcc>
 8003fc6:	2b12      	cmp	r3, #18
 8003fc8:	d859      	bhi.n	800407e <HAL_GPIO_Init+0x12e>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <HAL_GPIO_Init+0x80>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	0800404b 	.word	0x0800404b
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08004037 	.word	0x08004037
 8003fdc:	08004079 	.word	0x08004079
 8003fe0:	0800407f 	.word	0x0800407f
 8003fe4:	0800407f 	.word	0x0800407f
 8003fe8:	0800407f 	.word	0x0800407f
 8003fec:	0800407f 	.word	0x0800407f
 8003ff0:	0800407f 	.word	0x0800407f
 8003ff4:	0800407f 	.word	0x0800407f
 8003ff8:	0800407f 	.word	0x0800407f
 8003ffc:	0800407f 	.word	0x0800407f
 8004000:	0800407f 	.word	0x0800407f
 8004004:	0800407f 	.word	0x0800407f
 8004008:	0800407f 	.word	0x0800407f
 800400c:	0800407f 	.word	0x0800407f
 8004010:	0800407f 	.word	0x0800407f
 8004014:	0800402d 	.word	0x0800402d
 8004018:	08004041 	.word	0x08004041
 800401c:	4a79      	ldr	r2, [pc, #484]	; (8004204 <HAL_GPIO_Init+0x2b4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004022:	e02c      	b.n	800407e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	623b      	str	r3, [r7, #32]
          break;
 800402a:	e029      	b.n	8004080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	3304      	adds	r3, #4
 8004032:	623b      	str	r3, [r7, #32]
          break;
 8004034:	e024      	b.n	8004080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	3308      	adds	r3, #8
 800403c:	623b      	str	r3, [r7, #32]
          break;
 800403e:	e01f      	b.n	8004080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	330c      	adds	r3, #12
 8004046:	623b      	str	r3, [r7, #32]
          break;
 8004048:	e01a      	b.n	8004080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004052:	2304      	movs	r3, #4
 8004054:	623b      	str	r3, [r7, #32]
          break;
 8004056:	e013      	b.n	8004080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004060:	2308      	movs	r3, #8
 8004062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	611a      	str	r2, [r3, #16]
          break;
 800406a:	e009      	b.n	8004080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800406c:	2308      	movs	r3, #8
 800406e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	615a      	str	r2, [r3, #20]
          break;
 8004076:	e003      	b.n	8004080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004078:	2300      	movs	r3, #0
 800407a:	623b      	str	r3, [r7, #32]
          break;
 800407c:	e000      	b.n	8004080 <HAL_GPIO_Init+0x130>
          break;
 800407e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2bff      	cmp	r3, #255	; 0xff
 8004084:	d801      	bhi.n	800408a <HAL_GPIO_Init+0x13a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	e001      	b.n	800408e <HAL_GPIO_Init+0x13e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2bff      	cmp	r3, #255	; 0xff
 8004094:	d802      	bhi.n	800409c <HAL_GPIO_Init+0x14c>
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	e002      	b.n	80040a2 <HAL_GPIO_Init+0x152>
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	3b08      	subs	r3, #8
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	210f      	movs	r1, #15
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	6a39      	ldr	r1, [r7, #32]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80b1 	beq.w	8004232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040d0:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_GPIO_Init+0x2b8>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4a4c      	ldr	r2, [pc, #304]	; (8004208 <HAL_GPIO_Init+0x2b8>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6193      	str	r3, [r2, #24]
 80040dc:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_GPIO_Init+0x2b8>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040e8:	4a48      	ldr	r2, [pc, #288]	; (800420c <HAL_GPIO_Init+0x2bc>)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	220f      	movs	r2, #15
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a40      	ldr	r2, [pc, #256]	; (8004210 <HAL_GPIO_Init+0x2c0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d013      	beq.n	800413c <HAL_GPIO_Init+0x1ec>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3f      	ldr	r2, [pc, #252]	; (8004214 <HAL_GPIO_Init+0x2c4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00d      	beq.n	8004138 <HAL_GPIO_Init+0x1e8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3e      	ldr	r2, [pc, #248]	; (8004218 <HAL_GPIO_Init+0x2c8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d007      	beq.n	8004134 <HAL_GPIO_Init+0x1e4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3d      	ldr	r2, [pc, #244]	; (800421c <HAL_GPIO_Init+0x2cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_GPIO_Init+0x1e0>
 800412c:	2303      	movs	r3, #3
 800412e:	e006      	b.n	800413e <HAL_GPIO_Init+0x1ee>
 8004130:	2304      	movs	r3, #4
 8004132:	e004      	b.n	800413e <HAL_GPIO_Init+0x1ee>
 8004134:	2302      	movs	r3, #2
 8004136:	e002      	b.n	800413e <HAL_GPIO_Init+0x1ee>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_GPIO_Init+0x1ee>
 800413c:	2300      	movs	r3, #0
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	f002 0203 	and.w	r2, r2, #3
 8004144:	0092      	lsls	r2, r2, #2
 8004146:	4093      	lsls	r3, r2
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800414e:	492f      	ldr	r1, [pc, #188]	; (800420c <HAL_GPIO_Init+0x2bc>)
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	3302      	adds	r3, #2
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	492c      	ldr	r1, [pc, #176]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
 8004174:	e006      	b.n	8004184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	43db      	mvns	r3, r3
 800417e:	4928      	ldr	r1, [pc, #160]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 8004180:	4013      	ands	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4922      	ldr	r1, [pc, #136]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
 800419c:	e006      	b.n	80041ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	491e      	ldr	r1, [pc, #120]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4918      	ldr	r1, [pc, #96]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]
 80041c4:	e006      	b.n	80041d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4914      	ldr	r1, [pc, #80]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d021      	beq.n	8004224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_GPIO_Init+0x2d0>)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60cb      	str	r3, [r1, #12]
 80041ec:	e021      	b.n	8004232 <HAL_GPIO_Init+0x2e2>
 80041ee:	bf00      	nop
 80041f0:	10320000 	.word	0x10320000
 80041f4:	10310000 	.word	0x10310000
 80041f8:	10220000 	.word	0x10220000
 80041fc:	10210000 	.word	0x10210000
 8004200:	10120000 	.word	0x10120000
 8004204:	10110000 	.word	0x10110000
 8004208:	40021000 	.word	0x40021000
 800420c:	40010000 	.word	0x40010000
 8004210:	40010800 	.word	0x40010800
 8004214:	40010c00 	.word	0x40010c00
 8004218:	40011000 	.word	0x40011000
 800421c:	40011400 	.word	0x40011400
 8004220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_GPIO_Init+0x304>)
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	43db      	mvns	r3, r3
 800422c:	4909      	ldr	r1, [pc, #36]	; (8004254 <HAL_GPIO_Init+0x304>)
 800422e:	4013      	ands	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	3301      	adds	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	f47f ae8e 	bne.w	8003f64 <HAL_GPIO_Init+0x14>
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	372c      	adds	r7, #44	; 0x2c
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40010400 	.word	0x40010400

08004258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
 8004274:	e001      	b.n	800427a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]
 8004292:	4613      	mov	r3, r2
 8004294:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004296:	787b      	ldrb	r3, [r7, #1]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429c:	887a      	ldrh	r2, [r7, #2]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042a2:	e003      	b.n	80042ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	041a      	lsls	r2, r3, #16
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e12b      	b.n	8004522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fe fbd6 	bl	8002a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800431c:	f001 fba0 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8004320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a81      	ldr	r2, [pc, #516]	; (800452c <HAL_I2C_Init+0x274>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d807      	bhi.n	800433c <HAL_I2C_Init+0x84>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_I2C_Init+0x278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	bf94      	ite	ls
 8004334:	2301      	movls	r3, #1
 8004336:	2300      	movhi	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e006      	b.n	800434a <HAL_I2C_Init+0x92>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a7d      	ldr	r2, [pc, #500]	; (8004534 <HAL_I2C_Init+0x27c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0e7      	b.n	8004522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a78      	ldr	r2, [pc, #480]	; (8004538 <HAL_I2C_Init+0x280>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0c9b      	lsrs	r3, r3, #18
 800435c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_I2C_Init+0x274>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d802      	bhi.n	800438c <HAL_I2C_Init+0xd4>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	e009      	b.n	80043a0 <HAL_I2C_Init+0xe8>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	4a69      	ldr	r2, [pc, #420]	; (800453c <HAL_I2C_Init+0x284>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	3301      	adds	r3, #1
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	495c      	ldr	r1, [pc, #368]	; (800452c <HAL_I2C_Init+0x274>)
 80043bc:	428b      	cmp	r3, r1
 80043be:	d819      	bhi.n	80043f4 <HAL_I2C_Init+0x13c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1e59      	subs	r1, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d4:	400b      	ands	r3, r1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_I2C_Init+0x138>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e59      	subs	r1, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	e051      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e04f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <HAL_I2C_Init+0x168>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e012      	b.n	8004446 <HAL_I2C_Init+0x18e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e58      	subs	r0, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	0099      	lsls	r1, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Init+0x196>
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <HAL_I2C_Init+0x1bc>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e58      	subs	r0, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	fbb0 f3f3 	udiv	r3, r0, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	0099      	lsls	r1, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6809      	ldr	r1, [r1, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6911      	ldr	r1, [r2, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	000186a0 	.word	0x000186a0
 8004530:	001e847f 	.word	0x001e847f
 8004534:	003d08ff 	.word	0x003d08ff
 8004538:	431bde83 	.word	0x431bde83
 800453c:	10624dd3 	.word	0x10624dd3

08004540 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4603      	mov	r3, r0
 8004550:	817b      	strh	r3, [r7, #10]
 8004552:	460b      	mov	r3, r1
 8004554:	813b      	strh	r3, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800455a:	f7fe fc97 	bl	8002e8c <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b20      	cmp	r3, #32
 800456a:	f040 80d9 	bne.w	8004720 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2319      	movs	r3, #25
 8004574:	2201      	movs	r2, #1
 8004576:	496d      	ldr	r1, [pc, #436]	; (800472c <HAL_I2C_Mem_Write+0x1ec>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fcc1 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
 8004586:	e0cc      	b.n	8004722 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_I2C_Mem_Write+0x56>
 8004592:	2302      	movs	r3, #2
 8004594:	e0c5      	b.n	8004722 <HAL_I2C_Mem_Write+0x1e2>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d007      	beq.n	80045bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2221      	movs	r2, #33	; 0x21
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a4d      	ldr	r2, [pc, #308]	; (8004730 <HAL_I2C_Mem_Write+0x1f0>)
 80045fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fe:	88f8      	ldrh	r0, [r7, #6]
 8004600:	893a      	ldrh	r2, [r7, #8]
 8004602:	8979      	ldrh	r1, [r7, #10]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4603      	mov	r3, r0
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 faf8 	bl	8004c04 <I2C_RequestMemoryWrite>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d052      	beq.n	80046c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e081      	b.n	8004722 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fd42 	bl	80050ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b04      	cmp	r3, #4
 8004634:	d107      	bne.n	8004646 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e06b      	b.n	8004722 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d11b      	bne.n	80046c0 <HAL_I2C_Mem_Write+0x180>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d017      	beq.n	80046c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1aa      	bne.n	800461e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fd2e 	bl	800512e <I2C_WaitOnBTFFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d107      	bne.n	80046f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e016      	b.n	8004722 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	00100002 	.word	0x00100002
 8004730:	ffff0000 	.word	0xffff0000

08004734 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	; 0x30
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	4608      	mov	r0, r1
 800473e:	4611      	mov	r1, r2
 8004740:	461a      	mov	r2, r3
 8004742:	4603      	mov	r3, r0
 8004744:	817b      	strh	r3, [r7, #10]
 8004746:	460b      	mov	r3, r1
 8004748:	813b      	strh	r3, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004752:	f7fe fb9b 	bl	8002e8c <HAL_GetTick>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b20      	cmp	r3, #32
 8004762:	f040 8244 	bne.w	8004bee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	2319      	movs	r3, #25
 800476c:	2201      	movs	r2, #1
 800476e:	4982      	ldr	r1, [pc, #520]	; (8004978 <HAL_I2C_Mem_Read+0x244>)
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fbc5 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
 800477e:	e237      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_I2C_Mem_Read+0x5a>
 800478a:	2302      	movs	r3, #2
 800478c:	e230      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d007      	beq.n	80047b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2222      	movs	r2, #34	; 0x22
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2240      	movs	r2, #64	; 0x40
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a62      	ldr	r2, [pc, #392]	; (800497c <HAL_I2C_Mem_Read+0x248>)
 80047f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f6:	88f8      	ldrh	r0, [r7, #6]
 80047f8:	893a      	ldrh	r2, [r7, #8]
 80047fa:	8979      	ldrh	r1, [r7, #10]
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4603      	mov	r3, r0
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fa92 	bl	8004d30 <I2C_RequestMemoryRead>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1ec      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d113      	bne.n	8004846 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e1c0      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	2b01      	cmp	r3, #1
 800484c:	d11e      	bne.n	800488c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800485e:	b672      	cpsid	i
}
 8004860:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004886:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004888:	b662      	cpsie	i
}
 800488a:	e035      	b.n	80048f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	2b02      	cmp	r3, #2
 8004892:	d11e      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048a4:	b672      	cpsid	i
}
 80048a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048ce:	b662      	cpsie	i
}
 80048d0:	e012      	b.n	80048f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048f8:	e166      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	2b03      	cmp	r3, #3
 8004900:	f200 811f 	bhi.w	8004b42 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	2b01      	cmp	r3, #1
 800490a:	d123      	bne.n	8004954 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fc4d 	bl	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e167      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004952:	e139      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b02      	cmp	r3, #2
 800495a:	d152      	bne.n	8004a02 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	2200      	movs	r2, #0
 8004964:	4906      	ldr	r1, [pc, #24]	; (8004980 <HAL_I2C_Mem_Read+0x24c>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 faca 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e13c      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
 8004976:	bf00      	nop
 8004978:	00100002 	.word	0x00100002
 800497c:	ffff0000 	.word	0xffff0000
 8004980:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004984:	b672      	cpsid	i
}
 8004986:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049ca:	b662      	cpsie	i
}
 80049cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a00:	e0e2      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2200      	movs	r2, #0
 8004a0a:	497b      	ldr	r1, [pc, #492]	; (8004bf8 <HAL_I2C_Mem_Read+0x4c4>)
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fa77 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0e9      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a2c:	b672      	cpsid	i
}
 8004a2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a62:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <HAL_I2C_Mem_Read+0x4c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_I2C_Mem_Read+0x4cc>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0a1a      	lsrs	r2, r3, #8
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	00da      	lsls	r2, r3, #3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d118      	bne.n	8004aba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004aaa:	b662      	cpsie	i
}
 8004aac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e09a      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d1d9      	bne.n	8004a7c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b0a:	b662      	cpsie	i
}
 8004b0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b40:	e042      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fb32 	bl	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e04c      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d118      	bne.n	8004bc8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f47f ae94 	bne.w	80048fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	00010004 	.word	0x00010004
 8004bfc:	20000004 	.word	0x20000004
 8004c00:	14f8b589 	.word	0x14f8b589

08004c04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	817b      	strh	r3, [r7, #10]
 8004c16:	460b      	mov	r3, r1
 8004c18:	813b      	strh	r3, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f960 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c54:	d103      	bne.n	8004c5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e05f      	b.n	8004d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	492d      	ldr	r1, [pc, #180]	; (8004d2c <I2C_RequestMemoryWrite+0x128>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f998 	bl	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e04c      	b.n	8004d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	6a39      	ldr	r1, [r7, #32]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fa02 	bl	80050ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d107      	bne.n	8004cc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e02b      	b.n	8004d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd0:	893b      	ldrh	r3, [r7, #8]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	e021      	b.n	8004d20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cdc:	893b      	ldrh	r3, [r7, #8]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	6a39      	ldr	r1, [r7, #32]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f9dc 	bl	80050ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d107      	bne.n	8004d12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e005      	b.n	8004d22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	00010002 	.word	0x00010002

08004d30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	817b      	strh	r3, [r7, #10]
 8004d42:	460b      	mov	r3, r1
 8004d44:	813b      	strh	r3, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f8c2 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00d      	beq.n	8004d9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d90:	d103      	bne.n	8004d9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0aa      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d9e:	897b      	ldrh	r3, [r7, #10]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	6a3a      	ldr	r2, [r7, #32]
 8004db2:	4952      	ldr	r1, [pc, #328]	; (8004efc <I2C_RequestMemoryRead+0x1cc>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f8fa 	bl	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e097      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	6a39      	ldr	r1, [r7, #32]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f964 	bl	80050ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d107      	bne.n	8004e02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e076      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d105      	bne.n	8004e18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0c:	893b      	ldrh	r3, [r7, #8]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	611a      	str	r2, [r3, #16]
 8004e16:	e021      	b.n	8004e5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e18:	893b      	ldrh	r3, [r7, #8]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	6a39      	ldr	r1, [r7, #32]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f93e 	bl	80050ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d107      	bne.n	8004e4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e050      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e52:	893b      	ldrh	r3, [r7, #8]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	6a39      	ldr	r1, [r7, #32]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f923 	bl	80050ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00d      	beq.n	8004e88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d107      	bne.n	8004e84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e035      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f82b 	bl	8004f00 <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	d103      	bne.n	8004ec8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e013      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ecc:	897b      	ldrh	r3, [r7, #10]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	4906      	ldr	r1, [pc, #24]	; (8004efc <I2C_RequestMemoryRead+0x1cc>)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f863 	bl	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	00010002 	.word	0x00010002

08004f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f10:	e025      	b.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d021      	beq.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fd ffb7 	bl	8002e8c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e023      	b.n	8004fa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10d      	bne.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	e00c      	b.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d0b6      	beq.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fbc:	e051      	b.n	8005062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d123      	bne.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e046      	b.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d021      	beq.n	8005062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501e:	f7fd ff35 	bl	8002e8c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d302      	bcc.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d116      	bne.n	8005062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e020      	b.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10c      	bne.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	43da      	mvns	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e00b      	b.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	43da      	mvns	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4013      	ands	r3, r2
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d18d      	bne.n	8004fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b8:	e02d      	b.n	8005116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f8ce 	bl	800525c <I2C_IsAcknowledgeFailed>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e02d      	b.n	8005126 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d021      	beq.n	8005116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fd fedb 	bl	8002e8c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e007      	b.n	8005126 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d1ca      	bne.n	80050ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800513a:	e02d      	b.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f88d 	bl	800525c <I2C_IsAcknowledgeFailed>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e02d      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d021      	beq.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005154:	f7fd fe9a 	bl	8002e8c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d116      	bne.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e007      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d1ca      	bne.n	800513c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051bc:	e042      	b.n	8005244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d119      	bne.n	8005200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0210 	mvn.w	r2, #16
 80051d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e029      	b.n	8005254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fd fe44 	bl	8002e8c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d116      	bne.n	8005244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e007      	b.n	8005254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d1b5      	bne.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005272:	d11b      	bne.n	80052ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800527c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	f043 0204 	orr.w	r2, r3, #4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e272      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8087 	beq.w	80053e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d8:	4b92      	ldr	r3, [pc, #584]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d00c      	beq.n	80052fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052e4:	4b8f      	ldr	r3, [pc, #572]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d112      	bne.n	8005316 <HAL_RCC_OscConfig+0x5e>
 80052f0:	4b8c      	ldr	r3, [pc, #560]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d10b      	bne.n	8005316 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fe:	4b89      	ldr	r3, [pc, #548]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x12c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d168      	bne.n	80053e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e24c      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531e:	d106      	bne.n	800532e <HAL_RCC_OscConfig+0x76>
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7f      	ldr	r2, [pc, #508]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e02e      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0x98>
 8005336:	4b7b      	ldr	r3, [pc, #492]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a7a      	ldr	r2, [pc, #488]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800533c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b78      	ldr	r3, [pc, #480]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a77      	ldr	r2, [pc, #476]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e01d      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0xbc>
 800535a:	4b72      	ldr	r3, [pc, #456]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a71      	ldr	r2, [pc, #452]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b6f      	ldr	r3, [pc, #444]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a6e      	ldr	r2, [pc, #440]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00b      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 8005374:	4b6b      	ldr	r3, [pc, #428]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6a      	ldr	r2, [pc, #424]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b68      	ldr	r3, [pc, #416]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a67      	ldr	r2, [pc, #412]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800538a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fd fd7a 	bl	8002e8c <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800539c:	f7fd fd76 	bl	8002e8c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e200      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0xe4>
 80053ba:	e014      	b.n	80053e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7fd fd66 	bl	8002e8c <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fd fd62 	bl	8002e8c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1ec      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x10c>
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d063      	beq.n	80054ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053f2:	4b4c      	ldr	r3, [pc, #304]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053fe:	4b49      	ldr	r3, [pc, #292]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b08      	cmp	r3, #8
 8005408:	d11c      	bne.n	8005444 <HAL_RCC_OscConfig+0x18c>
 800540a:	4b46      	ldr	r3, [pc, #280]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d116      	bne.n	8005444 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005416:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_OscConfig+0x176>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d001      	beq.n	800542e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e1c0      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542e:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4939      	ldr	r1, [pc, #228]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005442:	e03a      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d020      	beq.n	800548e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fd fd1b 	bl	8002e8c <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545a:	f7fd fd17 	bl	8002e8c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e1a1      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005478:	4b2a      	ldr	r3, [pc, #168]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4927      	ldr	r1, [pc, #156]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	600b      	str	r3, [r1, #0]
 800548c:	e015      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fd fcfa 	bl	8002e8c <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800549c:	f7fd fcf6 	bl	8002e8c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e180      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03a      	beq.n	800553c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d019      	beq.n	8005502 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ce:	4b17      	ldr	r3, [pc, #92]	; (800552c <HAL_RCC_OscConfig+0x274>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d4:	f7fd fcda 	bl	8002e8c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054dc:	f7fd fcd6 	bl	8002e8c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e160      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f000 fb08 	bl	8005b10 <RCC_Delay>
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_OscConfig+0x274>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005508:	f7fd fcc0 	bl	8002e8c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550e:	e00f      	b.n	8005530 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005510:	f7fd fcbc 	bl	8002e8c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d908      	bls.n	8005530 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e146      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
 8005528:	42420000 	.word	0x42420000
 800552c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b92      	ldr	r3, [pc, #584]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e9      	bne.n	8005510 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a6 	beq.w	8005696 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b8b      	ldr	r3, [pc, #556]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4a87      	ldr	r2, [pc, #540]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	61d3      	str	r3, [r2, #28]
 8005566:	4b85      	ldr	r3, [pc, #532]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005576:	4b82      	ldr	r3, [pc, #520]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d118      	bne.n	80055b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005582:	4b7f      	ldr	r3, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7e      	ldr	r2, [pc, #504]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558e:	f7fd fc7d 	bl	8002e8c <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005596:	f7fd fc79 	bl	8002e8c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b64      	cmp	r3, #100	; 0x64
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e103      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b75      	ldr	r3, [pc, #468]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <HAL_RCC_OscConfig+0x312>
 80055bc:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	4a6e      	ldr	r2, [pc, #440]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6213      	str	r3, [r2, #32]
 80055c8:	e02d      	b.n	8005626 <HAL_RCC_OscConfig+0x36e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0x334>
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	6213      	str	r3, [r2, #32]
 80055de:	4b67      	ldr	r3, [pc, #412]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a66      	ldr	r2, [pc, #408]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	6213      	str	r3, [r2, #32]
 80055ea:	e01c      	b.n	8005626 <HAL_RCC_OscConfig+0x36e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d10c      	bne.n	800560e <HAL_RCC_OscConfig+0x356>
 80055f4:	4b61      	ldr	r3, [pc, #388]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	4a60      	ldr	r2, [pc, #384]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055fa:	f043 0304 	orr.w	r3, r3, #4
 80055fe:	6213      	str	r3, [r2, #32]
 8005600:	4b5e      	ldr	r3, [pc, #376]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a5d      	ldr	r2, [pc, #372]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6213      	str	r3, [r2, #32]
 800560c:	e00b      	b.n	8005626 <HAL_RCC_OscConfig+0x36e>
 800560e:	4b5b      	ldr	r3, [pc, #364]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4a5a      	ldr	r2, [pc, #360]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6213      	str	r3, [r2, #32]
 800561a:	4b58      	ldr	r3, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a57      	ldr	r2, [pc, #348]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005620:	f023 0304 	bic.w	r3, r3, #4
 8005624:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fd fc2d 	bl	8002e8c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fd fc29 	bl	8002e8c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0b1      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ee      	beq.n	8005636 <HAL_RCC_OscConfig+0x37e>
 8005658:	e014      	b.n	8005684 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565a:	f7fd fc17 	bl	8002e8c <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	e00a      	b.n	8005678 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fd fc13 	bl	8002e8c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e09b      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005678:	4b40      	ldr	r3, [pc, #256]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1ee      	bne.n	8005662 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4b3c      	ldr	r3, [pc, #240]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4a3b      	ldr	r2, [pc, #236]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005694:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8087 	beq.w	80057ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056a0:	4b36      	ldr	r3, [pc, #216]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d061      	beq.n	8005770 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d146      	bne.n	8005742 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b4:	4b33      	ldr	r3, [pc, #204]	; (8005784 <HAL_RCC_OscConfig+0x4cc>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fd fbe7 	bl	8002e8c <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fd fbe3 	bl	8002e8c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e06d      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d4:	4b29      	ldr	r3, [pc, #164]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e8:	d108      	bne.n	80056fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056ea:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	4921      	ldr	r1, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056fc:	4b1f      	ldr	r3, [pc, #124]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a19      	ldr	r1, [r3, #32]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	430b      	orrs	r3, r1
 800570e:	491b      	ldr	r1, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005714:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_RCC_OscConfig+0x4cc>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571a:	f7fd fbb7 	bl	8002e8c <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005722:	f7fd fbb3 	bl	8002e8c <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e03d      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x46a>
 8005740:	e035      	b.n	80057ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <HAL_RCC_OscConfig+0x4cc>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fd fba0 	bl	8002e8c <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005750:	f7fd fb9c 	bl	8002e8c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e026      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x498>
 800576e:	e01e      	b.n	80057ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e019      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
 800577c:	40021000 	.word	0x40021000
 8005780:	40007000 	.word	0x40007000
 8005784:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_OscConfig+0x500>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000

080057bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0d0      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b6a      	ldr	r3, [pc, #424]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d910      	bls.n	8005800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b67      	ldr	r3, [pc, #412]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 0207 	bic.w	r2, r3, #7
 80057e6:	4965      	ldr	r1, [pc, #404]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b63      	ldr	r3, [pc, #396]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0b8      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a58      	ldr	r2, [pc, #352]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800581e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a52      	ldr	r2, [pc, #328]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800583a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800583c:	4b50      	ldr	r3, [pc, #320]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	494d      	ldr	r1, [pc, #308]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d040      	beq.n	80058dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d115      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	4b41      	ldr	r3, [pc, #260]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e073      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588a:	4b3d      	ldr	r3, [pc, #244]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e06b      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4936      	ldr	r1, [pc, #216]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058ac:	f7fd faee 	bl	8002e8c <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7fd faea 	bl	8002e8c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e053      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 020c 	and.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1eb      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b27      	ldr	r3, [pc, #156]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d210      	bcs.n	800590c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 0207 	bic.w	r2, r3, #7
 80058f2:	4922      	ldr	r1, [pc, #136]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e032      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4916      	ldr	r1, [pc, #88]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	490e      	ldr	r1, [pc, #56]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800594a:	f000 f821 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 800594e:	4602      	mov	r2, r0
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	490a      	ldr	r1, [pc, #40]	; (8005984 <HAL_RCC_ClockConfig+0x1c8>)
 800595c:	5ccb      	ldrb	r3, [r1, r3]
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <HAL_RCC_ClockConfig+0x1cc>)
 8005964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <HAL_RCC_ClockConfig+0x1d0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd f988 	bl	8002c80 <HAL_InitTick>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40022000 	.word	0x40022000
 8005980:	40021000 	.word	0x40021000
 8005984:	08008610 	.word	0x08008610
 8005988:	20000004 	.word	0x20000004
 800598c:	20000008 	.word	0x20000008

08005990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	b490      	push	{r4, r7}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <HAL_RCC_GetSysClockFreq+0xac>)
 8005998:	1d3c      	adds	r4, r7, #4
 800599a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800599c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80059a0:	f240 2301 	movw	r3, #513	; 0x201
 80059a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xb0>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d002      	beq.n	80059d0 <HAL_RCC_GetSysClockFreq+0x40>
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d003      	beq.n	80059d6 <HAL_RCC_GetSysClockFreq+0x46>
 80059ce:	e02b      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059d0:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80059d2:	623b      	str	r3, [r7, #32]
      break;
 80059d4:	e02b      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	0c9b      	lsrs	r3, r3, #18
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	3328      	adds	r3, #40	; 0x28
 80059e0:	443b      	add	r3, r7
 80059e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80059e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d012      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xb0>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	0c5b      	lsrs	r3, r3, #17
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	3328      	adds	r3, #40	; 0x28
 80059fe:	443b      	add	r3, r7
 8005a00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a0a:	fb03 f202 	mul.w	r2, r3, r2
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
 8005a16:	e004      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	623b      	str	r3, [r7, #32]
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a2a:	623b      	str	r3, [r7, #32]
      break;
 8005a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3728      	adds	r7, #40	; 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc90      	pop	{r4, r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	080085f8 	.word	0x080085f8
 8005a40:	40021000 	.word	0x40021000
 8005a44:	007a1200 	.word	0x007a1200
 8005a48:	003d0900 	.word	0x003d0900

08005a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	20000004 	.word	0x20000004

08005a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a64:	f7ff fff2 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40021000 	.word	0x40021000
 8005a84:	08008620 	.word	0x08008620

08005a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a8c:	f7ff ffde 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	0adb      	lsrs	r3, r3, #11
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	08008620 	.word	0x08008620

08005ab0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	220f      	movs	r2, #15
 8005abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ac0:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <HAL_RCC_GetClockConfig+0x58>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0203 	and.w	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <HAL_RCC_GetClockConfig+0x58>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_GetClockConfig+0x58>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <HAL_RCC_GetClockConfig+0x58>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0207 	and.w	r2, r3, #7
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40022000 	.word	0x40022000

08005b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <RCC_Delay+0x34>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <RCC_Delay+0x38>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	0a5b      	lsrs	r3, r3, #9
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b2c:	bf00      	nop
  }
  while (Delay --);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1e5a      	subs	r2, r3, #1
 8005b32:	60fa      	str	r2, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f9      	bne.n	8005b2c <RCC_Delay+0x1c>
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	20000004 	.word	0x20000004
 8005b48:	10624dd3 	.word	0x10624dd3

08005b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d07d      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6c:	4b4f      	ldr	r3, [pc, #316]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10d      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b78:	4b4c      	ldr	r3, [pc, #304]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	4a4b      	ldr	r2, [pc, #300]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b82:	61d3      	str	r3, [r2, #28]
 8005b84:	4b49      	ldr	r3, [pc, #292]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d118      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a42      	ldr	r2, [pc, #264]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bac:	f7fd f96e 	bl	8002e8c <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb4:	f7fd f96a 	bl	8002e8c <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e06d      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc6:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd2:	4b36      	ldr	r3, [pc, #216]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02e      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d027      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf0:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bfa:	4b2e      	ldr	r3, [pc, #184]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c00:	4b2c      	ldr	r3, [pc, #176]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c06:	4a29      	ldr	r2, [pc, #164]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fd f939 	bl	8002e8c <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1e:	f7fd f935 	bl	8002e8c <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e036      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ee      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4917      	ldr	r1, [pc, #92]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c58:	4b14      	ldr	r3, [pc, #80]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	490b      	ldr	r1, [pc, #44]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c8e:	4b07      	ldr	r3, [pc, #28]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4904      	ldr	r1, [pc, #16]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40007000 	.word	0x40007000
 8005cb4:	42420440 	.word	0x42420440

08005cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fc ff14 	bl	8002b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 fc9e 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e03a      	b.n	8005de6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <HAL_TIM_Base_Start_IT+0x98>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_TIM_Base_Start_IT+0x58>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9a:	d009      	beq.n	8005db0 <HAL_TIM_Base_Start_IT+0x58>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_TIM_Base_Start_IT+0x58>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d111      	bne.n	8005dd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d010      	beq.n	8005de4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd2:	e007      	b.n	8005de4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800

08005dfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e041      	b.n	8005e92 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f839 	bl	8005e9a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f000 fbfc 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_IC_Start_IT+0x1a>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e013      	b.n	8005eee <HAL_TIM_IC_Start_IT+0x42>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_IC_Start_IT+0x2a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	e00b      	b.n	8005eee <HAL_TIM_IC_Start_IT+0x42>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_IC_Start_IT+0x3a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	e003      	b.n	8005eee <HAL_TIM_IC_Start_IT+0x42>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_TIM_IC_Start_IT+0x54>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e013      	b.n	8005f28 <HAL_TIM_IC_Start_IT+0x7c>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d104      	bne.n	8005f10 <HAL_TIM_IC_Start_IT+0x64>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e00b      	b.n	8005f28 <HAL_TIM_IC_Start_IT+0x7c>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d104      	bne.n	8005f20 <HAL_TIM_IC_Start_IT+0x74>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e003      	b.n	8005f28 <HAL_TIM_IC_Start_IT+0x7c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d102      	bne.n	8005f36 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0b3      	b.n	80060a2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_IC_Start_IT+0x9e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f48:	e013      	b.n	8005f72 <HAL_TIM_IC_Start_IT+0xc6>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_IC_Start_IT+0xae>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f58:	e00b      	b.n	8005f72 <HAL_TIM_IC_Start_IT+0xc6>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_IC_Start_IT+0xbe>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f68:	e003      	b.n	8005f72 <HAL_TIM_IC_Start_IT+0xc6>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <HAL_TIM_IC_Start_IT+0xd6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f80:	e013      	b.n	8005faa <HAL_TIM_IC_Start_IT+0xfe>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d104      	bne.n	8005f92 <HAL_TIM_IC_Start_IT+0xe6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f90:	e00b      	b.n	8005faa <HAL_TIM_IC_Start_IT+0xfe>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_IC_Start_IT+0xf6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa0:	e003      	b.n	8005faa <HAL_TIM_IC_Start_IT+0xfe>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d841      	bhi.n	8006034 <HAL_TIM_IC_Start_IT+0x188>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_TIM_IC_Start_IT+0x10c>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08006035 	.word	0x08006035
 8005fc0:	08006035 	.word	0x08006035
 8005fc4:	08006035 	.word	0x08006035
 8005fc8:	08005fff 	.word	0x08005fff
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08006035 	.word	0x08006035
 8005fd4:	08006035 	.word	0x08006035
 8005fd8:	08006011 	.word	0x08006011
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006023 	.word	0x08006023
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0202 	orr.w	r2, r2, #2
 8005ffa:	60da      	str	r2, [r3, #12]
      break;
 8005ffc:	e01b      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0204 	orr.w	r2, r2, #4
 800600c:	60da      	str	r2, [r3, #12]
      break;
 800600e:	e012      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0208 	orr.w	r2, r2, #8
 800601e:	60da      	str	r2, [r3, #12]
      break;
 8006020:	e009      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0210 	orr.w	r2, r2, #16
 8006030:	60da      	str	r2, [r3, #12]
      break;
 8006032:	e000      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006034:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2201      	movs	r2, #1
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fcff 	bl	8006a42 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a18      	ldr	r2, [pc, #96]	; (80060ac <HAL_TIM_IC_Start_IT+0x200>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIM_IC_Start_IT+0x1c0>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d009      	beq.n	800606c <HAL_TIM_IC_Start_IT+0x1c0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <HAL_TIM_IC_Start_IT+0x204>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIM_IC_Start_IT+0x1c0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <HAL_TIM_IC_Start_IT+0x208>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d111      	bne.n	8006090 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b06      	cmp	r3, #6
 800607c:	d010      	beq.n	80060a0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608e:	e007      	b.n	80060a0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800

080060b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d122      	bne.n	8006114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d11b      	bne.n	8006114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb f818 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa7c 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa82 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d122      	bne.n	8006168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0204 	mvn.w	r2, #4
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fa ffee 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa52 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa58 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b08      	cmp	r3, #8
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0208 	mvn.w	r2, #8
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa ffc4 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa28 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa2e 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0210 	mvn.w	r2, #16
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2208      	movs	r2, #8
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fa ff9a 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f9fe 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fa04 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10e      	bne.n	800623c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0201 	mvn.w	r2, #1
 8006234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fc fadc 	bl	80027f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	2b80      	cmp	r3, #128	; 0x80
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fc79 	bl	8006b5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9c8 	bl	8006624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d10e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0220 	mvn.w	r2, #32
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fc44 	bl	8006b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80062de:	2302      	movs	r3, #2
 80062e0:	e082      	b.n	80063e8 <HAL_TIM_IC_ConfigChannel+0x120>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11b      	bne.n	8006328 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6819      	ldr	r1, [r3, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f000 f9fc 	bl	80066fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 020c 	bic.w	r2, r2, #12
 8006312:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6999      	ldr	r1, [r3, #24]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	619a      	str	r2, [r3, #24]
 8006326:	e05a      	b.n	80063de <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d11c      	bne.n	8006368 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f000 fa65 	bl	800680c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006350:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	021a      	lsls	r2, r3, #8
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	619a      	str	r2, [r3, #24]
 8006366:	e03a      	b.n	80063de <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b08      	cmp	r3, #8
 800636c:	d11b      	bne.n	80063a6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6819      	ldr	r1, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f000 fab0 	bl	80068e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 020c 	bic.w	r2, r2, #12
 8006390:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69d9      	ldr	r1, [r3, #28]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	61da      	str	r2, [r3, #28]
 80063a4:	e01b      	b.n	80063de <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6819      	ldr	r1, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f000 facf 	bl	8006958 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	021a      	lsls	r2, r3, #8
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIM_ConfigClockSource+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e0b3      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x180>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006440:	d03e      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0xd0>
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006446:	f200 8087 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x168>
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644e:	f000 8085 	beq.w	800655c <HAL_TIM_ConfigClockSource+0x16c>
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d87f      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006458:	2b70      	cmp	r3, #112	; 0x70
 800645a:	d01a      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0xa2>
 800645c:	2b70      	cmp	r3, #112	; 0x70
 800645e:	d87b      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006460:	2b60      	cmp	r3, #96	; 0x60
 8006462:	d050      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x116>
 8006464:	2b60      	cmp	r3, #96	; 0x60
 8006466:	d877      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006468:	2b50      	cmp	r3, #80	; 0x50
 800646a:	d03c      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0xf6>
 800646c:	2b50      	cmp	r3, #80	; 0x50
 800646e:	d873      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d058      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x136>
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d86f      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	d064      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d86b      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d060      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d867      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d05c      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
 800648c:	2b10      	cmp	r3, #16
 800648e:	d05a      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006490:	e062      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6899      	ldr	r1, [r3, #8]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f000 faaf 	bl	8006a04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	609a      	str	r2, [r3, #8]
      break;
 80064be:	e04e      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6899      	ldr	r1, [r3, #8]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f000 fa98 	bl	8006a04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e2:	609a      	str	r2, [r3, #8]
      break;
 80064e4:	e03b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f000 f95c 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2150      	movs	r1, #80	; 0x50
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fa66 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 8006504:	e02b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6859      	ldr	r1, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	461a      	mov	r2, r3
 8006514:	f000 f9b6 	bl	8006884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2160      	movs	r1, #96	; 0x60
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fa56 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 8006524:	e01b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	461a      	mov	r2, r3
 8006534:	f000 f93c 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fa46 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 8006544:	e00b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f000 fa3d 	bl	80069d0 <TIM_ITRx_SetConfig>
        break;
 8006556:	e002      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800655c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b0c      	cmp	r3, #12
 800658a:	d831      	bhi.n	80065f0 <HAL_TIM_ReadCapturedValue+0x78>
 800658c:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <HAL_TIM_ReadCapturedValue+0x1c>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065f1 	.word	0x080065f1
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	080065d3 	.word	0x080065d3
 80065a8:	080065f1 	.word	0x080065f1
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065f1 	.word	0x080065f1
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	080065e7 	.word	0x080065e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	60fb      	str	r3, [r7, #12]

      break;
 80065d0:	e00f      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	60fb      	str	r3, [r7, #12]

      break;
 80065da:	e00a      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	60fb      	str	r3, [r7, #12]

      break;
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	60fb      	str	r3, [r7, #12]

      break;
 80065ee:	e000      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065f0:	bf00      	nop
  }

  return tmpreg;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr
	...

08006638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <TIM_Base_SetConfig+0xb8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00b      	beq.n	8006668 <TIM_Base_SetConfig+0x30>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006656:	d007      	beq.n	8006668 <TIM_Base_SetConfig+0x30>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <TIM_Base_SetConfig+0xbc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0x30>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <TIM_Base_SetConfig+0xc0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <TIM_Base_SetConfig+0xb8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <TIM_Base_SetConfig+0x62>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006688:	d007      	beq.n	800669a <TIM_Base_SetConfig+0x62>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <TIM_Base_SetConfig+0xbc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_Base_SetConfig+0x62>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <TIM_Base_SetConfig+0xc0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d108      	bne.n	80066ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a07      	ldr	r2, [pc, #28]	; (80066f0 <TIM_Base_SetConfig+0xb8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d103      	bne.n	80066e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	615a      	str	r2, [r3, #20]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800

080066fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <TIM_TI1_SetConfig+0xa8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00b      	beq.n	8006742 <TIM_TI1_SetConfig+0x46>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d007      	beq.n	8006742 <TIM_TI1_SetConfig+0x46>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <TIM_TI1_SetConfig+0xac>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_TI1_SetConfig+0x46>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <TIM_TI1_SetConfig+0xb0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d101      	bne.n	8006746 <TIM_TI1_SetConfig+0x4a>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <TIM_TI1_SetConfig+0x4c>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e003      	b.n	8006766 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	b2db      	uxtb	r3, r3
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f023 030a 	bic.w	r3, r3, #10
 8006780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f003 030a 	and.w	r3, r3, #10
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800

080067b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 030a 	bic.w	r3, r3, #10
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800684a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	031b      	lsls	r3, r3, #12
 8006850:	b29b      	uxth	r3, r3
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800685e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f023 0210 	bic.w	r2, r3, #16
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	031b      	lsls	r3, r3, #12
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	621a      	str	r2, [r3, #32]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b087      	sub	sp, #28
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800691e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	b2db      	uxtb	r3, r3
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006932:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006996:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	031b      	lsls	r3, r3, #12
 800699c:	b29b      	uxth	r3, r3
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	031b      	lsls	r3, r3, #12
 80069b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f043 0307 	orr.w	r3, r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	609a      	str	r2, [r3, #8]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr

08006a42 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	2201      	movs	r2, #1
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	401a      	ands	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1a      	ldr	r2, [r3, #32]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr
	...

08006a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e046      	b.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00e      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d009      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a12      	ldr	r2, [pc, #72]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d004      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d10c      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800

08006b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e03f      	b.n	8006bfe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fc f828 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2224      	movs	r2, #36	; 0x24
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f915 	bl	8006de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695a      	ldr	r2, [r3, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b08a      	sub	sp, #40	; 0x28
 8006c0a:	af02      	add	r7, sp, #8
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	f040 808c 	bne.w	8006d40 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_UART_Receive+0x2e>
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e084      	b.n	8006d42 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Receive+0x40>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e07d      	b.n	8006d42 <HAL_UART_Receive+0x13c>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2222      	movs	r2, #34	; 0x22
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c62:	f7fc f913 	bl	8002e8c <HAL_GetTick>
 8006c66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	88fa      	ldrh	r2, [r7, #6]
 8006c72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7c:	d108      	bne.n	8006c90 <HAL_UART_Receive+0x8a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e003      	b.n	8006c98 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006ca0:	e043      	b.n	8006d2a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2120      	movs	r1, #32
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f84c 	bl	8006d4a <UART_WaitOnFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e042      	b.n	8006d42 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10c      	bne.n	8006cdc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	e01f      	b.n	8006d1c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce4:	d007      	beq.n	8006cf6 <HAL_UART_Receive+0xf0>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <HAL_UART_Receive+0xfe>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e008      	b.n	8006d16 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1b6      	bne.n	8006ca2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	4613      	mov	r3, r2
 8006d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5a:	e02c      	b.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d62:	d028      	beq.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8006d6a:	f7fc f88f 	bl	8002e8c <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d21d      	bcs.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695a      	ldr	r2, [r3, #20]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0201 	bic.w	r2, r2, #1
 8006d98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e00f      	b.n	8006dd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d0c3      	beq.n	8006d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006e1a:	f023 030c 	bic.w	r3, r3, #12
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	430b      	orrs	r3, r1
 8006e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699a      	ldr	r2, [r3, #24]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a2c      	ldr	r2, [pc, #176]	; (8006ef4 <UART_SetConfig+0x114>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d103      	bne.n	8006e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e48:	f7fe fe1e 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	e002      	b.n	8006e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e50:	f7fe fe06 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8006e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009a      	lsls	r2, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	4a22      	ldr	r2, [pc, #136]	; (8006ef8 <UART_SetConfig+0x118>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	0119      	lsls	r1, r3, #4
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009a      	lsls	r2, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <UART_SetConfig+0x118>)
 8006e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2064      	movs	r0, #100	; 0x64
 8006e96:	fb00 f303 	mul.w	r3, r0, r3
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	3332      	adds	r3, #50	; 0x32
 8006ea0:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <UART_SetConfig+0x118>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eac:	4419      	add	r1, r3
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009a      	lsls	r2, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <UART_SetConfig+0x118>)
 8006ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	2064      	movs	r0, #100	; 0x64
 8006ece:	fb00 f303 	mul.w	r3, r0, r3
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	3332      	adds	r3, #50	; 0x32
 8006ed8:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <UART_SetConfig+0x118>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	440a      	add	r2, r1
 8006eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40013800 	.word	0x40013800
 8006ef8:	51eb851f 	.word	0x51eb851f

08006efc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f0e:	2b84      	cmp	r3, #132	; 0x84
 8006f10:	d005      	beq.n	8006f1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3303      	adds	r3, #3
 8006f1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f2e:	f000 fae7 	bl	8007500 <vTaskStartScheduler>
  
  return osOK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af04      	add	r7, sp, #16
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <osThreadCreate+0x54>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01c      	beq.n	8006f8c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685c      	ldr	r4, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681d      	ldr	r5, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691e      	ldr	r6, [r3, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ffc9 	bl	8006efc <makeFreeRtosPriority>
 8006f6a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f74:	9202      	str	r2, [sp, #8]
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	9100      	str	r1, [sp, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 f8e8 	bl	8007156 <xTaskCreateStatic>
 8006f86:	4603      	mov	r3, r0
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	e01c      	b.n	8006fc6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685c      	ldr	r4, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f98:	b29e      	uxth	r6, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff ffab 	bl	8006efc <makeFreeRtosPriority>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	f107 030c 	add.w	r3, r7, #12
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	9200      	str	r2, [sp, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	4632      	mov	r2, r6
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 f929 	bl	800720e <xTaskCreate>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d001      	beq.n	8006fc6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <osDelay+0x16>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	e000      	b.n	8006fe8 <osDelay+0x18>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa55 	bl	8007498 <vTaskDelay>
  
  return osOK;
 8006fee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f103 0208 	add.w	r2, r3, #8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f103 0208 	add.w	r2, r3, #8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f103 0208 	add.w	r2, r3, #8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d103      	bne.n	80070b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e00c      	b.n	80070ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3308      	adds	r3, #8
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e002      	b.n	80070c2 <vListInsert+0x2e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d2f6      	bcs.n	80070bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr

08007104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6892      	ldr	r2, [r2, #8]
 800711a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6852      	ldr	r2, [r2, #4]
 8007124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	d103      	bne.n	8007138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	1e5a      	subs	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007156:	b580      	push	{r7, lr}
 8007158:	b08e      	sub	sp, #56	; 0x38
 800715a:	af04      	add	r7, sp, #16
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <xTaskCreateStatic+0x46>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	61fb      	str	r3, [r7, #28]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800719c:	23b4      	movs	r3, #180	; 0xb4
 800719e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2bb4      	cmp	r3, #180	; 0xb4
 80071a4:	d00a      	beq.n	80071bc <xTaskCreateStatic+0x66>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	61bb      	str	r3, [r7, #24]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01e      	beq.n	8007200 <xTaskCreateStatic+0xaa>
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071da:	2300      	movs	r3, #0
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	9302      	str	r3, [sp, #8]
 80071e2:	f107 0314 	add.w	r3, r7, #20
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f850 	bl	8007298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fa:	f000 f8e3 	bl	80073c4 <prvAddNewTaskToReadyList>
 80071fe:	e001      	b.n	8007204 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007204:	697b      	ldr	r3, [r7, #20]
	}
 8007206:	4618      	mov	r0, r3
 8007208:	3728      	adds	r7, #40	; 0x28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	; 0x30
 8007212:	af04      	add	r7, sp, #16
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fe94 	bl	8007f50 <pvPortMalloc>
 8007228:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007230:	20b4      	movs	r0, #180	; 0xb4
 8007232:	f000 fe8d 	bl	8007f50 <pvPortMalloc>
 8007236:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	631a      	str	r2, [r3, #48]	; 0x30
 8007244:	e005      	b.n	8007252 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007246:	6978      	ldr	r0, [r7, #20]
 8007248:	f000 ff46 	bl	80080d8 <vPortFree>
 800724c:	e001      	b.n	8007252 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d017      	beq.n	8007288 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f80e 	bl	8007298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727c:	69f8      	ldr	r0, [r7, #28]
 800727e:	f000 f8a1 	bl	80073c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007282:	2301      	movs	r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	e002      	b.n	800728e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007288:	f04f 33ff 	mov.w	r3, #4294967295
 800728c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800728e:	69bb      	ldr	r3, [r7, #24]
	}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072b0:	3b01      	subs	r3, #1
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	617b      	str	r3, [r7, #20]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	e012      	b.n	800730c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	7819      	ldrb	r1, [r3, #0]
 80072ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	3334      	adds	r3, #52	; 0x34
 80072f6:	460a      	mov	r2, r1
 80072f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d006      	beq.n	8007314 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	3301      	adds	r3, #1
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d9e9      	bls.n	80072e6 <prvInitialiseNewTask+0x4e>
 8007312:	e000      	b.n	8007316 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007314:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	2b06      	cmp	r3, #6
 8007322:	d901      	bls.n	8007328 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007324:	2306      	movs	r3, #6
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007332:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	2200      	movs	r2, #0
 8007338:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	3304      	adds	r3, #4
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fe79 	bl	8007036 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	3318      	adds	r3, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fe74 	bl	8007036 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f1c3 0207 	rsb	r2, r3, #7
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	2200      	movs	r2, #0
 8007370:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	334c      	adds	r3, #76	; 0x4c
 8007378:	2260      	movs	r2, #96	; 0x60
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fff3 	bl	8008368 <memset>
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <prvInitialiseNewTask+0x120>)
 8007386:	651a      	str	r2, [r3, #80]	; 0x50
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <prvInitialiseNewTask+0x124>)
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	4a0b      	ldr	r2, [pc, #44]	; (80073c0 <prvInitialiseNewTask+0x128>)
 8007392:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	69b8      	ldr	r0, [r7, #24]
 800739a:	f000 fc29 	bl	8007bf0 <pxPortInitialiseStack>
 800739e:	4602      	mov	r2, r0
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b0:	bf00      	nop
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	08008648 	.word	0x08008648
 80073bc:	08008668 	.word	0x08008668
 80073c0:	08008628 	.word	0x08008628

080073c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073cc:	f000 fcfe 	bl	8007dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073d0:	4b2a      	ldr	r3, [pc, #168]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a29      	ldr	r2, [pc, #164]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073e2:	4a27      	ldr	r2, [pc, #156]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e8:	4b24      	ldr	r3, [pc, #144]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d110      	bne.n	8007412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073f0:	f000 fad2 	bl	8007998 <prvInitialiseTaskLists>
 80073f4:	e00d      	b.n	8007412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <prvAddNewTaskToReadyList+0xc0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073fe:	4b20      	ldr	r3, [pc, #128]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	429a      	cmp	r2, r3
 800740a:	d802      	bhi.n	8007412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <prvAddNewTaskToReadyList+0xc4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	2201      	movs	r2, #1
 8007422:	409a      	lsls	r2, r3
 8007424:	4b19      	ldr	r3, [pc, #100]	; (800748c <prvAddNewTaskToReadyList+0xc8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4313      	orrs	r3, r2
 800742a:	4a18      	ldr	r2, [pc, #96]	; (800748c <prvAddNewTaskToReadyList+0xc8>)
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a15      	ldr	r2, [pc, #84]	; (8007490 <prvAddNewTaskToReadyList+0xcc>)
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3304      	adds	r3, #4
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7ff fe02 	bl	800704e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800744a:	f000 fcef 	bl	8007e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <prvAddNewTaskToReadyList+0xc0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	429a      	cmp	r2, r3
 8007462:	d207      	bcs.n	8007474 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <prvAddNewTaskToReadyList+0xd0>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000748 	.word	0x20000748
 8007480:	20000648 	.word	0x20000648
 8007484:	20000754 	.word	0x20000754
 8007488:	20000764 	.word	0x20000764
 800748c:	20000750 	.word	0x20000750
 8007490:	2000064c 	.word	0x2000064c
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d017      	beq.n	80074da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <vTaskDelay+0x60>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <vTaskDelay+0x30>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074c8:	f000 f884 	bl	80075d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074cc:	2100      	movs	r1, #0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fb28 	bl	8007b24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074d4:	f000 f88c 	bl	80075f0 <xTaskResumeAll>
 80074d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d107      	bne.n	80074f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <vTaskDelay+0x64>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000770 	.word	0x20000770
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800750e:	463a      	mov	r2, r7
 8007510:	1d39      	adds	r1, r7, #4
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	4618      	mov	r0, r3
 8007518:	f7fa f888 	bl	800162c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	9202      	str	r2, [sp, #8]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	2300      	movs	r3, #0
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	460a      	mov	r2, r1
 800752e:	4921      	ldr	r1, [pc, #132]	; (80075b4 <vTaskStartScheduler+0xb4>)
 8007530:	4821      	ldr	r0, [pc, #132]	; (80075b8 <vTaskStartScheduler+0xb8>)
 8007532:	f7ff fe10 	bl	8007156 <xTaskCreateStatic>
 8007536:	4603      	mov	r3, r0
 8007538:	4a20      	ldr	r2, [pc, #128]	; (80075bc <vTaskStartScheduler+0xbc>)
 800753a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800753c:	4b1f      	ldr	r3, [pc, #124]	; (80075bc <vTaskStartScheduler+0xbc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e001      	b.n	800754e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d11b      	bne.n	800758c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	613b      	str	r3, [r7, #16]
}
 8007566:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007568:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <vTaskStartScheduler+0xc0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	334c      	adds	r3, #76	; 0x4c
 800756e:	4a15      	ldr	r2, [pc, #84]	; (80075c4 <vTaskStartScheduler+0xc4>)
 8007570:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <vTaskStartScheduler+0xc8>)
 8007574:	f04f 32ff 	mov.w	r2, #4294967295
 8007578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <vTaskStartScheduler+0xcc>)
 800757c:	2201      	movs	r2, #1
 800757e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <vTaskStartScheduler+0xd0>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007586:	f000 fbaf 	bl	8007ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800758a:	e00e      	b.n	80075aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d10a      	bne.n	80075aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60fb      	str	r3, [r7, #12]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <vTaskStartScheduler+0xa8>
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	08008608 	.word	0x08008608
 80075b8:	08007969 	.word	0x08007969
 80075bc:	2000076c 	.word	0x2000076c
 80075c0:	20000648 	.word	0x20000648
 80075c4:	20000014 	.word	0x20000014
 80075c8:	20000768 	.word	0x20000768
 80075cc:	20000754 	.word	0x20000754
 80075d0:	2000074c 	.word	0x2000074c

080075d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <vTaskSuspendAll+0x18>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	4a03      	ldr	r2, [pc, #12]	; (80075ec <vTaskSuspendAll+0x18>)
 80075e0:	6013      	str	r3, [r2, #0]
}
 80075e2:	bf00      	nop
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bc80      	pop	{r7}
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	20000770 	.word	0x20000770

080075f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075fe:	4b41      	ldr	r3, [pc, #260]	; (8007704 <xTaskResumeAll+0x114>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <xTaskResumeAll+0x2c>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	603b      	str	r3, [r7, #0]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800761c:	f000 fbd6 	bl	8007dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007620:	4b38      	ldr	r3, [pc, #224]	; (8007704 <xTaskResumeAll+0x114>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3b01      	subs	r3, #1
 8007626:	4a37      	ldr	r2, [pc, #220]	; (8007704 <xTaskResumeAll+0x114>)
 8007628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762a:	4b36      	ldr	r3, [pc, #216]	; (8007704 <xTaskResumeAll+0x114>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d161      	bne.n	80076f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007632:	4b35      	ldr	r3, [pc, #212]	; (8007708 <xTaskResumeAll+0x118>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d05d      	beq.n	80076f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800763a:	e02e      	b.n	800769a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800763c:	4b33      	ldr	r3, [pc, #204]	; (800770c <xTaskResumeAll+0x11c>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3318      	adds	r3, #24
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff fd5b 	bl	8007104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fd56 	bl	8007104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	4b2b      	ldr	r3, [pc, #172]	; (8007710 <xTaskResumeAll+0x120>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4313      	orrs	r3, r2
 8007666:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <xTaskResumeAll+0x120>)
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4a27      	ldr	r2, [pc, #156]	; (8007714 <xTaskResumeAll+0x124>)
 8007678:	441a      	add	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3304      	adds	r3, #4
 800767e:	4619      	mov	r1, r3
 8007680:	4610      	mov	r0, r2
 8007682:	f7ff fce4 	bl	800704e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <xTaskResumeAll+0x128>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	429a      	cmp	r2, r3
 8007692:	d302      	bcc.n	800769a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007694:	4b21      	ldr	r3, [pc, #132]	; (800771c <xTaskResumeAll+0x12c>)
 8007696:	2201      	movs	r2, #1
 8007698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800769a:	4b1c      	ldr	r3, [pc, #112]	; (800770c <xTaskResumeAll+0x11c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1cc      	bne.n	800763c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076a8:	f000 fa18 	bl	8007adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076ac:	4b1c      	ldr	r3, [pc, #112]	; (8007720 <xTaskResumeAll+0x130>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076b8:	f000 f836 	bl	8007728 <xTaskIncrementTick>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <xTaskResumeAll+0x12c>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f1      	bne.n	80076b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80076d4:	4b12      	ldr	r3, [pc, #72]	; (8007720 <xTaskResumeAll+0x130>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <xTaskResumeAll+0x12c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <xTaskResumeAll+0x134>)
 80076e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f6:	f000 fb99 	bl	8007e2c <vPortExitCritical>

	return xAlreadyYielded;
 80076fa:	68bb      	ldr	r3, [r7, #8]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000770 	.word	0x20000770
 8007708:	20000748 	.word	0x20000748
 800770c:	20000708 	.word	0x20000708
 8007710:	20000750 	.word	0x20000750
 8007714:	2000064c 	.word	0x2000064c
 8007718:	20000648 	.word	0x20000648
 800771c:	2000075c 	.word	0x2000075c
 8007720:	20000758 	.word	0x20000758
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007732:	4b51      	ldr	r3, [pc, #324]	; (8007878 <xTaskIncrementTick+0x150>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 808d 	bne.w	8007856 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800773c:	4b4f      	ldr	r3, [pc, #316]	; (800787c <xTaskIncrementTick+0x154>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007744:	4a4d      	ldr	r2, [pc, #308]	; (800787c <xTaskIncrementTick+0x154>)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d120      	bne.n	8007792 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007750:	4b4b      	ldr	r3, [pc, #300]	; (8007880 <xTaskIncrementTick+0x158>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <xTaskIncrementTick+0x48>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	603b      	str	r3, [r7, #0]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <xTaskIncrementTick+0x46>
 8007770:	4b43      	ldr	r3, [pc, #268]	; (8007880 <xTaskIncrementTick+0x158>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	4b43      	ldr	r3, [pc, #268]	; (8007884 <xTaskIncrementTick+0x15c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a41      	ldr	r2, [pc, #260]	; (8007880 <xTaskIncrementTick+0x158>)
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4a41      	ldr	r2, [pc, #260]	; (8007884 <xTaskIncrementTick+0x15c>)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	4b40      	ldr	r3, [pc, #256]	; (8007888 <xTaskIncrementTick+0x160>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	4a3f      	ldr	r2, [pc, #252]	; (8007888 <xTaskIncrementTick+0x160>)
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	f000 f9a5 	bl	8007adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007792:	4b3e      	ldr	r3, [pc, #248]	; (800788c <xTaskIncrementTick+0x164>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	429a      	cmp	r2, r3
 800779a:	d34d      	bcc.n	8007838 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800779c:	4b38      	ldr	r3, [pc, #224]	; (8007880 <xTaskIncrementTick+0x158>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <xTaskIncrementTick+0x82>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <xTaskIncrementTick+0x84>
 80077aa:	2300      	movs	r3, #0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b0:	4b36      	ldr	r3, [pc, #216]	; (800788c <xTaskIncrementTick+0x164>)
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	601a      	str	r2, [r3, #0]
					break;
 80077b8:	e03e      	b.n	8007838 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077ba:	4b31      	ldr	r3, [pc, #196]	; (8007880 <xTaskIncrementTick+0x158>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d203      	bcs.n	80077da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077d2:	4a2e      	ldr	r2, [pc, #184]	; (800788c <xTaskIncrementTick+0x164>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6013      	str	r3, [r2, #0]
						break;
 80077d8:	e02e      	b.n	8007838 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff fc90 	bl	8007104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	3318      	adds	r3, #24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fc87 	bl	8007104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	2201      	movs	r2, #1
 80077fc:	409a      	lsls	r2, r3
 80077fe:	4b24      	ldr	r3, [pc, #144]	; (8007890 <xTaskIncrementTick+0x168>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4313      	orrs	r3, r2
 8007804:	4a22      	ldr	r2, [pc, #136]	; (8007890 <xTaskIncrementTick+0x168>)
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <xTaskIncrementTick+0x16c>)
 8007816:	441a      	add	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7ff fc15 	bl	800704e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <xTaskIncrementTick+0x170>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	429a      	cmp	r2, r3
 8007830:	d3b4      	bcc.n	800779c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007836:	e7b1      	b.n	800779c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007838:	4b17      	ldr	r3, [pc, #92]	; (8007898 <xTaskIncrementTick+0x170>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783e:	4915      	ldr	r1, [pc, #84]	; (8007894 <xTaskIncrementTick+0x16c>)
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d907      	bls.n	8007860 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007850:	2301      	movs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e004      	b.n	8007860 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007856:	4b11      	ldr	r3, [pc, #68]	; (800789c <xTaskIncrementTick+0x174>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	4a0f      	ldr	r2, [pc, #60]	; (800789c <xTaskIncrementTick+0x174>)
 800785e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <xTaskIncrementTick+0x178>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800786c:	697b      	ldr	r3, [r7, #20]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000770 	.word	0x20000770
 800787c:	2000074c 	.word	0x2000074c
 8007880:	20000700 	.word	0x20000700
 8007884:	20000704 	.word	0x20000704
 8007888:	20000760 	.word	0x20000760
 800788c:	20000768 	.word	0x20000768
 8007890:	20000750 	.word	0x20000750
 8007894:	2000064c 	.word	0x2000064c
 8007898:	20000648 	.word	0x20000648
 800789c:	20000758 	.word	0x20000758
 80078a0:	2000075c 	.word	0x2000075c

080078a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078aa:	4b29      	ldr	r3, [pc, #164]	; (8007950 <vTaskSwitchContext+0xac>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078b2:	4b28      	ldr	r3, [pc, #160]	; (8007954 <vTaskSwitchContext+0xb0>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078b8:	e044      	b.n	8007944 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80078ba:	4b26      	ldr	r3, [pc, #152]	; (8007954 <vTaskSwitchContext+0xb0>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078c0:	4b25      	ldr	r3, [pc, #148]	; (8007958 <vTaskSwitchContext+0xb4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	fab3 f383 	clz	r3, r3
 80078cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	f1c3 031f 	rsb	r3, r3, #31
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	4921      	ldr	r1, [pc, #132]	; (800795c <vTaskSwitchContext+0xb8>)
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <vTaskSwitchContext+0x5c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	607b      	str	r3, [r7, #4]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <vTaskSwitchContext+0x5a>
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4a14      	ldr	r2, [pc, #80]	; (800795c <vTaskSwitchContext+0xb8>)
 800790c:	4413      	add	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	605a      	str	r2, [r3, #4]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3308      	adds	r3, #8
 8007922:	429a      	cmp	r2, r3
 8007924:	d104      	bne.n	8007930 <vTaskSwitchContext+0x8c>
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <vTaskSwitchContext+0xbc>)
 8007938:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <vTaskSwitchContext+0xbc>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	334c      	adds	r3, #76	; 0x4c
 8007940:	4a08      	ldr	r2, [pc, #32]	; (8007964 <vTaskSwitchContext+0xc0>)
 8007942:	6013      	str	r3, [r2, #0]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000770 	.word	0x20000770
 8007954:	2000075c 	.word	0x2000075c
 8007958:	20000750 	.word	0x20000750
 800795c:	2000064c 	.word	0x2000064c
 8007960:	20000648 	.word	0x20000648
 8007964:	20000014 	.word	0x20000014

08007968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007970:	f000 f852 	bl	8007a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007974:	4b06      	ldr	r3, [pc, #24]	; (8007990 <prvIdleTask+0x28>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d9f9      	bls.n	8007970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800797c:	4b05      	ldr	r3, [pc, #20]	; (8007994 <prvIdleTask+0x2c>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800798c:	e7f0      	b.n	8007970 <prvIdleTask+0x8>
 800798e:	bf00      	nop
 8007990:	2000064c 	.word	0x2000064c
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
 80079a2:	e00c      	b.n	80079be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <prvInitialiseTaskLists+0x60>)
 80079b0:	4413      	add	r3, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff fb20 	bl	8006ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3301      	adds	r3, #1
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b06      	cmp	r3, #6
 80079c2:	d9ef      	bls.n	80079a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079c4:	480d      	ldr	r0, [pc, #52]	; (80079fc <prvInitialiseTaskLists+0x64>)
 80079c6:	f7ff fb17 	bl	8006ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ca:	480d      	ldr	r0, [pc, #52]	; (8007a00 <prvInitialiseTaskLists+0x68>)
 80079cc:	f7ff fb14 	bl	8006ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d0:	480c      	ldr	r0, [pc, #48]	; (8007a04 <prvInitialiseTaskLists+0x6c>)
 80079d2:	f7ff fb11 	bl	8006ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079d6:	480c      	ldr	r0, [pc, #48]	; (8007a08 <prvInitialiseTaskLists+0x70>)
 80079d8:	f7ff fb0e 	bl	8006ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079dc:	480b      	ldr	r0, [pc, #44]	; (8007a0c <prvInitialiseTaskLists+0x74>)
 80079de:	f7ff fb0b 	bl	8006ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079e2:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <prvInitialiseTaskLists+0x78>)
 80079e4:	4a05      	ldr	r2, [pc, #20]	; (80079fc <prvInitialiseTaskLists+0x64>)
 80079e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <prvInitialiseTaskLists+0x7c>)
 80079ea:	4a05      	ldr	r2, [pc, #20]	; (8007a00 <prvInitialiseTaskLists+0x68>)
 80079ec:	601a      	str	r2, [r3, #0]
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	2000064c 	.word	0x2000064c
 80079fc:	200006d8 	.word	0x200006d8
 8007a00:	200006ec 	.word	0x200006ec
 8007a04:	20000708 	.word	0x20000708
 8007a08:	2000071c 	.word	0x2000071c
 8007a0c:	20000734 	.word	0x20000734
 8007a10:	20000700 	.word	0x20000700
 8007a14:	20000704 	.word	0x20000704

08007a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a1e:	e019      	b.n	8007a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a20:	f000 f9d4 	bl	8007dcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007a24:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <prvCheckTasksWaitingTermination+0x50>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fb67 	bl	8007104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a36:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <prvCheckTasksWaitingTermination+0x54>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4a0b      	ldr	r2, [pc, #44]	; (8007a6c <prvCheckTasksWaitingTermination+0x54>)
 8007a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <prvCheckTasksWaitingTermination+0x58>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <prvCheckTasksWaitingTermination+0x58>)
 8007a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a4a:	f000 f9ef 	bl	8007e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f810 	bl	8007a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <prvCheckTasksWaitingTermination+0x58>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e1      	bne.n	8007a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000071c 	.word	0x2000071c
 8007a6c:	20000748 	.word	0x20000748
 8007a70:	20000730 	.word	0x20000730

08007a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	334c      	adds	r3, #76	; 0x4c
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fc87 	bl	8008394 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d108      	bne.n	8007aa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fb1f 	bl	80080d8 <vPortFree>
				vPortFree( pxTCB );
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fb1c 	bl	80080d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa0:	e018      	b.n	8007ad4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d103      	bne.n	8007ab4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb13 	bl	80080d8 <vPortFree>
	}
 8007ab2:	e00f      	b.n	8007ad4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d00a      	beq.n	8007ad4 <prvDeleteTCB+0x60>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60fb      	str	r3, [r7, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <prvDeleteTCB+0x5e>
	}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae2:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <prvResetNextTaskUnblockTime+0x40>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <prvResetNextTaskUnblockTime+0x14>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e000      	b.n	8007af2 <prvResetNextTaskUnblockTime+0x16>
 8007af0:	2300      	movs	r3, #0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af6:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <prvResetNextTaskUnblockTime+0x44>)
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007afe:	e008      	b.n	8007b12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <prvResetNextTaskUnblockTime+0x40>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <prvResetNextTaskUnblockTime+0x44>)
 8007b10:	6013      	str	r3, [r2, #0]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr
 8007b1c:	20000700 	.word	0x20000700
 8007b20:	20000768 	.word	0x20000768

08007b24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b2e:	4b29      	ldr	r3, [pc, #164]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b34:	4b28      	ldr	r3, [pc, #160]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fae2 	bl	8007104 <uxListRemove>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007b46:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43da      	mvns	r2, r3
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d10a      	bne.n	8007b7c <prvAddCurrentTaskToDelayedList+0x58>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	481a      	ldr	r0, [pc, #104]	; (8007be0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b76:	f7ff fa6a 	bl	800704e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b7a:	e026      	b.n	8007bca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b84:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d209      	bcs.n	8007ba8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b94:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7ff fa77 	bl	8007094 <vListInsert>
}
 8007ba6:	e010      	b.n	8007bca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba8:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7ff fa6d 	bl	8007094 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d202      	bcs.n	8007bca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007bc4:	4a09      	ldr	r2, [pc, #36]	; (8007bec <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6013      	str	r3, [r2, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	2000074c 	.word	0x2000074c
 8007bd8:	20000648 	.word	0x20000648
 8007bdc:	20000750 	.word	0x20000750
 8007be0:	20000734 	.word	0x20000734
 8007be4:	20000704 	.word	0x20000704
 8007be8:	20000700 	.word	0x20000700
 8007bec:	20000768 	.word	0x20000768

08007bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3b04      	subs	r3, #4
 8007c00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3b04      	subs	r3, #4
 8007c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f023 0201 	bic.w	r2, r3, #1
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c20:	4a08      	ldr	r2, [pc, #32]	; (8007c44 <pxPortInitialiseStack+0x54>)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3b14      	subs	r3, #20
 8007c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3b20      	subs	r3, #32
 8007c36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr
 8007c44:	08007c49 	.word	0x08007c49

08007c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <prvTaskExitError+0x54>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d00a      	beq.n	8007c72 <prvTaskExitError+0x2a>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <prvTaskExitError+0x28>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c86:	bf00      	nop
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0fc      	beq.n	8007c88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	20000010 	.word	0x20000010

08007ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <pxCurrentTCBConst2>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007caa:	f380 8809 	msr	PSP, r0
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8811 	msr	BASEPRI, r0
 8007cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007cbe:	4770      	bx	lr

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	20000648 	.word	0x20000648
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007cc8:	4806      	ldr	r0, [pc, #24]	; (8007ce4 <prvPortStartFirstTask+0x1c>)
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f380 8808 	msr	MSP, r0
 8007cd2:	b662      	cpsie	i
 8007cd4:	b661      	cpsie	f
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	df00      	svc	0
 8007ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ce2:	bf00      	nop
 8007ce4:	e000ed08 	.word	0xe000ed08

08007ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cee:	4b32      	ldr	r3, [pc, #200]	; (8007db8 <xPortStartScheduler+0xd0>)
 8007cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	22ff      	movs	r2, #255	; 0xff
 8007cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	4b2a      	ldr	r3, [pc, #168]	; (8007dbc <xPortStartScheduler+0xd4>)
 8007d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d16:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d18:	2207      	movs	r2, #7
 8007d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d1c:	e009      	b.n	8007d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d1e:	4b28      	ldr	r3, [pc, #160]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b80      	cmp	r3, #128	; 0x80
 8007d3c:	d0ef      	beq.n	8007d1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d3e:	4b20      	ldr	r3, [pc, #128]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1c3 0307 	rsb	r3, r3, #7
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d00a      	beq.n	8007d60 <xPortStartScheduler+0x78>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60bb      	str	r3, [r7, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d60:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d6a:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d72:	4a13      	ldr	r2, [pc, #76]	; (8007dc0 <xPortStartScheduler+0xd8>)
 8007d74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d7e:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <xPortStartScheduler+0xdc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <xPortStartScheduler+0xdc>)
 8007d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <xPortStartScheduler+0xdc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a0d      	ldr	r2, [pc, #52]	; (8007dc4 <xPortStartScheduler+0xdc>)
 8007d90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d96:	f000 f8b9 	bl	8007f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	; (8007dc8 <xPortStartScheduler+0xe0>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007da0:	f7ff ff92 	bl	8007cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007da4:	f7ff fd7e 	bl	80078a4 <vTaskSwitchContext>
	prvTaskExitError();
 8007da8:	f7ff ff4e 	bl	8007c48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	e000e400 	.word	0xe000e400
 8007dbc:	20000774 	.word	0x20000774
 8007dc0:	20000778 	.word	0x20000778
 8007dc4:	e000ed20 	.word	0xe000ed20
 8007dc8:	20000010 	.word	0x20000010

08007dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	607b      	str	r3, [r7, #4]
}
 8007de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <vPortEnterCritical+0x58>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <vPortEnterCritical+0x58>)
 8007dee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007df0:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <vPortEnterCritical+0x58>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10f      	bne.n	8007e18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007df8:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <vPortEnterCritical+0x5c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	603b      	str	r3, [r7, #0]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <vPortEnterCritical+0x4a>
	}
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20000010 	.word	0x20000010
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e32:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <vPortExitCritical+0x4c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <vPortExitCritical+0x24>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	607b      	str	r3, [r7, #4]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <vPortExitCritical+0x4c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4a08      	ldr	r2, [pc, #32]	; (8007e78 <vPortExitCritical+0x4c>)
 8007e58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <vPortExitCritical+0x4c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d105      	bne.n	8007e6e <vPortExitCritical+0x42>
 8007e62:	2300      	movs	r3, #0
 8007e64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr
 8007e78:	20000010 	.word	0x20000010
 8007e7c:	00000000 	.word	0x00000000

08007e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e80:	f3ef 8009 	mrs	r0, PSP
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <pxCurrentTCBConst>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e90:	6010      	str	r0, [r2, #0]
 8007e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007e96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e9a:	f380 8811 	msr	BASEPRI, r0
 8007e9e:	f7ff fd01 	bl	80078a4 <vTaskSwitchContext>
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8811 	msr	BASEPRI, r0
 8007eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007eae:	6819      	ldr	r1, [r3, #0]
 8007eb0:	6808      	ldr	r0, [r1, #0]
 8007eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007eb6:	f380 8809 	msr	PSP, r0
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	4770      	bx	lr

08007ec0 <pxCurrentTCBConst>:
 8007ec0:	20000648 	.word	0x20000648
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	607b      	str	r3, [r7, #4]
}
 8007ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ee2:	f7ff fc21 	bl	8007728 <xTaskIncrementTick>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <SysTick_Handler+0x40>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f383 8811 	msr	BASEPRI, r3
}
 8007efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f10:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <vPortSetupTimerInterrupt+0x30>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f16:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f1c:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <vPortSetupTimerInterrupt+0x38>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a09      	ldr	r2, [pc, #36]	; (8007f48 <vPortSetupTimerInterrupt+0x3c>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <vPortSetupTimerInterrupt+0x40>)
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f2e:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <vPortSetupTimerInterrupt+0x30>)
 8007f30:	2207      	movs	r2, #7
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	e000e010 	.word	0xe000e010
 8007f40:	e000e018 	.word	0xe000e018
 8007f44:	20000004 	.word	0x20000004
 8007f48:	10624dd3 	.word	0x10624dd3
 8007f4c:	e000e014 	.word	0xe000e014

08007f50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	; 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f5c:	f7ff fb3a 	bl	80075d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f60:	4b58      	ldr	r3, [pc, #352]	; (80080c4 <pvPortMalloc+0x174>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f68:	f000 f910 	bl	800818c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f6c:	4b56      	ldr	r3, [pc, #344]	; (80080c8 <pvPortMalloc+0x178>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 808e 	bne.w	8008096 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01d      	beq.n	8007fbc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f80:	2208      	movs	r2, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4413      	add	r3, r2
 8007f86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d014      	beq.n	8007fbc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	3308      	adds	r3, #8
 8007f9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <pvPortMalloc+0x6c>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	617b      	str	r3, [r7, #20]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d069      	beq.n	8008096 <pvPortMalloc+0x146>
 8007fc2:	4b42      	ldr	r3, [pc, #264]	; (80080cc <pvPortMalloc+0x17c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d864      	bhi.n	8008096 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fcc:	4b40      	ldr	r3, [pc, #256]	; (80080d0 <pvPortMalloc+0x180>)
 8007fce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fd0:	4b3f      	ldr	r3, [pc, #252]	; (80080d0 <pvPortMalloc+0x180>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fd6:	e004      	b.n	8007fe2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d903      	bls.n	8007ff4 <pvPortMalloc+0xa4>
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f1      	bne.n	8007fd8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ff4:	4b33      	ldr	r3, [pc, #204]	; (80080c4 <pvPortMalloc+0x174>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d04b      	beq.n	8008096 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2208      	movs	r2, #8
 8008004:	4413      	add	r3, r2
 8008006:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	1ad2      	subs	r2, r2, r3
 8008018:	2308      	movs	r3, #8
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	429a      	cmp	r2, r3
 800801e:	d91f      	bls.n	8008060 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4413      	add	r3, r2
 8008026:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <pvPortMalloc+0xf8>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	613b      	str	r3, [r7, #16]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800805a:	69b8      	ldr	r0, [r7, #24]
 800805c:	f000 f8f8 	bl	8008250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008060:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <pvPortMalloc+0x17c>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	4a18      	ldr	r2, [pc, #96]	; (80080cc <pvPortMalloc+0x17c>)
 800806c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800806e:	4b17      	ldr	r3, [pc, #92]	; (80080cc <pvPortMalloc+0x17c>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <pvPortMalloc+0x184>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d203      	bcs.n	8008082 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800807a:	4b14      	ldr	r3, [pc, #80]	; (80080cc <pvPortMalloc+0x17c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a15      	ldr	r2, [pc, #84]	; (80080d4 <pvPortMalloc+0x184>)
 8008080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <pvPortMalloc+0x178>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	431a      	orrs	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008096:	f7ff faab 	bl	80075f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <pvPortMalloc+0x16a>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60fb      	str	r3, [r7, #12]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <pvPortMalloc+0x168>
	return pvReturn;
 80080ba:	69fb      	ldr	r3, [r7, #28]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3728      	adds	r7, #40	; 0x28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20001384 	.word	0x20001384
 80080c8:	20001390 	.word	0x20001390
 80080cc:	20001388 	.word	0x20001388
 80080d0:	2000137c 	.word	0x2000137c
 80080d4:	2000138c 	.word	0x2000138c

080080d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d048      	beq.n	800817c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080ea:	2308      	movs	r3, #8
 80080ec:	425b      	negs	r3, r3
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4413      	add	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b21      	ldr	r3, [pc, #132]	; (8008184 <vPortFree+0xac>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <vPortFree+0x44>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60fb      	str	r3, [r7, #12]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <vPortFree+0x62>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60bb      	str	r3, [r7, #8]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	4b11      	ldr	r3, [pc, #68]	; (8008184 <vPortFree+0xac>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4013      	ands	r3, r2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d019      	beq.n	800817c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d115      	bne.n	800817c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <vPortFree+0xac>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	43db      	mvns	r3, r3
 800815a:	401a      	ands	r2, r3
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008160:	f7ff fa38 	bl	80075d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b07      	ldr	r3, [pc, #28]	; (8008188 <vPortFree+0xb0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4413      	add	r3, r2
 800816e:	4a06      	ldr	r2, [pc, #24]	; (8008188 <vPortFree+0xb0>)
 8008170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008172:	6938      	ldr	r0, [r7, #16]
 8008174:	f000 f86c 	bl	8008250 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008178:	f7ff fa3a 	bl	80075f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800817c:	bf00      	nop
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20001390 	.word	0x20001390
 8008188:	20001388 	.word	0x20001388

0800818c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008198:	4b27      	ldr	r3, [pc, #156]	; (8008238 <prvHeapInit+0xac>)
 800819a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3307      	adds	r3, #7
 80081aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0307 	bic.w	r3, r3, #7
 80081b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <prvHeapInit+0xac>)
 80081bc:	4413      	add	r3, r2
 80081be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081c4:	4a1d      	ldr	r2, [pc, #116]	; (800823c <prvHeapInit+0xb0>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081ca:	4b1c      	ldr	r3, [pc, #112]	; (800823c <prvHeapInit+0xb0>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081d8:	2208      	movs	r2, #8
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0307 	bic.w	r3, r3, #7
 80081e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4a15      	ldr	r2, [pc, #84]	; (8008240 <prvHeapInit+0xb4>)
 80081ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <prvHeapInit+0xb4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081f6:	4b12      	ldr	r3, [pc, #72]	; (8008240 <prvHeapInit+0xb4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	1ad2      	subs	r2, r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <prvHeapInit+0xb4>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4a0a      	ldr	r2, [pc, #40]	; (8008244 <prvHeapInit+0xb8>)
 800821a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <prvHeapInit+0xbc>)
 8008222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008224:	4b09      	ldr	r3, [pc, #36]	; (800824c <prvHeapInit+0xc0>)
 8008226:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800822a:	601a      	str	r2, [r3, #0]
}
 800822c:	bf00      	nop
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	2000077c 	.word	0x2000077c
 800823c:	2000137c 	.word	0x2000137c
 8008240:	20001384 	.word	0x20001384
 8008244:	2000138c 	.word	0x2000138c
 8008248:	20001388 	.word	0x20001388
 800824c:	20001390 	.word	0x20001390

08008250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008258:	4b27      	ldr	r3, [pc, #156]	; (80082f8 <prvInsertBlockIntoFreeList+0xa8>)
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	e002      	b.n	8008264 <prvInsertBlockIntoFreeList+0x14>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d8f7      	bhi.n	800825e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4413      	add	r3, r2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d108      	bne.n	8008292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	441a      	add	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	441a      	add	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d118      	bne.n	80082d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <prvInsertBlockIntoFreeList+0xac>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d00d      	beq.n	80082ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	441a      	add	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e008      	b.n	80082e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082ce:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <prvInsertBlockIntoFreeList+0xac>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	e003      	b.n	80082e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d002      	beq.n	80082ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr
 80082f8:	2000137c 	.word	0x2000137c
 80082fc:	20001384 	.word	0x20001384

08008300 <__libc_init_array>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	2600      	movs	r6, #0
 8008304:	4d0c      	ldr	r5, [pc, #48]	; (8008338 <__libc_init_array+0x38>)
 8008306:	4c0d      	ldr	r4, [pc, #52]	; (800833c <__libc_init_array+0x3c>)
 8008308:	1b64      	subs	r4, r4, r5
 800830a:	10a4      	asrs	r4, r4, #2
 800830c:	42a6      	cmp	r6, r4
 800830e:	d109      	bne.n	8008324 <__libc_init_array+0x24>
 8008310:	f000 f8f0 	bl	80084f4 <_init>
 8008314:	2600      	movs	r6, #0
 8008316:	4d0a      	ldr	r5, [pc, #40]	; (8008340 <__libc_init_array+0x40>)
 8008318:	4c0a      	ldr	r4, [pc, #40]	; (8008344 <__libc_init_array+0x44>)
 800831a:	1b64      	subs	r4, r4, r5
 800831c:	10a4      	asrs	r4, r4, #2
 800831e:	42a6      	cmp	r6, r4
 8008320:	d105      	bne.n	800832e <__libc_init_array+0x2e>
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	f855 3b04 	ldr.w	r3, [r5], #4
 8008328:	4798      	blx	r3
 800832a:	3601      	adds	r6, #1
 800832c:	e7ee      	b.n	800830c <__libc_init_array+0xc>
 800832e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008332:	4798      	blx	r3
 8008334:	3601      	adds	r6, #1
 8008336:	e7f2      	b.n	800831e <__libc_init_array+0x1e>
 8008338:	08008688 	.word	0x08008688
 800833c:	08008688 	.word	0x08008688
 8008340:	08008688 	.word	0x08008688
 8008344:	0800868c 	.word	0x0800868c

08008348 <__retarget_lock_acquire_recursive>:
 8008348:	4770      	bx	lr

0800834a <__retarget_lock_release_recursive>:
 800834a:	4770      	bx	lr

0800834c <memcpy>:
 800834c:	440a      	add	r2, r1
 800834e:	4291      	cmp	r1, r2
 8008350:	f100 33ff 	add.w	r3, r0, #4294967295
 8008354:	d100      	bne.n	8008358 <memcpy+0xc>
 8008356:	4770      	bx	lr
 8008358:	b510      	push	{r4, lr}
 800835a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800835e:	4291      	cmp	r1, r2
 8008360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008364:	d1f9      	bne.n	800835a <memcpy+0xe>
 8008366:	bd10      	pop	{r4, pc}

08008368 <memset>:
 8008368:	4603      	mov	r3, r0
 800836a:	4402      	add	r2, r0
 800836c:	4293      	cmp	r3, r2
 800836e:	d100      	bne.n	8008372 <memset+0xa>
 8008370:	4770      	bx	lr
 8008372:	f803 1b01 	strb.w	r1, [r3], #1
 8008376:	e7f9      	b.n	800836c <memset+0x4>

08008378 <cleanup_glue>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	460c      	mov	r4, r1
 800837c:	6809      	ldr	r1, [r1, #0]
 800837e:	4605      	mov	r5, r0
 8008380:	b109      	cbz	r1, 8008386 <cleanup_glue+0xe>
 8008382:	f7ff fff9 	bl	8008378 <cleanup_glue>
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838e:	f000 b869 	b.w	8008464 <_free_r>
	...

08008394 <_reclaim_reent>:
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <_reclaim_reent+0xb4>)
 8008396:	b570      	push	{r4, r5, r6, lr}
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4604      	mov	r4, r0
 800839c:	4283      	cmp	r3, r0
 800839e:	d051      	beq.n	8008444 <_reclaim_reent+0xb0>
 80083a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083a2:	b143      	cbz	r3, 80083b6 <_reclaim_reent+0x22>
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d14a      	bne.n	8008440 <_reclaim_reent+0xac>
 80083aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	b111      	cbz	r1, 80083b6 <_reclaim_reent+0x22>
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 f857 	bl	8008464 <_free_r>
 80083b6:	6961      	ldr	r1, [r4, #20]
 80083b8:	b111      	cbz	r1, 80083c0 <_reclaim_reent+0x2c>
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f852 	bl	8008464 <_free_r>
 80083c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083c2:	b111      	cbz	r1, 80083ca <_reclaim_reent+0x36>
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f84d 	bl	8008464 <_free_r>
 80083ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083cc:	b111      	cbz	r1, 80083d4 <_reclaim_reent+0x40>
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 f848 	bl	8008464 <_free_r>
 80083d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083d6:	b111      	cbz	r1, 80083de <_reclaim_reent+0x4a>
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f843 	bl	8008464 <_free_r>
 80083de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083e0:	b111      	cbz	r1, 80083e8 <_reclaim_reent+0x54>
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f83e 	bl	8008464 <_free_r>
 80083e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80083ea:	b111      	cbz	r1, 80083f2 <_reclaim_reent+0x5e>
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 f839 	bl	8008464 <_free_r>
 80083f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083f4:	b111      	cbz	r1, 80083fc <_reclaim_reent+0x68>
 80083f6:	4620      	mov	r0, r4
 80083f8:	f000 f834 	bl	8008464 <_free_r>
 80083fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083fe:	b111      	cbz	r1, 8008406 <_reclaim_reent+0x72>
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f82f 	bl	8008464 <_free_r>
 8008406:	69a3      	ldr	r3, [r4, #24]
 8008408:	b1e3      	cbz	r3, 8008444 <_reclaim_reent+0xb0>
 800840a:	4620      	mov	r0, r4
 800840c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800840e:	4798      	blx	r3
 8008410:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008412:	b1b9      	cbz	r1, 8008444 <_reclaim_reent+0xb0>
 8008414:	4620      	mov	r0, r4
 8008416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800841a:	f7ff bfad 	b.w	8008378 <cleanup_glue>
 800841e:	5949      	ldr	r1, [r1, r5]
 8008420:	b941      	cbnz	r1, 8008434 <_reclaim_reent+0xa0>
 8008422:	3504      	adds	r5, #4
 8008424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008426:	2d80      	cmp	r5, #128	; 0x80
 8008428:	68d9      	ldr	r1, [r3, #12]
 800842a:	d1f8      	bne.n	800841e <_reclaim_reent+0x8a>
 800842c:	4620      	mov	r0, r4
 800842e:	f000 f819 	bl	8008464 <_free_r>
 8008432:	e7ba      	b.n	80083aa <_reclaim_reent+0x16>
 8008434:	680e      	ldr	r6, [r1, #0]
 8008436:	4620      	mov	r0, r4
 8008438:	f000 f814 	bl	8008464 <_free_r>
 800843c:	4631      	mov	r1, r6
 800843e:	e7ef      	b.n	8008420 <_reclaim_reent+0x8c>
 8008440:	2500      	movs	r5, #0
 8008442:	e7ef      	b.n	8008424 <_reclaim_reent+0x90>
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	bf00      	nop
 8008448:	20000014 	.word	0x20000014

0800844c <__malloc_lock>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__malloc_lock+0x8>)
 800844e:	f7ff bf7b 	b.w	8008348 <__retarget_lock_acquire_recursive>
 8008452:	bf00      	nop
 8008454:	20001394 	.word	0x20001394

08008458 <__malloc_unlock>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__malloc_unlock+0x8>)
 800845a:	f7ff bf76 	b.w	800834a <__retarget_lock_release_recursive>
 800845e:	bf00      	nop
 8008460:	20001394 	.word	0x20001394

08008464 <_free_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4605      	mov	r5, r0
 8008468:	2900      	cmp	r1, #0
 800846a:	d040      	beq.n	80084ee <_free_r+0x8a>
 800846c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008470:	1f0c      	subs	r4, r1, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	bfb8      	it	lt
 8008476:	18e4      	addlt	r4, r4, r3
 8008478:	f7ff ffe8 	bl	800844c <__malloc_lock>
 800847c:	4a1c      	ldr	r2, [pc, #112]	; (80084f0 <_free_r+0x8c>)
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	b933      	cbnz	r3, 8008490 <_free_r+0x2c>
 8008482:	6063      	str	r3, [r4, #4]
 8008484:	6014      	str	r4, [r2, #0]
 8008486:	4628      	mov	r0, r5
 8008488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800848c:	f7ff bfe4 	b.w	8008458 <__malloc_unlock>
 8008490:	42a3      	cmp	r3, r4
 8008492:	d908      	bls.n	80084a6 <_free_r+0x42>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	1821      	adds	r1, r4, r0
 8008498:	428b      	cmp	r3, r1
 800849a:	bf01      	itttt	eq
 800849c:	6819      	ldreq	r1, [r3, #0]
 800849e:	685b      	ldreq	r3, [r3, #4]
 80084a0:	1809      	addeq	r1, r1, r0
 80084a2:	6021      	streq	r1, [r4, #0]
 80084a4:	e7ed      	b.n	8008482 <_free_r+0x1e>
 80084a6:	461a      	mov	r2, r3
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b10b      	cbz	r3, 80084b0 <_free_r+0x4c>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d9fa      	bls.n	80084a6 <_free_r+0x42>
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	1850      	adds	r0, r2, r1
 80084b4:	42a0      	cmp	r0, r4
 80084b6:	d10b      	bne.n	80084d0 <_free_r+0x6c>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	4401      	add	r1, r0
 80084bc:	1850      	adds	r0, r2, r1
 80084be:	4283      	cmp	r3, r0
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	d1e0      	bne.n	8008486 <_free_r+0x22>
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4401      	add	r1, r0
 80084ca:	6011      	str	r1, [r2, #0]
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	e7da      	b.n	8008486 <_free_r+0x22>
 80084d0:	d902      	bls.n	80084d8 <_free_r+0x74>
 80084d2:	230c      	movs	r3, #12
 80084d4:	602b      	str	r3, [r5, #0]
 80084d6:	e7d6      	b.n	8008486 <_free_r+0x22>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	1821      	adds	r1, r4, r0
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf01      	itttt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	1809      	addeq	r1, r1, r0
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	6054      	str	r4, [r2, #4]
 80084ec:	e7cb      	b.n	8008486 <_free_r+0x22>
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20001398 	.word	0x20001398

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
