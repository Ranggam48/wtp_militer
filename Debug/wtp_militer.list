
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007638  08007638  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007638  08007638  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007638  08007638  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001270  20000078  080076b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e8  080076b8  000212e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170db  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036da  00000000  00000000  0003717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a30e  00000000  00000000  0003cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016540  00000000  00000000  00057276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009549c  00000000  00000000  0006d7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102c52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c8  00000000  00000000  00102ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080074f4 	.word	0x080074f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080074f4 	.word	0x080074f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__gesf2>:
 8000bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bfc:	e006      	b.n	8000c0c <__cmpsf2+0x4>
 8000bfe:	bf00      	nop

08000c00 <__lesf2>:
 8000c00:	f04f 0c01 	mov.w	ip, #1
 8000c04:	e002      	b.n	8000c0c <__cmpsf2+0x4>
 8000c06:	bf00      	nop

08000c08 <__cmpsf2>:
 8000c08:	f04f 0c01 	mov.w	ip, #1
 8000c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	bf18      	it	ne
 8000c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c22:	d011      	beq.n	8000c48 <__cmpsf2+0x40>
 8000c24:	b001      	add	sp, #4
 8000c26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c2a:	bf18      	it	ne
 8000c2c:	ea90 0f01 	teqne	r0, r1
 8000c30:	bf58      	it	pl
 8000c32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c36:	bf88      	it	hi
 8000c38:	17c8      	asrhi	r0, r1, #31
 8000c3a:	bf38      	it	cc
 8000c3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c40:	bf18      	it	ne
 8000c42:	f040 0001 	orrne.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	d102      	bne.n	8000c54 <__cmpsf2+0x4c>
 8000c4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c52:	d105      	bne.n	8000c60 <__cmpsf2+0x58>
 8000c54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c58:	d1e4      	bne.n	8000c24 <__cmpsf2+0x1c>
 8000c5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c5e:	d0e1      	beq.n	8000c24 <__cmpsf2+0x1c>
 8000c60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_cfrcmple>:
 8000c68:	4684      	mov	ip, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	e7ff      	b.n	8000c70 <__aeabi_cfcmpeq>

08000c70 <__aeabi_cfcmpeq>:
 8000c70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c72:	f7ff ffc9 	bl	8000c08 <__cmpsf2>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	bf48      	it	mi
 8000c7a:	f110 0f00 	cmnmi.w	r0, #0
 8000c7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c80 <__aeabi_fcmpeq>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff fff4 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c88:	bf0c      	ite	eq
 8000c8a:	2001      	moveq	r0, #1
 8000c8c:	2000      	movne	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmplt>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffea 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c9c:	bf34      	ite	cc
 8000c9e:	2001      	movcc	r0, #1
 8000ca0:	2000      	movcs	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_fcmple>:
 8000ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cac:	f7ff ffe0 	bl	8000c70 <__aeabi_cfcmpeq>
 8000cb0:	bf94      	ite	ls
 8000cb2:	2001      	movls	r0, #1
 8000cb4:	2000      	movhi	r0, #0
 8000cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cba:	bf00      	nop

08000cbc <__aeabi_fcmpge>:
 8000cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc0:	f7ff ffd2 	bl	8000c68 <__aeabi_cfrcmple>
 8000cc4:	bf94      	ite	ls
 8000cc6:	2001      	movls	r0, #1
 8000cc8:	2000      	movhi	r0, #0
 8000cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fcmpgt>:
 8000cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd4:	f7ff ffc8 	bl	8000c68 <__aeabi_cfrcmple>
 8000cd8:	bf34      	ite	cc
 8000cda:	2001      	movcc	r0, #1
 8000cdc:	2000      	movcs	r0, #0
 8000cde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_f2uiz>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	d20e      	bcs.n	8000d06 <__aeabi_f2uiz+0x22>
 8000ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cec:	d30b      	bcc.n	8000d06 <__aeabi_f2uiz+0x22>
 8000cee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cf6:	d409      	bmi.n	8000d0c <__aeabi_f2uiz+0x28>
 8000cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d00:	fa23 f002 	lsr.w	r0, r3, r2
 8000d04:	4770      	bx	lr
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	4770      	bx	lr
 8000d0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d10:	d101      	bne.n	8000d16 <__aeabi_f2uiz+0x32>
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	d102      	bne.n	8000d1c <__aeabi_f2uiz+0x38>
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	4770      	bx	lr
 8000d1c:	f04f 0000 	mov.w	r0, #0
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <bytestowrite>:

/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite(uint16_t size, uint16_t offset) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	80fb      	strh	r3, [r7, #6]
 8000d30:	4613      	mov	r3, r2
 8000d32:	80bb      	strh	r3, [r7, #4]
	if ((size + offset) < PAGE_SIZE)
 8000d34:	88fa      	ldrh	r2, [r7, #6]
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	dc01      	bgt.n	8000d42 <bytestowrite+0x1e>
		return size;
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	e003      	b.n	8000d4a <bytestowrite+0x26>
	else
		return PAGE_SIZE - offset;
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d48:	b29b      	uxth	r3, r3
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <EEPROM_Write>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	60ba      	str	r2, [r7, #8]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	81fb      	strh	r3, [r7, #14]
 8000d62:	460b      	mov	r3, r1
 8000d64:	81bb      	strh	r3, [r7, #12]
 8000d66:	4613      	mov	r3, r2
 8000d68:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE) / log(2);
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000d72:	88fa      	ldrh	r2, [r7, #6]
 8000d74:	89bb      	ldrh	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da00      	bge.n	8000d7e <EEPROM_Write+0x2a>
 8000d7c:	333f      	adds	r3, #63	; 0x3f
 8000d7e:	119b      	asrs	r3, r3, #6
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	4413      	add	r3, r2
 8000d86:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage - startPage) + 1;
 8000d88:	8b7a      	ldrh	r2, [r7, #26]
 8000d8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i = 0; i < numofpages; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	e034      	b.n	8000e08 <EEPROM_Write+0xb4>
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage << paddrposition | offset;
 8000d9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset); // calculate the remaining bytes to be written
 8000db2:	89ba      	ldrh	r2, [r7, #12]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffb3 	bl	8000d24 <bytestowrite>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 8000dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	8af9      	ldrh	r1, [r7, #22]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	9202      	str	r2, [sp, #8]
 8000dd0:	8aba      	ldrh	r2, [r7, #20]
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	460a      	mov	r2, r1
 8000dda:	21a0      	movs	r1, #160	; 0xa0
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <EEPROM_Write+0xc8>)
 8000dde:	f002 fe3d 	bl	8003a5c <HAL_I2C_Mem_Write>
				bytesremaining, 1000);  // write the data to the EEPROM

		startPage += 1; // increment the page, so that a new page address can be selected for further write
 8000de2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000de4:	3301      	adds	r3, #1
 8000de6:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0; // since we will be writing to a new page, so offset will be 0
 8000de8:	2300      	movs	r3, #0
 8000dea:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;  // reduce the size of the bytes
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	8abb      	ldrh	r3, [r7, #20]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000df4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000df6:	8abb      	ldrh	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);  // Write cycle delay (5ms)
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f001 fbdd 	bl	80025bc <HAL_Delay>
	for (int i = 0; i < numofpages; i++) {
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	3301      	adds	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
 8000e08:	8b3b      	ldrh	r3, [r7, #24]
 8000e0a:	6a3a      	ldr	r2, [r7, #32]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbc6      	blt.n	8000d9e <EEPROM_Write+0x4a>
	}
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000460 	.word	0x20000460

08000e20 <float2Bytes>:

void float2Bytes(uint8_t *ftoa_bytes_temp, float float_variable) {
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	thing.a = float_variable;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < 4; i++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e00b      	b.n	8000e4c <float2Bytes+0x2c>
		ftoa_bytes_temp[i] = thing.bytes[i];
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3210      	adds	r2, #16
 8000e3e:	443a      	add	r2, r7
 8000e40:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000e44:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d9f0      	bls.n	8000e34 <float2Bytes+0x14>
	}

}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <Bytes2float>:

float Bytes2float(uint8_t *ftoa_bytes_temp) {
 8000e5e:	b480      	push	{r7}
 8000e60:	b087      	sub	sp, #28
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	union {
		float a;
		uint8_t bytes[4];
	} thing;

	for (uint8_t i = 0; i < 4; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
 8000e6a:	e00b      	b.n	8000e84 <Bytes2float+0x26>
		thing.bytes[i] = ftoa_bytes_temp[i];
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	441a      	add	r2, r3
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	3318      	adds	r3, #24
 8000e78:	443b      	add	r3, r7
 8000e7a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++) {
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	3301      	adds	r3, #1
 8000e82:	75fb      	strb	r3, [r7, #23]
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9f0      	bls.n	8000e6c <Bytes2float+0xe>
	}

	float float_variable = thing.a;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	613b      	str	r3, [r7, #16]
	return float_variable;
 8000e8e:	693b      	ldr	r3, [r7, #16]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <EEPROM_Write_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM(uint16_t page, uint16_t offset, float data) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	603a      	str	r2, [r7, #0]
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <EEPROM_Write_NUM+0x2c>)
 8000eb0:	f7ff ffb6 	bl	8000e20 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000eb4:	88b9      	ldrh	r1, [r7, #4]
 8000eb6:	88f8      	ldrh	r0, [r7, #6]
 8000eb8:	2304      	movs	r3, #4
 8000eba:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <EEPROM_Write_NUM+0x2c>)
 8000ebc:	f7ff ff4a 	bl	8000d54 <EEPROM_Write>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000094 	.word	0x20000094

08000ecc <EEPROM_Read_NUM>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM(uint16_t page, uint16_t offset) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	80fb      	strh	r3, [r7, #6]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	88b9      	ldrh	r1, [r7, #4]
 8000ee2:	88f8      	ldrh	r0, [r7, #6]
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	f000 f80b 	bl	8000f00 <EEPROM_Read>

	return (Bytes2float(buffer));
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ffb5 	bl	8000e5e <Bytes2float>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <EEPROM_Read>:
 * @page is the number of the start page. Range from 0 to PAGE_NUM-1
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	81fb      	strh	r3, [r7, #14]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	81bb      	strh	r3, [r7, #12]
 8000f12:	4613      	mov	r3, r2
 8000f14:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE) / log(2);
 8000f16:	2306      	movs	r3, #6
 8000f18:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da00      	bge.n	8000f2a <EEPROM_Read+0x2a>
 8000f28:	333f      	adds	r3, #63	; 0x3f
 8000f2a:	119b      	asrs	r3, r3, #6
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	4413      	add	r3, r2
 8000f32:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage - startPage) + 1;
 8000f34:	8b7a      	ldrh	r2, [r7, #26]
 8000f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i < numofpages; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	e031      	b.n	8000fae <EEPROM_Read+0xae>
		uint16_t MemAddress = startPage << paddrposition | offset;
 8000f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000f5e:	89ba      	ldrh	r2, [r7, #12]
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fedd 	bl	8000d24 <bytestowrite>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos],
 8000f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	8af9      	ldrh	r1, [r7, #22]
 8000f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7a:	9202      	str	r2, [sp, #8]
 8000f7c:	8aba      	ldrh	r2, [r7, #20]
 8000f7e:	9201      	str	r2, [sp, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	460a      	mov	r2, r1
 8000f86:	21a0      	movs	r1, #160	; 0xa0
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <EEPROM_Read+0xc0>)
 8000f8a:	f002 fe61 	bl	8003c50 <HAL_I2C_Mem_Read>
				bytesremaining, 1000);
		startPage += 1;
 8000f8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f90:	3301      	adds	r3, #1
 8000f92:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 8000f98:	88fa      	ldrh	r2, [r7, #6]
 8000f9a:	8abb      	ldrh	r3, [r7, #20]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fa2:	8abb      	ldrh	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i < numofpages; i++) {
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	3301      	adds	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
 8000fae:	8b3b      	ldrh	r3, [r7, #24]
 8000fb0:	6a3a      	ldr	r2, [r7, #32]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbc9      	blt.n	8000f4a <EEPROM_Read+0x4a>
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000460 	.word	0x20000460
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < us)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f1b      	ldrb	r3, [r3, #28]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 8082 	bne.w	80010de <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (ultrasonic1.Is_First_Captured == 0) // if the first value is not captured
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fdc:	7b1b      	ldrb	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d11a      	bne.n	8001018 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f004 fc8b 	bl	8005900 <HAL_TIM_ReadCapturedValue>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fee:	6013      	str	r3, [r2, #0]
			TIM_CHANNEL_1); // read the first value
			ultrasonic1.Is_First_Captured = 1; // set the first captured as true
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020a 	bic.w	r2, r2, #10
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 8001016:	e062      	b.n	80010de <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured == 1) // if the first is already captured
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800101a:	7b1b      	ldrb	r3, [r3, #12]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d15e      	bne.n	80010de <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 fc6c 	bl	8005900 <HAL_TIM_ReadCapturedValue>
 8001028:	4603      	mov	r3, r0
 800102a:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800102c:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1) {
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d907      	bls.n	8001052 <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001044:	685a      	ldr	r2, [r3, #4]
						- ultrasonic1.IC_Val1;
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
				ultrasonic1.Difference = ultrasonic1.IC_Val2
 800104c:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800104e:	6093      	str	r3, [r2, #8]
 8001050:	e00f      	b.n	8001072 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2) {
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	d909      	bls.n	8001072 <HAL_TIM_IC_CaptureCallback+0xaa>
						+ ultrasonic1.IC_Val2;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001060:	685a      	ldr	r2, [r3, #4]
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001064:	681b      	ldr	r3, [r3, #0]
						+ ultrasonic1.IC_Val2;
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800106c:	33ff      	adds	r3, #255	; 0xff
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1)
 800106e:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001070:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034 / 2;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9ac 	bl	80003d4 <__aeabi_ui2d>
 800107c:	a31a      	add	r3, pc, #104	; (adr r3, 80010e8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fa21 	bl	80004c8 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001096:	f7ff fb41 	bl	800071c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fc4b 	bl	800093c <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010aa:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6a1a      	ldr	r2, [r3, #32]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 020a 	bic.w	r2, r2, #10
 80010c0:	621a      	str	r2, [r3, #32]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a12      	ldr	r2, [r2, #32]
 80010cc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0202 	bic.w	r2, r2, #2
 80010dc:	60da      	str	r2, [r3, #12]
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	b020c49c 	.word	0xb020c49c
 80010ec:	3fa16872 	.word	0x3fa16872
 80010f0:	20000098 	.word	0x20000098
 80010f4:	200004b4 	.word	0x200004b4

080010f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
int canSetMode;

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001102:	4a34      	ldr	r2, [pc, #208]	; (80011d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8001104:	2101      	movs	r1, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f001 fd5e 	bl	8002bc8 <HAL_CAN_GetRxMessage>

	if (RxHeader.IDE == CAN_ID_EXT) {
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d156      	bne.n	80011c2 <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
		uint8_t id = RxHeader.ExtId & 0xFF;
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	73fb      	strb	r3, [r7, #15]
		uint8_t cmd = RxHeader.ExtId >> 8;
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	73bb      	strb	r3, [r7, #14]

		if (id == 255 || id == selfID) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2bff      	cmp	r3, #255	; 0xff
 8001126:	d004      	beq.n	8001132 <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d147      	bne.n	80011c2 <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
			switch (cmd) {
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	2b23      	cmp	r3, #35	; 0x23
 8001136:	d006      	beq.n	8001146 <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 8001138:	2b23      	cmp	r3, #35	; 0x23
 800113a:	dc45      	bgt.n	80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
 800113c:	2b05      	cmp	r3, #5
 800113e:	d016      	beq.n	800116e <HAL_CAN_RxFifo1MsgPendingCallback+0x76>
 8001140:	2b06      	cmp	r3, #6
 8001142:	d021      	beq.n	8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>

		}
	}
	//}

}
 8001144:	e040      	b.n	80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				canSetMode = -1;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	601a      	str	r2, [r3, #0]
				ind = 0;
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
				canSetMode = buffer_get_int32(RxData, &ind);
 8001154:	4922      	ldr	r1, [pc, #136]	; (80011e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8001156:	481e      	ldr	r0, [pc, #120]	; (80011d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001158:	f000 f886 	bl	8001268 <buffer_get_int32>
 800115c:	4603      	mov	r3, r0
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001160:	6013      	str	r3, [r2, #0]
				setMode(canSetMode);
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fa52 	bl	8001610 <setMode>
				break;
 800116c:	e02c      	b.n	80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8001176:	18d0      	adds	r0, r2, r3
 8001178:	491b      	ldr	r1, [pc, #108]	; (80011e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	3b01      	subs	r3, #1
 8001180:	461a      	mov	r2, r3
 8001182:	f006 f8e3 	bl	800734c <memcpy>
				break;
 8001186:	e01f      	b.n	80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				rxbuf_ind = (unsigned int) RxData[0] << 8;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001190:	6013      	str	r3, [r2, #0]
				rxbuf_ind |= RxData[1];
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	461a      	mov	r2, r3
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80011a0:	6013      	str	r3, [r2, #0]
				if (rxbuf_ind < RX_BUFFER_SIZE) {
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b3f      	cmp	r3, #63	; 0x3f
 80011a8:	d80d      	bhi.n	80011c6 <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
					memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80011b0:	1898      	adds	r0, r3, r2
 80011b2:	490f      	ldr	r1, [pc, #60]	; (80011f0 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	3b02      	subs	r3, #2
 80011ba:	461a      	mov	r2, r3
 80011bc:	f006 f8c6 	bl	800734c <memcpy>
				break;
 80011c0:	e001      	b.n	80011c6 <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
		}
 80011c2:	bf00      	nop
 80011c4:	e000      	b.n	80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
				break;
 80011c6:	bf00      	nop
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000e8 	.word	0x200000e8
 80011d4:	200000ac 	.word	0x200000ac
 80011d8:	20000000 	.word	0x20000000
 80011dc:	2000013c 	.word	0x2000013c
 80011e0:	200000f4 	.word	0x200000f4
 80011e4:	200000f8 	.word	0x200000f8
 80011e8:	200000e9 	.word	0x200000e9
 80011ec:	20000138 	.word	0x20000138
 80011f0:	200000ea 	.word	0x200000ea

080011f4 <buffer_append_int32>:

void buffer_append_int32(uint8_t *buffer, int32_t number, int32_t *index) {
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1618      	asrs	r0, r3, #24
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1c59      	adds	r1, r3, #1
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6011      	str	r1, [r2, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	b2c2      	uxtb	r2, r0
 8001216:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1418      	asrs	r0, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1c59      	adds	r1, r3, #1
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6011      	str	r1, [r2, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	b2c2      	uxtb	r2, r0
 800122e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1218      	asrs	r0, r3, #8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1c59      	adds	r1, r3, #1
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6011      	str	r1, [r2, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	b2c2      	uxtb	r2, r0
 8001246:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	1c59      	adds	r1, r3, #1
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6011      	str	r1, [r2, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	int32_t res = ((uint32_t) buffer[*index]) << 24
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	061a      	lsls	r2, r3, #24
			| ((uint32_t) buffer[*index + 1]) << 16
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	440b      	add	r3, r1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	431a      	orrs	r2, r3
			| ((uint32_t) buffer[*index + 2]) << 8
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3302      	adds	r3, #2
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	440b      	add	r3, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4313      	orrs	r3, r2
			| ((uint32_t) buffer[*index + 3]);
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	3203      	adds	r2, #3
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	440a      	add	r2, r1
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	4313      	orrs	r3, r2
	int32_t res = ((uint32_t) buffer[*index]) << 24
 80012ae:	60fb      	str	r3, [r7, #12]
	*index += 4;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1d1a      	adds	r2, r3, #4
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	601a      	str	r2, [r3, #0]
	return res;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
	...

080012c8 <comm_can_transmit_eid>:

void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	4613      	mov	r3, r2
 80012d4:	71fb      	strb	r3, [r7, #7]
	if (len > 8) {
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d901      	bls.n	80012e0 <comm_can_transmit_eid+0x18>
		len = 8;
 80012dc:	2308      	movs	r3, #8
 80012de:	71fb      	strb	r3, [r7, #7]
	}

	TxHeader.IDE = CAN_ID_EXT;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <comm_can_transmit_eid+0x50>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = id;
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <comm_can_transmit_eid+0x50>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <comm_can_transmit_eid+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = len;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a08      	ldr	r2, [pc, #32]	; (8001318 <comm_can_transmit_eid+0x50>)
 80012f6:	6113      	str	r3, [r2, #16]
	memcpy(TxData, data, len);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <comm_can_transmit_eid+0x54>)
 8001300:	f006 f824 	bl	800734c <memcpy>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <comm_can_transmit_eid+0x58>)
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <comm_can_transmit_eid+0x54>)
 8001308:	4903      	ldr	r1, [pc, #12]	; (8001318 <comm_can_transmit_eid+0x50>)
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <comm_can_transmit_eid+0x5c>)
 800130c:	f001 fb82 	bl	8002a14 <HAL_CAN_AddTxMessage>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000c8 	.word	0x200000c8
 800131c:	200000e0 	.word	0x200000e0
 8001320:	200000f0 	.word	0x200000f0
 8001324:	20000438 	.word	0x20000438

08001328 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) (duty * 100.0), &send_index);
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f7ff f86d 	bl	8000418 <__aeabi_f2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <comm_can_set_duty+0x58>)
 8001344:	f7ff f8c0 	bl	80004c8 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff facc 	bl	80008ec <__aeabi_d2iz>
 8001354:	4601      	mov	r1, r0
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff48 	bl	80011f4 <buffer_append_int32>
	comm_can_transmit_eid(
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffa8 	bl	80012c8 <comm_can_transmit_eid>
			controller_id | ((uint32_t) CAN_PACKET_SET_DUTY_GEN << 8), buffer,
			send_index);
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40590000 	.word	0x40590000

08001384 <comm_can_db_signal>:

void comm_can_db_signal(uint8_t controller_id, int command) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t) command, &send_index);
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff28 	bl	80011f4 <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t) 35 << 8), buffer,
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f107 0108 	add.w	r1, r7, #8
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff88 	bl	80012c8 <comm_can_transmit_eid>
			send_index);
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <vApplicationGetIdleTaskMemory+0x28>)
 80013d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <vApplicationGetIdleTaskMemory+0x2c>)
 80013d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000140 	.word	0x20000140
 80013ec:	200001f4 	.word	0x200001f4

080013f0 <delay_s>:

	return value * 60 * 1000;

}

void delay_s(uint8_t value) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	osDelay(value * 1000);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fddf 	bl	8005fc8 <osDelay>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <backWash>:

void delay_m(uint8_t value) {
	osDelay(value * 1000 * 60);
}

void backWash(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

	Control_Valve_1(OFF);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 fbe2 	bl	8001be4 <Control_Valve_1>
	//osDelay(1000); // delay menghabiskan air pada selang
	Pump_1(OFF);
 8001420:	2001      	movs	r0, #1
 8001422:	f000 fc1d 	bl	8001c60 <Pump_1>
	delay_s(2); // delay menghabiskan air pada selang
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff ffe2 	bl	80013f0 <delay_s>
	Ozone(OFF);
 800142c:	2001      	movs	r0, #1
 800142e:	f000 fc05 	bl	8001c3c <Ozone>
	Compressor(OFF);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fbe8 	bl	8001c08 <Compressor>
	flagBackwash = 0; // memulai rekam waktu filtrasi rdf sampai tersumbat
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <backWash+0x88>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
	//Pump_2(OFF);

	delay_s(10);
 800143e:	200a      	movs	r0, #10
 8001440:	f7ff ffd6 	bl	80013f0 <delay_s>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 8001444:	2100      	movs	r1, #0
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff9c 	bl	8001384 <comm_can_db_signal>
	delay_s(5);
 800144c:	2005      	movs	r0, #5
 800144e:	f7ff ffcf 	bl	80013f0 <delay_s>
	comm_can_db_signal(0, 4); // mengirim sinyal ke driver untuk backwash
 8001452:	2104      	movs	r1, #4
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff95 	bl	8001384 <comm_can_db_signal>
	delay_s(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff ffc8 	bl	80013f0 <delay_s>
	Pump_3(ON); // pompa backwash menyala
 8001460:	2000      	movs	r0, #0
 8001462:	f000 fc21 	bl	8001ca8 <Pump_3>

	uint8_t i = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]

	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 800146a:	e006      	b.n	800147a <backWash+0x66>
		osDelay(1000);
 800146c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001470:	f004 fdaa 	bl	8005fc8 <osDelay>
		i++;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	3301      	adds	r3, #1
 8001478:	71fb      	strb	r3, [r7, #7]
	while (i <= 30) { //menunggu sinyal dari driver bahwa backwash telah selesai
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b1e      	cmp	r3, #30
 800147e:	d9f5      	bls.n	800146c <backWash+0x58>
	}
	Pump_3(OFF); //pompa backwash mati
 8001480:	2001      	movs	r0, #1
 8001482:	f000 fc11 	bl	8001ca8 <Pump_3>
	comm_can_db_signal(0, 0); // mengirim sinyal ke driver untuk mematikan rdf
 8001486:	2100      	movs	r1, #0
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ff7b 	bl	8001384 <comm_can_db_signal>
	delay_s(5);
 800148e:	2005      	movs	r0, #5
 8001490:	f7ff ffae 	bl	80013f0 <delay_s>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000401 	.word	0x20000401

080014a0 <process2>:

void process2(void) // opsi sensor water level
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	delay_s(2);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff ffa3 	bl	80013f0 <delay_s>
//		mode = 0;
//		comm_can_db_signal(0, 0);
//		return;
//	}

	flagTimerEAB = 1;
 80014aa:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <process2+0x13c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
	while (timerEAB < 1800) {
 80014b0:	e005      	b.n	80014be <process2+0x1e>
		EAB(ON);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fb6e 	bl	8001b94 <EAB>
		delay_s(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ff99 	bl	80013f0 <delay_s>
	while (timerEAB < 1800) {
 80014be:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <process2+0x140>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014c6:	d3f4      	bcc.n	80014b2 <process2+0x12>
	}
	EAB(OFF);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f000 fb63 	bl	8001b94 <EAB>
	flagTimerEAB = 0;
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <process2+0x13c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]

	flagRecoveryEAB = 1;
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <process2+0x144>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
	while (timerRecoveryEAB < 600) {
 80014da:	e002      	b.n	80014e2 <process2+0x42>
		delay_s(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ff87 	bl	80013f0 <delay_s>
	while (timerRecoveryEAB < 600) {
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <process2+0x148>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80014ea:	d3f7      	bcc.n	80014dc <process2+0x3c>
	}
	flagRecoveryEAB = 0;
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <process2+0x144>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]

	label2:

	comm_can_set_duty(0, 95);
 80014f2:	493e      	ldr	r1, [pc, #248]	; (80015ec <process2+0x14c>)
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ff17 	bl	8001328 <comm_can_set_duty>
	comm_can_db_signal(0, 2); // megirim sinyal untuk memutarkan HVRDF
 80014fa:	2102      	movs	r1, #2
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff ff41 	bl	8001384 <comm_can_db_signal>

	delay_s(7); //delay untuk menunggu rdf putaran penuh
 8001502:	2007      	movs	r0, #7
 8001504:	f7ff ff74 	bl	80013f0 <delay_s>

	Control_Valve_1(ON);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 fb6b 	bl	8001be4 <Control_Valve_1>
	Pump_1(ON);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 fba6 	bl	8001c60 <Pump_1>
	Ozone(ON);
 8001514:	2000      	movs	r0, #0
 8001516:	f000 fb91 	bl	8001c3c <Ozone>
	Compressor(ON);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 fb74 	bl	8001c08 <Compressor>
	Pump_2(ON);
 8001520:	2000      	movs	r0, #0
 8001522:	f000 fbaf 	bl	8001c84 <Pump_2>

	flagBackwash = 1; // penanda start backwash untuk perhitungan lamanya filter tersumbat
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <process2+0x150>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
	lamaMampet = 0; // reset waktu mampet filter
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <process2+0x154>)
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]

	delay_s(30);
 8001532:	201e      	movs	r0, #30
 8001534:	f7ff ff5c 	bl	80013f0 <delay_s>

	while (1) {

		osDelay(3000);
 8001538:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800153c:	f004 fd44 	bl	8005fc8 <osDelay>
		if (flow < 4 || level == 1) {
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <process2+0x158>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fba3 	bl	8000c94 <__aeabi_fcmplt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d103      	bne.n	800155c <process2+0xbc>
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <process2+0x15c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d1ed      	bne.n	8001538 <process2+0x98>
			countBackwash++;
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <process2+0x160>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a27      	ldr	r2, [pc, #156]	; (8001600 <process2+0x160>)
 8001564:	6013      	str	r3, [r2, #0]
			delay_s(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff ff42 	bl	80013f0 <delay_s>
			setCountBackwash(countBackwash);
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <process2+0x160>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f891 	bl	8001698 <setCountBackwash>
			dataCan[0] = countBackwash;
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <process2+0x160>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <process2+0x164>)
 800157e:	701a      	strb	r2, [r3, #0]
			dataCan[1] = lamaMampet & 0x00ff;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <process2+0x154>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <process2+0x164>)
 8001588:	705a      	strb	r2, [r3, #1]
			dataCan[2] = (lamaMampet & 0xff00) >> 8;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <process2+0x154>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <process2+0x164>)
 8001596:	709a      	strb	r2, [r3, #2]
			comm_can_transmit_eid(4, dataCan, 8);
 8001598:	2208      	movs	r2, #8
 800159a:	491a      	ldr	r1, [pc, #104]	; (8001604 <process2+0x164>)
 800159c:	2004      	movs	r0, #4
 800159e:	f7ff fe93 	bl	80012c8 <comm_can_transmit_eid>
			backWash();
 80015a2:	f7ff ff37 	bl	8001414 <backWash>
			break;
 80015a6:	bf00      	nop
		}
	}

	if (level == 1) {
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <process2+0x15c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d100      	bne.n	80015b2 <process2+0x112>
 80015b0:	e79f      	b.n	80014f2 <process2+0x52>
		goto label2;
		// kembali ke awal
	}

	delay_s(3);
 80015b2:	2003      	movs	r0, #3
 80015b4:	f7ff ff1c 	bl	80013f0 <delay_s>
	Pump_2(OFF);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f000 fb63 	bl	8001c84 <Pump_2>
	mode = 0;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <process2+0x168>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
	countProcess++;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <process2+0x16c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <process2+0x16c>)
 80015cc:	6013      	str	r3, [r2, #0]
	setCountProcess(countProcess);
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <process2+0x16c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f871 	bl	80016ba <setCountProcess>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000402 	.word	0x20000402
 80015e0:	20000410 	.word	0x20000410
 80015e4:	20000403 	.word	0x20000403
 80015e8:	20000414 	.word	0x20000414
 80015ec:	42be0000 	.word	0x42be0000
 80015f0:	20000401 	.word	0x20000401
 80015f4:	2000041c 	.word	0x2000041c
 80015f8:	20000430 	.word	0x20000430
 80015fc:	20000400 	.word	0x20000400
 8001600:	20000420 	.word	0x20000420
 8001604:	20000408 	.word	0x20000408
 8001608:	20000418 	.word	0x20000418
 800160c:	20000424 	.word	0x20000424

08001610 <setMode>:

void setMode(uint32_t value) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, MODE, value);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fa95 	bl	8000b48 <__aeabi_ui2f>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fc39 	bl	8000e9c <EEPROM_Write_NUM>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <setTimerEAB>:

void setTimerEAB(uint32_t value) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMEREAB, value);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fa84 	bl	8000b48 <__aeabi_ui2f>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	2104      	movs	r1, #4
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fc28 	bl	8000e9c <EEPROM_Write_NUM>

}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <setLamaPakaiEAB>:

void setLamaPakaiEAB(uint32_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPAKAIEAB, value);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fa73 	bl	8000b48 <__aeabi_ui2f>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	2118      	movs	r1, #24
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff fc17 	bl	8000e9c <EEPROM_Write_NUM>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <setTimerRcoveryEAB>:

void setTimerRcoveryEAB(uint32_t value) {
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, TIMERRECOVERYEAB, value);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fa62 	bl	8000b48 <__aeabi_ui2f>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	211c      	movs	r1, #28
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fc06 	bl	8000e9c <EEPROM_Write_NUM>

}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <setCountBackwash>:
//	dataWrite[2] = value;
//	Flash_Write_Data(ADDRESS, (uint32_t*) value, 10);

}

void setCountBackwash(uint32_t value) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTBACKWASH, value);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fa51 	bl	8000b48 <__aeabi_ui2f>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	210c      	movs	r1, #12
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fbf5 	bl	8000e9c <EEPROM_Write_NUM>

}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <setCountProcess>:

void setCountProcess(uint32_t value) {
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, COUNTPROCESS, value);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fa40 	bl	8000b48 <__aeabi_ui2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	2110      	movs	r1, #16
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fbe4 	bl	8000e9c <EEPROM_Write_NUM>

}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <setLamaProcess>:

void setLamaProcess(uint32_t value) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

	EEPROM_Write_NUM(1, LAMAPROCESS, value);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fa2f 	bl	8000b48 <__aeabi_ui2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	2114      	movs	r1, #20
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fbd3 	bl	8000e9c <EEPROM_Write_NUM>

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <Task2>:

// kumpulan task freeRTOS

void Task2(void const *argument) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <Task2+0x74>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d026      	beq.n	800175e <Task2+0x5e>
				{

		}

		else if (mode == 2) // mode 2 untuk opsi menggunakan sensor water level
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <Task2+0x74>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d102      	bne.n	800171e <Task2+0x1e>
				{
			process2();
 8001718:	f7ff fec2 	bl	80014a0 <process2>
 800171c:	e01f      	b.n	800175e <Task2+0x5e>
		}

		else if (mode == 3) // mode 2 untuk opsi menggunakan sensor water level
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <Task2+0x74>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d01b      	beq.n	800175e <Task2+0x5e>
				{
		}

		else if (mode == 0) {
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <Task2+0x74>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d117      	bne.n	800175e <Task2+0x5e>
			lamaProcess = 0;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <Task2+0x78>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
			setLamaProcess(lamaProcess);
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <Task2+0x78>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ffcf 	bl	80016dc <setLamaProcess>
			timerEAB = 0;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <Task2+0x7c>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
			setTimerEAB(timerEAB);
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <Task2+0x7c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff72 	bl	8001632 <setTimerEAB>
			timerRecoveryEAB = 0;
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <Task2+0x80>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <Task2+0x80>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff8c 	bl	8001676 <setTimerRcoveryEAB>
		}
		osDelay(1000);
 800175e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001762:	f004 fc31 	bl	8005fc8 <osDelay>
		coba++;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <Task2+0x84>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <Task2+0x84>)
 8001770:	701a      	strb	r2, [r3, #0]
		if (mode == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8001772:	e7c9      	b.n	8001708 <Task2+0x8>
 8001774:	20000418 	.word	0x20000418
 8001778:	20000428 	.word	0x20000428
 800177c:	20000410 	.word	0x20000410
 8001780:	20000414 	.word	0x20000414
 8001784:	20000404 	.word	0x20000404

08001788 <TaskTimer>:

	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {

		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <TaskTimer+0xe8>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d127      	bne.n	80017ec <TaskTimer+0x64>
			timerEAB++;
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <TaskTimer+0xec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a34      	ldr	r2, [pc, #208]	; (8001874 <TaskTimer+0xec>)
 80017a4:	6013      	str	r3, [r2, #0]
			i = timerEAB;
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <TaskTimer+0xec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
			setTimerEAB(timerEAB);
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <TaskTimer+0xec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff3e 	bl	8001632 <setTimerEAB>
			if (i % 60 == 0 && i > 60) {
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <TaskTimer+0xf0>)
 80017ba:	fba3 2301 	umull	r2, r3, r3, r1
 80017be:	095a      	lsrs	r2, r3, #5
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	1aca      	subs	r2, r1, r3
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d10e      	bne.n	80017ec <TaskTimer+0x64>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b3c      	cmp	r3, #60	; 0x3c
 80017d2:	d90b      	bls.n	80017ec <TaskTimer+0x64>
				lamaPakaiEAB++;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <TaskTimer+0xf4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <TaskTimer+0xf4>)
 80017dc:	6013      	str	r3, [r2, #0]
				setLamaPakaiEAB(lamaPakaiEAB);
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <TaskTimer+0xf4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff36 	bl	8001654 <setLamaPakaiEAB>
				i = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
			}
		}

		if (flagRecoveryEAB == 1) {
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <TaskTimer+0xf8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d109      	bne.n	8001808 <TaskTimer+0x80>
			timerRecoveryEAB++;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <TaskTimer+0xfc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a22      	ldr	r2, [pc, #136]	; (8001884 <TaskTimer+0xfc>)
 80017fc:	6013      	str	r3, [r2, #0]
			setTimerRcoveryEAB(timerRecoveryEAB);
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <TaskTimer+0xfc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff37 	bl	8001676 <setTimerRcoveryEAB>
		}

		if (flagBackwash == 1) {
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <TaskTimer+0x100>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <TaskTimer+0x94>
			lamaMampet++;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <TaskTimer+0x104>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <TaskTimer+0x104>)
 800181a:	801a      	strh	r2, [r3, #0]
		}

		if (mode == 2) {
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <TaskTimer+0x108>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d109      	bne.n	8001838 <TaskTimer+0xb0>
			lamaProcess++;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <TaskTimer+0x10c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <TaskTimer+0x10c>)
 800182c:	6013      	str	r3, [r2, #0]
			setLamaProcess(lamaProcess);
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <TaskTimer+0x10c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff52 	bl	80016dc <setLamaProcess>
		}

		flow = signalCounter / 7.5;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <TaskTimer+0x110>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fdd9 	bl	80003f4 <__aeabi_i2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <TaskTimer+0x114>)
 8001848:	f7fe ff68 	bl	800071c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f872 	bl	800093c <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <TaskTimer+0x118>)
 800185c:	6013      	str	r3, [r2, #0]
		signalCounter = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <TaskTimer+0x110>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f004 fbae 	bl	8005fc8 <osDelay>
		if (flagTimerEAB == 1) { // jika mode bernilai 1 maka timer eab akan mulai hitung
 800186c:	e792      	b.n	8001794 <TaskTimer+0xc>
 800186e:	bf00      	nop
 8001870:	20000402 	.word	0x20000402
 8001874:	20000410 	.word	0x20000410
 8001878:	88888889 	.word	0x88888889
 800187c:	2000042c 	.word	0x2000042c
 8001880:	20000403 	.word	0x20000403
 8001884:	20000414 	.word	0x20000414
 8001888:	20000401 	.word	0x20000401
 800188c:	2000041c 	.word	0x2000041c
 8001890:	20000418 	.word	0x20000418
 8001894:	20000428 	.word	0x20000428
 8001898:	20000434 	.word	0x20000434
 800189c:	401e0000 	.word	0x401e0000
 80018a0:	20000430 	.word	0x20000430

080018a4 <TaskFlow>:

	}
	/* USER CODE END 5 */
}

void TaskFlow(void const *argument) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80018ac:	2120      	movs	r1, #32
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <TaskFlow+0x54>)
 80018b0:	f001 ff48 	bl	8003744 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73bb      	strb	r3, [r7, #14]
	uint8_t stateSensorPrv = -1;
 80018b8:	23ff      	movs	r3, #255	; 0xff
 80018ba:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80018bc:	2120      	movs	r1, #32
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <TaskFlow+0x54>)
 80018c0:	f001 ff40 	bl	8003744 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73bb      	strb	r3, [r7, #14]
		level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));
 80018c8:	2110      	movs	r1, #16
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <TaskFlow+0x54>)
 80018cc:	f001 ff3a 	bl	8003744 <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <TaskFlow+0x58>)
 80018d6:	701a      	strb	r2, [r3, #0]
		if (stateSensorNow != stateSensorPrv) {
 80018d8:	7bba      	ldrb	r2, [r7, #14]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d006      	beq.n	80018ee <TaskFlow+0x4a>
			signalCounter++;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <TaskFlow+0x5c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <TaskFlow+0x5c>)
 80018e8:	6013      	str	r3, [r2, #0]
			stateSensorPrv = stateSensorNow;
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f004 fb6a 	bl	8005fc8 <osDelay>
		stateSensorNow = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80018f4:	e7e2      	b.n	80018bc <TaskFlow+0x18>
 80018f6:	bf00      	nop
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	20000400 	.word	0x20000400
 8001900:	20000434 	.word	0x20000434

08001904 <fungsiInit>:
	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0

	gpio_init();
 800190a:	f000 f8b1 	bl	8001a70 <gpio_init>

	// pembacaan eeprom
	mode = EEPROM_Read_NUM(1, MODE);
 800190e:	2100      	movs	r1, #0
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff fadb 	bl	8000ecc <EEPROM_Read_NUM>
 8001916:	4603      	mov	r3, r0
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f9e3 	bl	8000ce4 <__aeabi_f2uiz>
 800191e:	4603      	mov	r3, r0
 8001920:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <fungsiInit+0x138>)
 8001922:	6013      	str	r3, [r2, #0]
	timerEAB = EEPROM_Read_NUM(1, TIMEREAB);
 8001924:	2104      	movs	r1, #4
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff fad0 	bl	8000ecc <EEPROM_Read_NUM>
 800192c:	4603      	mov	r3, r0
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9d8 	bl	8000ce4 <__aeabi_f2uiz>
 8001934:	4603      	mov	r3, r0
 8001936:	4a42      	ldr	r2, [pc, #264]	; (8001a40 <fungsiInit+0x13c>)
 8001938:	6013      	str	r3, [r2, #0]
	countBackwash = EEPROM_Read_NUM(1, COUNTBACKWASH);
 800193a:	210c      	movs	r1, #12
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff fac5 	bl	8000ecc <EEPROM_Read_NUM>
 8001942:	4603      	mov	r3, r0
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f9cd 	bl	8000ce4 <__aeabi_f2uiz>
 800194a:	4603      	mov	r3, r0
 800194c:	4a3d      	ldr	r2, [pc, #244]	; (8001a44 <fungsiInit+0x140>)
 800194e:	6013      	str	r3, [r2, #0]
	countProcess = EEPROM_Read_NUM(1, COUNTPROCESS);
 8001950:	2110      	movs	r1, #16
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff faba 	bl	8000ecc <EEPROM_Read_NUM>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9c2 	bl	8000ce4 <__aeabi_f2uiz>
 8001960:	4603      	mov	r3, r0
 8001962:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <fungsiInit+0x144>)
 8001964:	6013      	str	r3, [r2, #0]
	lamaProcess = EEPROM_Read_NUM(1, LAMAPROCESS);
 8001966:	2114      	movs	r1, #20
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff faaf 	bl	8000ecc <EEPROM_Read_NUM>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f9b7 	bl	8000ce4 <__aeabi_f2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	4a34      	ldr	r2, [pc, #208]	; (8001a4c <fungsiInit+0x148>)
 800197a:	6013      	str	r3, [r2, #0]
	lamaPakaiEAB = EEPROM_Read_NUM(1, LAMAPAKAIEAB);
 800197c:	2118      	movs	r1, #24
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff faa4 	bl	8000ecc <EEPROM_Read_NUM>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f9ac 	bl	8000ce4 <__aeabi_f2uiz>
 800198c:	4603      	mov	r3, r0
 800198e:	4a30      	ldr	r2, [pc, #192]	; (8001a50 <fungsiInit+0x14c>)
 8001990:	6013      	str	r3, [r2, #0]
	timerRecoveryEAB = EEPROM_Read_NUM(1, TIMERRECOVERYEAB);
 8001992:	211c      	movs	r1, #28
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff fa99 	bl	8000ecc <EEPROM_Read_NUM>
 800199a:	4603      	mov	r3, r0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f9a1 	bl	8000ce4 <__aeabi_f2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <fungsiInit+0x150>)
 80019a6:	6013      	str	r3, [r2, #0]

	mode = 2;
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <fungsiInit+0x138>)
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
	setMode(mode);
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <fungsiInit+0x138>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe2c 	bl	8001610 <setMode>
	setLamaPakaiEAB(600);
 80019b8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80019bc:	f7ff fe4a 	bl	8001654 <setLamaPakaiEAB>
	setCountBackwash(102);
 80019c0:	2066      	movs	r0, #102	; 0x66
 80019c2:	f7ff fe69 	bl	8001698 <setCountBackwash>

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 128);
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <fungsiInit+0x154>)
 80019c8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80019cc:	461d      	mov	r5, r3
 80019ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 80019da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 faa5 	bl	8005f30 <osThreadCreate>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <fungsiInit+0x158>)
 80019ea:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 128);
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <fungsiInit+0x15c>)
 80019ee:	f107 0420 	add.w	r4, r7, #32
 80019f2:	461d      	mov	r5, r3
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fa92 	bl	8005f30 <osThreadCreate>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <fungsiInit+0x160>)
 8001a10:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskFlow, TaskFlow, osPriorityBelowNormal, 0, 128);
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <fungsiInit+0x164>)
 8001a14:	1d3c      	adds	r4, r7, #4
 8001a16:	461d      	mov	r5, r3
 8001a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFlowHandle = osThreadCreate(osThread(TaskFlow), NULL);
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fa81 	bl	8005f30 <osThreadCreate>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <fungsiInit+0x168>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	3758      	adds	r7, #88	; 0x58
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	20000418 	.word	0x20000418
 8001a40:	20000410 	.word	0x20000410
 8001a44:	20000420 	.word	0x20000420
 8001a48:	20000424 	.word	0x20000424
 8001a4c:	20000428 	.word	0x20000428
 8001a50:	2000042c 	.word	0x2000042c
 8001a54:	20000414 	.word	0x20000414
 8001a58:	0800752c 	.word	0x0800752c
 8001a5c:	200003f8 	.word	0x200003f8
 8001a60:	08007548 	.word	0x08007548
 8001a64:	200003f4 	.word	0x200003f4
 8001a68:	08007564 	.word	0x08007564
 8001a6c:	200003fc 	.word	0x200003fc

08001a70 <gpio_init>:
 *      Author: rangga
 */
#include <gpio.h>
#include "stm32f1xx.h"

void gpio_init(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <gpio_init+0x114>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <gpio_init+0x114>)
 8001a8a:	f043 0320 	orr.w	r3, r3, #32
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <gpio_init+0x114>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <gpio_init+0x114>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <gpio_init+0x114>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <gpio_init+0x114>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <gpio_init+0x114>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <gpio_init+0x114>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <gpio_init+0x114>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <gpio_init+0x114>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <gpio_init+0x114>)
 8001ad2:	f043 0310 	orr.w	r3, r3, #16
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <gpio_init+0x114>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f647 4103 	movw	r1, #31747	; 0x7c03
 8001aea:	4827      	ldr	r0, [pc, #156]	; (8001b88 <gpio_init+0x118>)
 8001aec:	f001 fe41 	bl	8003772 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
	GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001af6:	4825      	ldr	r0, [pc, #148]	; (8001b8c <gpio_init+0x11c>)
 8001af8:	f001 fe3b 	bl	8003772 <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
	GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b02:	4823      	ldr	r0, [pc, #140]	; (8001b90 <gpio_init+0x120>)
 8001b04:	f001 fe35 	bl	8003772 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 8001b08:	f647 4303 	movw	r3, #31747	; 0x7c03
 8001b0c:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <gpio_init+0x118>)
 8001b22:	f001 fc8b 	bl	800343c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001b26:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001b2a:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4813      	ldr	r0, [pc, #76]	; (8001b8c <gpio_init+0x11c>)
 8001b40:	f001 fc7c 	bl	800343c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <gpio_init+0x120>)
 8001b5e:	f001 fc6d 	bl	800343c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_4;
 8001b62:	2330      	movs	r3, #48	; 0x30
 8001b64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4619      	mov	r1, r3
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <gpio_init+0x118>)
 8001b76:	f001 fc61 	bl	800343c <HAL_GPIO_Init>
//
//	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001b7a:	bf00      	nop
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010c00 	.word	0x40010c00
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	40011000 	.word	0x40011000

08001b94 <EAB>:

void EAB(uint8_t value) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, value);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <EAB+0x48>)
 8001ba8:	f001 fde3 	bl	8003772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, value);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <EAB+0x4c>)
 8001bb4:	f001 fddd 	bl	8003772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <EAB+0x4c>)
 8001bc2:	f001 fdd6 	bl	8003772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bce:	4804      	ldr	r0, [pc, #16]	; (8001be0 <EAB+0x4c>)
 8001bd0:	f001 fdcf 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40010800 	.word	0x40010800
 8001be0:	40010c00 	.word	0x40010c00

08001be4 <Control_Valve_1>:

void Control_Valve_1(uint8_t value) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, value);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <Control_Valve_1+0x20>)
 8001bf6:	f001 fdbc 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40010c00 	.word	0x40010c00

08001c08 <Compressor>:

void Control_Valve_5(uint8_t value) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, value);
}

void Compressor(uint8_t value) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <Compressor+0x30>)
 8001c1c:	f001 fda9 	bl	8003772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value);
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <Compressor+0x30>)
 8001c2a:	f001 fda2 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <Ozone>:

void Ozone(uint8_t value) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <Ozone+0x20>)
 8001c50:	f001 fd8f 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40010c00 	.word	0x40010c00

08001c60 <Pump_1>:

void Pump_1(uint8_t value) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, value);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2108      	movs	r1, #8
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <Pump_1+0x20>)
 8001c72:	f001 fd7e 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40010800 	.word	0x40010800

08001c84 <Pump_2>:

void Pump_2(uint8_t value) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, value);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	461a      	mov	r2, r3
 8001c92:	2104      	movs	r1, #4
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <Pump_2+0x20>)
 8001c96:	f001 fd6c 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <Pump_3>:

void Pump_3(uint8_t value) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, value);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <Pump_3+0x20>)
 8001cba:	f001 fd5a 	bl	8003772 <HAL_GPIO_WritePin>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40010800 	.word	0x40010800

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd2:	f000 fc41 	bl	8002558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd6:	f000 f825 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cda:	f000 f9b1 	bl	8002040 <MX_GPIO_Init>
  MX_CAN_Init();
 8001cde:	f000 f867 	bl	8001db0 <MX_CAN_Init>
  MX_TIM2_Init();
 8001ce2:	f000 f8eb 	bl	8001ebc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ce6:	f000 f95d 	bl	8001fa4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001cea:	f000 f8b9 	bl	8001e60 <MX_I2C1_Init>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	fungsiInit();
 8001cee:	f7ff fe09 	bl	8001904 <fungsiInit>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <main+0x50>)
 8001cf4:	1d3c      	adds	r4, r7, #4
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 f911 	bl	8005f30 <osThreadCreate>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <main+0x54>)
 8001d12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d14:	f004 f905 	bl	8005f22 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001d18:	e7fe      	b.n	8001d18 <main+0x4c>
 8001d1a:	bf00      	nop
 8001d1c:	0800758c 	.word	0x0800758c
 8001d20:	20000544 	.word	0x20000544

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b090      	sub	sp, #64	; 0x40
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 0318 	add.w	r3, r7, #24
 8001d2e:	2228      	movs	r2, #40	; 0x28
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f005 fb18 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fd31 	bl	80047d4 <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d78:	f000 f9f8 	bl	800216c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2102      	movs	r1, #2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 ff9e 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001da2:	f000 f9e3 	bl	800216c <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3740      	adds	r7, #64	; 0x40
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001db8:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <MX_CAN_Init+0xac>)
 8001dba:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dbe:	2212      	movs	r2, #18
 8001dc0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dd4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e00:	4815      	ldr	r0, [pc, #84]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001e02:	f000 fbff 	bl	8002604 <HAL_CAN_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001e0c:	f000 f9ae 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8001e14:	230a      	movs	r3, #10
 8001e16:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001e3e:	f000 fcdc 	bl	80027fa <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001e44:	f000 fda2 	bl	800298c <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001e48:	2110      	movs	r1, #16
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_CAN_Init+0xa8>)
 8001e4c:	f000 ffcd 	bl	8002dea <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000438 	.word	0x20000438
 8001e5c:	40006400 	.word	0x40006400

08001e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e66:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <MX_I2C1_Init+0x54>)
 8001e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <MX_I2C1_Init+0x58>)
 8001e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e9c:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e9e:	f001 fc99 	bl	80037d4 <HAL_I2C_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea8:	f000 f960 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000460 	.word	0x20000460
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	00061a80 	.word	0x00061a80

08001ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eda:	463b      	mov	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001ef0:	2247      	movs	r2, #71	; 0x47
 8001ef2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001efc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f02:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f0e:	4824      	ldr	r0, [pc, #144]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f10:	f003 f896 	bl	8005040 <HAL_TIM_Base_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001f1a:	f000 f927 	bl	800216c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f2c:	f003 fc24 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f36:	f000 f919 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f3a:	4819      	ldr	r0, [pc, #100]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f3c:	f003 f922 	bl	8005184 <HAL_TIM_IC_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f46:	f000 f911 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	4619      	mov	r1, r3
 8001f58:	4811      	ldr	r0, [pc, #68]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f5a:	f003 ff5b 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001f64:	f000 f902 	bl	800216c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f80:	f003 fb66 	bl	8005650 <HAL_TIM_IC_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001f8a:	f000 f8ef 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <MX_TIM2_Init+0xe4>)
 8001f92:	f003 f94f 	bl	8005234 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200004b4 	.word	0x200004b4

08001fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <MX_TIM3_Init+0x98>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fc8:	2247      	movs	r2, #71	; 0x47
 8001fca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fe8:	f003 f82a 	bl	8005040 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f000 f8bb 	bl	800216c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4619      	mov	r1, r3
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <MX_TIM3_Init+0x94>)
 8002004:	f003 fbb8 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800200e:	f000 f8ad 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <MX_TIM3_Init+0x94>)
 8002020:	f003 fef8 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800202a:	f000 f89f 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200004fc 	.word	0x200004fc
 800203c:	40000400 	.word	0x40000400

08002040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <MX_GPIO_Init+0xc4>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <MX_GPIO_Init+0xc4>)
 800205a:	f043 0320 	orr.w	r3, r3, #32
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <MX_GPIO_Init+0xc4>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <MX_GPIO_Init+0xc4>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a24      	ldr	r2, [pc, #144]	; (8002104 <MX_GPIO_Init+0xc4>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <MX_GPIO_Init+0xc4>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <MX_GPIO_Init+0xc4>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <MX_GPIO_Init+0xc4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <MX_GPIO_Init+0xc4>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a2:	4819      	ldr	r0, [pc, #100]	; (8002108 <MX_GPIO_Init+0xc8>)
 80020a4:	f001 fb65 	bl	8003772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ae:	4817      	ldr	r0, [pc, #92]	; (800210c <MX_GPIO_Init+0xcc>)
 80020b0:	f001 fb5f 	bl	8003772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2118      	movs	r1, #24
 80020b8:	4813      	ldr	r0, [pc, #76]	; (8002108 <MX_GPIO_Init+0xc8>)
 80020ba:	f001 fb5a 	bl	8003772 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4;
 80020be:	f640 0318 	movw	r3, #2072	; 0x818
 80020c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4619      	mov	r1, r3
 80020d6:	480c      	ldr	r0, [pc, #48]	; (8002108 <MX_GPIO_Init+0xc8>)
 80020d8:	f001 f9b0 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_GPIO_Init+0xcc>)
 80020f6:	f001 f9a1 	bl	800343c <HAL_GPIO_Init>

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	40010c00 	.word	0x40010c00
 800210c:	40010800 	.word	0x40010800

08002110 <StartDefaultTask>:
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
		for (uint8_t a = 0; a < 8; a++) {
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e00a      	b.n	8002134 <StartDefaultTask+0x24>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800211e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <StartDefaultTask+0x34>)
 8002124:	f001 fb3d 	bl	80037a2 <HAL_GPIO_TogglePin>
			osDelay(50);
 8002128:	2032      	movs	r0, #50	; 0x32
 800212a:	f003 ff4d 	bl	8005fc8 <osDelay>
		for (uint8_t a = 0; a < 8; a++) {
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3301      	adds	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b07      	cmp	r3, #7
 8002138:	d9f1      	bls.n	800211e <StartDefaultTask+0xe>
		}
		osDelay(500);
 800213a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800213e:	f003 ff43 	bl	8005fc8 <osDelay>
		for (uint8_t a = 0; a < 8; a++) {
 8002142:	e7e9      	b.n	8002118 <StartDefaultTask+0x8>
 8002144:	40011000 	.word	0x40011000

08002148 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800215a:	f000 fa13 	bl	8002584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40000800 	.word	0x40000800

0800216c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002174:	e7fe      	b.n	8002174 <Error_Handler+0x8>
	...

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_MspInit+0x68>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_MspInit+0x68>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_MspInit+0x68>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_MspInit+0x68>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_MspInit+0x68>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_MspInit+0x68>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	210f      	movs	r1, #15
 80021b2:	f06f 0001 	mvn.w	r0, #1
 80021b6:	f001 f916 	bl	80033e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_MspInit+0x6c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_MspInit+0x6c>)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010000 	.word	0x40010000

080021e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_CAN_MspInit+0x9c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d139      	bne.n	800227c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_CAN_MspInit+0xa0>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_CAN_MspInit+0xa0>)
 800220e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <HAL_CAN_MspInit+0xa0>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_CAN_MspInit+0xa0>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_CAN_MspInit+0xa0>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_CAN_MspInit+0xa0>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800223c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4619      	mov	r1, r3
 800224c:	480f      	ldr	r0, [pc, #60]	; (800228c <HAL_CAN_MspInit+0xa4>)
 800224e:	f001 f8f5 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4619      	mov	r1, r3
 8002266:	4809      	ldr	r0, [pc, #36]	; (800228c <HAL_CAN_MspInit+0xa4>)
 8002268:	f001 f8e8 	bl	800343c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2105      	movs	r1, #5
 8002270:	2015      	movs	r0, #21
 8002272:	f001 f8b8 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002276:	2015      	movs	r0, #21
 8002278:	f001 f8d1 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40006400 	.word	0x40006400
 8002288:	40021000 	.word	0x40021000
 800228c:	40010800 	.word	0x40010800

08002290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_I2C_MspInit+0x70>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d123      	bne.n	80022f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_I2C_MspInit+0x74>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a13      	ldr	r2, [pc, #76]	; (8002304 <HAL_I2C_MspInit+0x74>)
 80022b6:	f043 0308 	orr.w	r3, r3, #8
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_I2C_MspInit+0x74>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022cc:	2312      	movs	r3, #18
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4619      	mov	r1, r3
 80022da:	480b      	ldr	r0, [pc, #44]	; (8002308 <HAL_I2C_MspInit+0x78>)
 80022dc:	f001 f8ae 	bl	800343c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_I2C_MspInit+0x74>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_I2C_MspInit+0x74>)
 80022e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ea:	61d3      	str	r3, [r2, #28]
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_I2C_MspInit+0x74>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40005400 	.word	0x40005400
 8002304:	40021000 	.word	0x40021000
 8002308:	40010c00 	.word	0x40010c00

0800230c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d13f      	bne.n	80023ac <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	61d3      	str	r3, [r2, #28]
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800235c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	481a      	ldr	r0, [pc, #104]	; (80023dc <HAL_TIM_Base_MspInit+0xd0>)
 8002372:	f001 f863 	bl	800343c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_TIM_Base_MspInit+0xd4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_TIM_Base_MspInit+0xd4>)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2105      	movs	r1, #5
 800239e:	201c      	movs	r0, #28
 80023a0:	f001 f821 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023a4:	201c      	movs	r0, #28
 80023a6:	f001 f83a 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023aa:	e010      	b.n	80023ce <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_TIM_Base_MspInit+0xd8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10b      	bne.n	80023ce <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_TIM_Base_MspInit+0xcc>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010800 	.word	0x40010800
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40000400 	.word	0x40000400

080023e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	201e      	movs	r0, #30
 80023fe:	f000 fff2 	bl	80033e6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002402:	201e      	movs	r0, #30
 8002404:	f001 f80b 	bl	800341e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <HAL_InitTick+0xa0>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_InitTick+0xa0>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	61d3      	str	r3, [r2, #28]
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_InitTick+0xa0>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002420:	f107 0210 	add.w	r2, r7, #16
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fdba 	bl	8004fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002430:	f002 fda4 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8002434:	4603      	mov	r3, r0
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_InitTick+0xa4>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	3b01      	subs	r3, #1
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_InitTick+0xa8>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_InitTick+0xac>)
 800244c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_InitTick+0xa8>)
 8002450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002454:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_InitTick+0xa8>)
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_InitTick+0xa8>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_InitTick+0xa8>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <HAL_InitTick+0xa8>)
 800246a:	f002 fde9 	bl	8005040 <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <HAL_InitTick+0xa8>)
 8002476:	f002 fe33 	bl	80050e0 <HAL_TIM_Base_Start_IT>
 800247a:	4603      	mov	r3, r0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	431bde83 	.word	0x431bde83
 8002490:	20000548 	.word	0x20000548
 8002494:	40000800 	.word	0x40000800

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800249c:	e7fe      	b.n	800249c <NMI_Handler+0x4>

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <CAN1_RX1_IRQHandler+0x10>)
 80024ca:	f000 fcb3 	bl	8002e34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000438 	.word	0x20000438

080024d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM2_IRQHandler+0x10>)
 80024de:	f002 ffaf 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200004b4 	.word	0x200004b4

080024ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM4_IRQHandler+0x10>)
 80024f2:	f002 ffa5 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000548 	.word	0x20000548

08002500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250e:	490d      	ldr	r1, [pc, #52]	; (8002544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002514:	e002      	b.n	800251c <LoopCopyDataInit>

08002516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251a:	3304      	adds	r3, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800251c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002520:	d3f9      	bcc.n	8002516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002524:	4c0a      	ldr	r4, [pc, #40]	; (8002550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002528:	e001      	b.n	800252e <LoopFillZerobss>

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800252c:	3204      	adds	r2, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002532:	f7ff ffe5 	bl	8002500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002536:	f004 fee3 	bl	8007300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800253a:	f7ff fbc7 	bl	8001ccc <main>
  bx lr
 800253e:	4770      	bx	lr
  ldr r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002544:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002548:	08007640 	.word	0x08007640
  ldr r2, =_sbss
 800254c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002550:	200012e8 	.word	0x200012e8

08002554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC1_2_IRQHandler>
	...

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_Init+0x28>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_Init+0x28>)
 8002562:	f043 0310 	orr.w	r3, r3, #16
 8002566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 ff31 	bl	80033d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	200f      	movs	r0, #15
 8002570:	f7ff ff3a 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fe00 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000

08002584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_IncTick+0x1c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_IncTick+0x20>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_IncTick+0x20>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	20000590 	.word	0x20000590

080025a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_GetTick+0x10>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	20000590 	.word	0x20000590

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fff0 	bl	80025a8 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d005      	beq.n	80025e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_Delay+0x44>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e2:	bf00      	nop
 80025e4:	f7ff ffe0 	bl	80025a8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8f7      	bhi.n	80025e4 <HAL_Delay+0x28>
  {
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000000c 	.word	0x2000000c

08002604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0ed      	b.n	80027f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fde0 	bl	80021e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002638:	f7ff ffb6 	bl	80025a8 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800263e:	e012      	b.n	8002666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002640:	f7ff ffb2 	bl	80025a8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b0a      	cmp	r3, #10
 800264c:	d90b      	bls.n	8002666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2205      	movs	r2, #5
 800265e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0c5      	b.n	80027f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0e5      	beq.n	8002640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0202 	bic.w	r2, r2, #2
 8002682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002684:	f7ff ff90 	bl	80025a8 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800268a:	e012      	b.n	80026b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800268c:	f7ff ff8c 	bl	80025a8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d90b      	bls.n	80026b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2205      	movs	r2, #5
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e09f      	b.n	80027f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e5      	bne.n	800268c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d108      	bne.n	80026da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e007      	b.n	80026ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7e5b      	ldrb	r3, [r3, #25]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e007      	b.n	8002714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e9b      	ldrb	r3, [r3, #26]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e007      	b.n	800273e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0220 	bic.w	r2, r2, #32
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7edb      	ldrb	r3, [r3, #27]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0210 	bic.w	r2, r2, #16
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e007      	b.n	8002768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0210 	orr.w	r2, r2, #16
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7f1b      	ldrb	r3, [r3, #28]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d108      	bne.n	8002782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0208 	orr.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7f5b      	ldrb	r3, [r3, #29]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0204 	orr.w	r2, r2, #4
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e007      	b.n	80027bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	ea42 0103 	orr.w	r1, r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002810:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d003      	beq.n	8002820 <HAL_CAN_ConfigFilter+0x26>
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b02      	cmp	r3, #2
 800281c:	f040 80aa 	bne.w	8002974 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2201      	movs	r2, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43db      	mvns	r3, r3
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d123      	bne.n	80028a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	401a      	ands	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800287c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3248      	adds	r2, #72	; 0x48
 8002882:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002896:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002898:	6979      	ldr	r1, [r7, #20]
 800289a:	3348      	adds	r3, #72	; 0x48
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d122      	bne.n	80028f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3248      	adds	r2, #72	; 0x48
 80028d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	3348      	adds	r3, #72	; 0x48
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43db      	mvns	r3, r3
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800290a:	e007      	b.n	800291c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43db      	mvns	r3, r3
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002936:	e007      	b.n	8002948 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002966:	f023 0201 	bic.w	r2, r3, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e006      	b.n	8002982 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d12e      	bne.n	80029fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029b8:	f7ff fdf6 	bl	80025a8 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029be:	e012      	b.n	80029e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029c0:	f7ff fdf2 	bl	80025a8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b0a      	cmp	r3, #10
 80029cc:	d90b      	bls.n	80029e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2205      	movs	r2, #5
 80029de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e012      	b.n	8002a0c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e5      	bne.n	80029c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e006      	b.n	8002a0c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a28:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a32:	7ffb      	ldrb	r3, [r7, #31]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d003      	beq.n	8002a40 <HAL_CAN_AddTxMessage+0x2c>
 8002a38:	7ffb      	ldrb	r3, [r7, #31]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	f040 80b8 	bne.w	8002bb0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80a0 	beq.w	8002ba0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	0e1b      	lsrs	r3, r3, #24
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d907      	bls.n	8002a80 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e09e      	b.n	8002bbe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a80:	2201      	movs	r2, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	409a      	lsls	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e00f      	b.n	8002ace <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ac2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3318      	adds	r3, #24
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	440b      	add	r3, r1
 8002acc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3318      	adds	r3, #24
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	440b      	add	r3, r1
 8002ade:	3304      	adds	r3, #4
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	7d1b      	ldrb	r3, [r3, #20]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d111      	bne.n	8002b0e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3318      	adds	r3, #24
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6811      	ldr	r1, [r2, #0]
 8002afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3318      	adds	r3, #24
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	440b      	add	r3, r1
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3307      	adds	r3, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	061a      	lsls	r2, r3, #24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3306      	adds	r3, #6
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3305      	adds	r3, #5
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	3204      	adds	r2, #4
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	4610      	mov	r0, r2
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6811      	ldr	r1, [r2, #0]
 8002b36:	ea43 0200 	orr.w	r2, r3, r0
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	061a      	lsls	r2, r3, #24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3302      	adds	r3, #2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4313      	orrs	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	4610      	mov	r0, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6811      	ldr	r1, [r2, #0]
 8002b6c:	ea43 0200 	orr.w	r2, r3, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3318      	adds	r3, #24
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6811      	ldr	r1, [r2, #0]
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3318      	adds	r3, #24
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	440b      	add	r3, r1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e00e      	b.n	8002bbe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e006      	b.n	8002bbe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bdc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d003      	beq.n	8002bec <HAL_CAN_GetRxMessage+0x24>
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	f040 80f3 	bne.w	8002dd2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10e      	bne.n	8002c10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d116      	bne.n	8002c2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0e7      	b.n	8002de0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0d8      	b.n	8002de0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	331b      	adds	r3, #27
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0204 	and.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	331b      	adds	r3, #27
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0d5b      	lsrs	r3, r3, #21
 8002c5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e00b      	b.n	8002c7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	331b      	adds	r3, #27
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	331b      	adds	r3, #27
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0202 	and.w	r2, r3, #2
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	331b      	adds	r3, #27
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	331b      	adds	r3, #27
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	331b      	adds	r3, #27
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0a1a      	lsrs	r2, r3, #8
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0c1a      	lsrs	r2, r3, #16
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	3302      	adds	r3, #2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e1a      	lsrs	r2, r3, #24
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	3304      	adds	r3, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0a1a      	lsrs	r2, r3, #8
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3305      	adds	r3, #5
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	0c1a      	lsrs	r2, r3, #16
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	3306      	adds	r3, #6
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e1a      	lsrs	r2, r3, #24
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	3307      	adds	r3, #7
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0220 	orr.w	r2, r2, #32
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	e007      	b.n	8002dce <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e006      	b.n	8002de0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d002      	beq.n	8002e08 <HAL_CAN_ActivateNotification+0x1e>
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d109      	bne.n	8002e1c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6959      	ldr	r1, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e006      	b.n	8002e2a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d07c      	beq.n	8002f74 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d023      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f983 	bl	80031a2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e9c:	e016      	b.n	8002ecc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	e00c      	b.n	8002ecc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	e002      	b.n	8002ecc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f986 	bl	80031d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d024      	beq.n	8002f20 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ede:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f962 	bl	80031b4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ef0:	e016      	b.n	8002f20 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	e00c      	b.n	8002f20 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
 8002f18:	e002      	b.n	8002f20 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f965 	bl	80031ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d024      	beq.n	8002f74 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f941 	bl	80031c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f44:	e016      	b.n	8002f74 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	e00c      	b.n	8002f74 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	e002      	b.n	8002f74 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f944 	bl	80031fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2210      	movs	r2, #16
 8002f96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f933 	bl	8003220 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f91b 	bl	800320e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2208      	movs	r2, #8
 8003016:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f90a 	bl	8003232 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe f85e 	bl	80010f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8f3 	bl	8003244 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2208      	movs	r2, #8
 8003078:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8eb 	bl	8003256 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d07b      	beq.n	8003182 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d072      	beq.n	800317a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d043      	beq.n	800317a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d03e      	beq.n	800317a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	2b60      	cmp	r3, #96	; 0x60
 8003104:	d02b      	beq.n	800315e <HAL_CAN_IRQHandler+0x32a>
 8003106:	2b60      	cmp	r3, #96	; 0x60
 8003108:	d82e      	bhi.n	8003168 <HAL_CAN_IRQHandler+0x334>
 800310a:	2b50      	cmp	r3, #80	; 0x50
 800310c:	d022      	beq.n	8003154 <HAL_CAN_IRQHandler+0x320>
 800310e:	2b50      	cmp	r3, #80	; 0x50
 8003110:	d82a      	bhi.n	8003168 <HAL_CAN_IRQHandler+0x334>
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d019      	beq.n	800314a <HAL_CAN_IRQHandler+0x316>
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d826      	bhi.n	8003168 <HAL_CAN_IRQHandler+0x334>
 800311a:	2b30      	cmp	r3, #48	; 0x30
 800311c:	d010      	beq.n	8003140 <HAL_CAN_IRQHandler+0x30c>
 800311e:	2b30      	cmp	r3, #48	; 0x30
 8003120:	d822      	bhi.n	8003168 <HAL_CAN_IRQHandler+0x334>
 8003122:	2b10      	cmp	r3, #16
 8003124:	d002      	beq.n	800312c <HAL_CAN_IRQHandler+0x2f8>
 8003126:	2b20      	cmp	r3, #32
 8003128:	d005      	beq.n	8003136 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800312a:	e01d      	b.n	8003168 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f043 0308 	orr.w	r3, r3, #8
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003134:	e019      	b.n	800316a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f043 0310 	orr.w	r3, r3, #16
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800313e:	e014      	b.n	800316a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	f043 0320 	orr.w	r3, r3, #32
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003148:	e00f      	b.n	800316a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003152:	e00a      	b.n	800316a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800315c:	e005      	b.n	800316a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003166:	e000      	b.n	800316a <HAL_CAN_IRQHandler+0x336>
            break;
 8003168:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003178:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2204      	movs	r2, #4
 8003180:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f867 	bl	8003268 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
	...

0800327c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <__NVIC_SetPriorityGrouping+0x44>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003298:	4013      	ands	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ae:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <__NVIC_SetPriorityGrouping+0x44>)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	60d3      	str	r3, [r2, #12]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <__NVIC_GetPriorityGrouping+0x18>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f003 0307 	and.w	r3, r3, #7
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db0b      	blt.n	800330a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	4906      	ldr	r1, [pc, #24]	; (8003314 <__NVIC_EnableIRQ+0x34>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2001      	movs	r0, #1
 8003302:	fa00 f202 	lsl.w	r2, r0, r2
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100

08003318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f1c3 0307 	rsb	r3, r3, #7
 8003386:	2b04      	cmp	r3, #4
 8003388:	bf28      	it	cs
 800338a:	2304      	movcs	r3, #4
 800338c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3304      	adds	r3, #4
 8003392:	2b06      	cmp	r3, #6
 8003394:	d902      	bls.n	800339c <NVIC_EncodePriority+0x30>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3b03      	subs	r3, #3
 800339a:	e000      	b.n	800339e <NVIC_EncodePriority+0x32>
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43d9      	mvns	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	4313      	orrs	r3, r2
         );
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff4f 	bl	800327c <__NVIC_SetPriorityGrouping>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f8:	f7ff ff64 	bl	80032c4 <__NVIC_GetPriorityGrouping>
 80033fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7ff ffb2 	bl	800336c <NVIC_EncodePriority>
 8003408:	4602      	mov	r2, r0
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff81 	bl	8003318 <__NVIC_SetPriority>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff57 	bl	80032e0 <__NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b08b      	sub	sp, #44	; 0x2c
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344e:	e169      	b.n	8003724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003450:	2201      	movs	r2, #1
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	f040 8158 	bne.w	800371e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a9a      	ldr	r2, [pc, #616]	; (80036dc <HAL_GPIO_Init+0x2a0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d05e      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003478:	4a98      	ldr	r2, [pc, #608]	; (80036dc <HAL_GPIO_Init+0x2a0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d875      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 800347e:	4a98      	ldr	r2, [pc, #608]	; (80036e0 <HAL_GPIO_Init+0x2a4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d058      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003484:	4a96      	ldr	r2, [pc, #600]	; (80036e0 <HAL_GPIO_Init+0x2a4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d86f      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 800348a:	4a96      	ldr	r2, [pc, #600]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d052      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003490:	4a94      	ldr	r2, [pc, #592]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d869      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 8003496:	4a94      	ldr	r2, [pc, #592]	; (80036e8 <HAL_GPIO_Init+0x2ac>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04c      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 800349c:	4a92      	ldr	r2, [pc, #584]	; (80036e8 <HAL_GPIO_Init+0x2ac>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d863      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034a2:	4a92      	ldr	r2, [pc, #584]	; (80036ec <HAL_GPIO_Init+0x2b0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d046      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 80034a8:	4a90      	ldr	r2, [pc, #576]	; (80036ec <HAL_GPIO_Init+0x2b0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d85d      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d82a      	bhi.n	8003508 <HAL_GPIO_Init+0xcc>
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d859      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <HAL_GPIO_Init+0x80>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	08003537 	.word	0x08003537
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003523 	.word	0x08003523
 80034c8:	08003565 	.word	0x08003565
 80034cc:	0800356b 	.word	0x0800356b
 80034d0:	0800356b 	.word	0x0800356b
 80034d4:	0800356b 	.word	0x0800356b
 80034d8:	0800356b 	.word	0x0800356b
 80034dc:	0800356b 	.word	0x0800356b
 80034e0:	0800356b 	.word	0x0800356b
 80034e4:	0800356b 	.word	0x0800356b
 80034e8:	0800356b 	.word	0x0800356b
 80034ec:	0800356b 	.word	0x0800356b
 80034f0:	0800356b 	.word	0x0800356b
 80034f4:	0800356b 	.word	0x0800356b
 80034f8:	0800356b 	.word	0x0800356b
 80034fc:	0800356b 	.word	0x0800356b
 8003500:	08003519 	.word	0x08003519
 8003504:	0800352d 	.word	0x0800352d
 8003508:	4a79      	ldr	r2, [pc, #484]	; (80036f0 <HAL_GPIO_Init+0x2b4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800350e:	e02c      	b.n	800356a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	623b      	str	r3, [r7, #32]
          break;
 8003516:	e029      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e024      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	3308      	adds	r3, #8
 8003528:	623b      	str	r3, [r7, #32]
          break;
 800352a:	e01f      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	330c      	adds	r3, #12
 8003532:	623b      	str	r3, [r7, #32]
          break;
 8003534:	e01a      	b.n	800356c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800353e:	2304      	movs	r3, #4
 8003540:	623b      	str	r3, [r7, #32]
          break;
 8003542:	e013      	b.n	800356c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800354c:	2308      	movs	r3, #8
 800354e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	611a      	str	r2, [r3, #16]
          break;
 8003556:	e009      	b.n	800356c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003558:	2308      	movs	r3, #8
 800355a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	615a      	str	r2, [r3, #20]
          break;
 8003562:	e003      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
          break;
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x130>
          break;
 800356a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d801      	bhi.n	8003576 <HAL_GPIO_Init+0x13a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	e001      	b.n	800357a <HAL_GPIO_Init+0x13e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2bff      	cmp	r3, #255	; 0xff
 8003580:	d802      	bhi.n	8003588 <HAL_GPIO_Init+0x14c>
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	e002      	b.n	800358e <HAL_GPIO_Init+0x152>
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	3b08      	subs	r3, #8
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	210f      	movs	r1, #15
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80b1 	beq.w	800371e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035bc:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6193      	str	r3, [r2, #24]
 80035c8:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035d4:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <HAL_GPIO_Init+0x2bc>)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <HAL_GPIO_Init+0x2c0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <HAL_GPIO_Init+0x1ec>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3f      	ldr	r2, [pc, #252]	; (8003700 <HAL_GPIO_Init+0x2c4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00d      	beq.n	8003624 <HAL_GPIO_Init+0x1e8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <HAL_GPIO_Init+0x1e4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <HAL_GPIO_Init+0x2cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_GPIO_Init+0x1e0>
 8003618:	2303      	movs	r3, #3
 800361a:	e006      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 800361c:	2304      	movs	r3, #4
 800361e:	e004      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 8003620:	2302      	movs	r3, #2
 8003622:	e002      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 8003628:	2300      	movs	r3, #0
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	f002 0203 	and.w	r2, r2, #3
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	4093      	lsls	r3, r2
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800363a:	492f      	ldr	r1, [pc, #188]	; (80036f8 <HAL_GPIO_Init+0x2bc>)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	3302      	adds	r3, #2
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	492c      	ldr	r1, [pc, #176]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e006      	b.n	8003670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	43db      	mvns	r3, r3
 800366a:	4928      	ldr	r1, [pc, #160]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800366c:	4013      	ands	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4922      	ldr	r1, [pc, #136]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	e006      	b.n	8003698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	43db      	mvns	r3, r3
 8003692:	491e      	ldr	r1, [pc, #120]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003694:	4013      	ands	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	4918      	ldr	r1, [pc, #96]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	4914      	ldr	r1, [pc, #80]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d021      	beq.n	8003710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
 80036d8:	e021      	b.n	800371e <HAL_GPIO_Init+0x2e2>
 80036da:	bf00      	nop
 80036dc:	10320000 	.word	0x10320000
 80036e0:	10310000 	.word	0x10310000
 80036e4:	10220000 	.word	0x10220000
 80036e8:	10210000 	.word	0x10210000
 80036ec:	10120000 	.word	0x10120000
 80036f0:	10110000 	.word	0x10110000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40010800 	.word	0x40010800
 8003700:	40010c00 	.word	0x40010c00
 8003704:	40011000 	.word	0x40011000
 8003708:	40011400 	.word	0x40011400
 800370c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_GPIO_Init+0x304>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	43db      	mvns	r3, r3
 8003718:	4909      	ldr	r1, [pc, #36]	; (8003740 <HAL_GPIO_Init+0x304>)
 800371a:	4013      	ands	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	3301      	adds	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f47f ae8e 	bne.w	8003450 <HAL_GPIO_Init+0x14>
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	372c      	adds	r7, #44	; 0x2c
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e001      	b.n	8003766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	807b      	strh	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003782:	787b      	ldrb	r3, [r7, #1]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800378e:	e003      	b.n	8003798 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	041a      	lsls	r2, r3, #16
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	611a      	str	r2, [r3, #16]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037b4:	887a      	ldrh	r2, [r7, #2]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4013      	ands	r3, r2
 80037ba:	041a      	lsls	r2, r3, #16
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	43d9      	mvns	r1, r3
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	400b      	ands	r3, r1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e12b      	b.n	8003a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fe fd48 	bl	8002290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003838:	f001 fba0 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4a81      	ldr	r2, [pc, #516]	; (8003a48 <HAL_I2C_Init+0x274>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d807      	bhi.n	8003858 <HAL_I2C_Init+0x84>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a80      	ldr	r2, [pc, #512]	; (8003a4c <HAL_I2C_Init+0x278>)
 800384c:	4293      	cmp	r3, r2
 800384e:	bf94      	ite	ls
 8003850:	2301      	movls	r3, #1
 8003852:	2300      	movhi	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e006      	b.n	8003866 <HAL_I2C_Init+0x92>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a7d      	ldr	r2, [pc, #500]	; (8003a50 <HAL_I2C_Init+0x27c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	bf94      	ite	ls
 8003860:	2301      	movls	r3, #1
 8003862:	2300      	movhi	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e0e7      	b.n	8003a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a78      	ldr	r2, [pc, #480]	; (8003a54 <HAL_I2C_Init+0x280>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a6a      	ldr	r2, [pc, #424]	; (8003a48 <HAL_I2C_Init+0x274>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d802      	bhi.n	80038a8 <HAL_I2C_Init+0xd4>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3301      	adds	r3, #1
 80038a6:	e009      	b.n	80038bc <HAL_I2C_Init+0xe8>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <HAL_I2C_Init+0x284>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	3301      	adds	r3, #1
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	495c      	ldr	r1, [pc, #368]	; (8003a48 <HAL_I2C_Init+0x274>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d819      	bhi.n	8003910 <HAL_I2C_Init+0x13c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e59      	subs	r1, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ea:	1c59      	adds	r1, r3, #1
 80038ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038f0:	400b      	ands	r3, r1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_I2C_Init+0x138>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e59      	subs	r1, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fbb1 f3f3 	udiv	r3, r1, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390a:	e051      	b.n	80039b0 <HAL_I2C_Init+0x1dc>
 800390c:	2304      	movs	r3, #4
 800390e:	e04f      	b.n	80039b0 <HAL_I2C_Init+0x1dc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d111      	bne.n	800393c <HAL_I2C_Init+0x168>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e012      	b.n	8003962 <HAL_I2C_Init+0x18e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e58      	subs	r0, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	0099      	lsls	r1, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003952:	3301      	adds	r3, #1
 8003954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Init+0x196>
 8003966:	2301      	movs	r3, #1
 8003968:	e022      	b.n	80039b0 <HAL_I2C_Init+0x1dc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10e      	bne.n	8003990 <HAL_I2C_Init+0x1bc>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e58      	subs	r0, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	440b      	add	r3, r1
 8003980:	fbb0 f3f3 	udiv	r3, r0, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398e:	e00f      	b.n	80039b0 <HAL_I2C_Init+0x1dc>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	0099      	lsls	r1, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	6809      	ldr	r1, [r1, #0]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6911      	ldr	r1, [r2, #16]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	000186a0 	.word	0x000186a0
 8003a4c:	001e847f 	.word	0x001e847f
 8003a50:	003d08ff 	.word	0x003d08ff
 8003a54:	431bde83 	.word	0x431bde83
 8003a58:	10624dd3 	.word	0x10624dd3

08003a5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	4608      	mov	r0, r1
 8003a66:	4611      	mov	r1, r2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	817b      	strh	r3, [r7, #10]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	813b      	strh	r3, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a76:	f7fe fd97 	bl	80025a8 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	f040 80d9 	bne.w	8003c3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2319      	movs	r3, #25
 8003a90:	2201      	movs	r2, #1
 8003a92:	496d      	ldr	r1, [pc, #436]	; (8003c48 <HAL_I2C_Mem_Write+0x1ec>)
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fcc1 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e0cc      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2C_Mem_Write+0x56>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0c5      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1e2>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d007      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2221      	movs	r2, #33	; 0x21
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2240      	movs	r2, #64	; 0x40
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a4d      	ldr	r2, [pc, #308]	; (8003c4c <HAL_I2C_Mem_Write+0x1f0>)
 8003b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1a:	88f8      	ldrh	r0, [r7, #6]
 8003b1c:	893a      	ldrh	r2, [r7, #8]
 8003b1e:	8979      	ldrh	r1, [r7, #10]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4603      	mov	r3, r0
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 faf8 	bl	8004120 <I2C_RequestMemoryWrite>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d052      	beq.n	8003bdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e081      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fd42 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d107      	bne.n	8003b62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e06b      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d11b      	bne.n	8003bdc <HAL_I2C_Mem_Write+0x180>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1aa      	bne.n	8003b3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fd2e 	bl	800464a <I2C_WaitOnBTFFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d107      	bne.n	8003c0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e016      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	00100002 	.word	0x00100002
 8003c4c:	ffff0000 	.word	0xffff0000

08003c50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	817b      	strh	r3, [r7, #10]
 8003c62:	460b      	mov	r3, r1
 8003c64:	813b      	strh	r3, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6e:	f7fe fc9b 	bl	80025a8 <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	f040 8244 	bne.w	800410a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2319      	movs	r3, #25
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4982      	ldr	r1, [pc, #520]	; (8003e94 <HAL_I2C_Mem_Read+0x244>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fbc5 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e237      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Mem_Read+0x5a>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e230      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	; 0x22
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a62      	ldr	r2, [pc, #392]	; (8003e98 <HAL_I2C_Mem_Read+0x248>)
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fa92 	bl	800424c <I2C_RequestMemoryRead>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1ec      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d113      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e1c0      	b.n	80040e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11e      	bne.n	8003da8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d7a:	b672      	cpsid	i
}
 8003d7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003da4:	b662      	cpsie	i
}
 8003da6:	e035      	b.n	8003e14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d11e      	bne.n	8003dee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc0:	b672      	cpsid	i
}
 8003dc2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dea:	b662      	cpsie	i
}
 8003dec:	e012      	b.n	8003e14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e14:	e166      	b.n	80040e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	f200 811f 	bhi.w	800405e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d123      	bne.n	8003e70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fc4d 	bl	80046cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e167      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e6e:	e139      	b.n	80040e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d152      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	2200      	movs	r2, #0
 8003e80:	4906      	ldr	r1, [pc, #24]	; (8003e9c <HAL_I2C_Mem_Read+0x24c>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 faca 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e13c      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
 8003e92:	bf00      	nop
 8003e94:	00100002 	.word	0x00100002
 8003e98:	ffff0000 	.word	0xffff0000
 8003e9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea0:	b672      	cpsid	i
}
 8003ea2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ee6:	b662      	cpsie	i
}
 8003ee8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f1c:	e0e2      	b.n	80040e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	2200      	movs	r2, #0
 8003f26:	497b      	ldr	r1, [pc, #492]	; (8004114 <HAL_I2C_Mem_Read+0x4c4>)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa77 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0e9      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f48:	b672      	cpsid	i
}
 8003f4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f7e:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_I2C_Mem_Read+0x4c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	4a65      	ldr	r2, [pc, #404]	; (800411c <HAL_I2C_Mem_Read+0x4cc>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0a1a      	lsrs	r2, r3, #8
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00da      	lsls	r2, r3, #3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d118      	bne.n	8003fd6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc6:	b662      	cpsie	i
}
 8003fc8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e09a      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d1d9      	bne.n	8003f98 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004026:	b662      	cpsie	i
}
 8004028:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800405c:	e042      	b.n	80040e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fb32 	bl	80046cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e04c      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d118      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f ae94 	bne.w	8003e16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	00010004 	.word	0x00010004
 8004118:	20000004 	.word	0x20000004
 800411c:	14f8b589 	.word	0x14f8b589

08004120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	460b      	mov	r3, r1
 8004134:	813b      	strh	r3, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	2200      	movs	r2, #0
 8004152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f960 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	d103      	bne.n	800417a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e05f      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800417e:	897b      	ldrh	r3, [r7, #10]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800418c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	6a3a      	ldr	r2, [r7, #32]
 8004192:	492d      	ldr	r1, [pc, #180]	; (8004248 <I2C_RequestMemoryWrite+0x128>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f998 	bl	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e04c      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	6a39      	ldr	r1, [r7, #32]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fa02 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d107      	bne.n	80041e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e02b      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	e021      	b.n	800423c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041f8:	893b      	ldrh	r3, [r7, #8]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f9dc 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b04      	cmp	r3, #4
 800421c:	d107      	bne.n	800422e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e005      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004232:	893b      	ldrh	r3, [r7, #8]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	00010002 	.word	0x00010002

0800424c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	2200      	movs	r2, #0
 800428e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8c2 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d103      	bne.n	80042b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0aa      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	4952      	ldr	r1, [pc, #328]	; (8004418 <I2C_RequestMemoryRead+0x1cc>)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f8fa 	bl	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e097      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	6a39      	ldr	r1, [r7, #32]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f964 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b04      	cmp	r3, #4
 800430c:	d107      	bne.n	800431e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e076      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004328:	893b      	ldrh	r3, [r7, #8]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]
 8004332:	e021      	b.n	8004378 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b29b      	uxth	r3, r3
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	6a39      	ldr	r1, [r7, #32]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f93e 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b04      	cmp	r3, #4
 8004358:	d107      	bne.n	800436a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e050      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800436e:	893b      	ldrh	r3, [r7, #8]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437a:	6a39      	ldr	r1, [r7, #32]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f923 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2b04      	cmp	r3, #4
 800438e:	d107      	bne.n	80043a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e035      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f82b 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043da:	d103      	bne.n	80043e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e013      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	4906      	ldr	r1, [pc, #24]	; (8004418 <I2C_RequestMemoryRead+0x1cc>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f863 	bl	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	00010002 	.word	0x00010002

0800441c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800442c:	e025      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d021      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fe f8b7 	bl	80025a8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d116      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e023      	b.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10d      	bne.n	80044a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	e00c      	b.n	80044ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d0b6      	beq.n	800442e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044d8:	e051      	b.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d123      	bne.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e046      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d021      	beq.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe f835 	bl	80025a8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e020      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10c      	bne.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	bf14      	ite	ne
 800459a:	2301      	movne	r3, #1
 800459c:	2300      	moveq	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e00b      	b.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	43da      	mvns	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d18d      	bne.n	80044da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d4:	e02d      	b.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f8ce 	bl	8004778 <I2C_IsAcknowledgeFailed>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e02d      	b.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d021      	beq.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fd ffdb 	bl	80025a8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d116      	bne.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e007      	b.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d1ca      	bne.n	80045d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004656:	e02d      	b.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f88d 	bl	8004778 <I2C_IsAcknowledgeFailed>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e02d      	b.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d021      	beq.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7fd ff9a 	bl	80025a8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d116      	bne.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f043 0220 	orr.w	r2, r3, #32
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e007      	b.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d1ca      	bne.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d8:	e042      	b.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d119      	bne.n	800471c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0210 	mvn.w	r2, #16
 80046f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e029      	b.n	8004770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fd ff44 	bl	80025a8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e007      	b.n	8004770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d1b5      	bne.n	80046da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d11b      	bne.n	80047c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0204 	orr.w	r2, r3, #4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e272      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8087 	beq.w	8004902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f4:	4b92      	ldr	r3, [pc, #584]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d00c      	beq.n	800481a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004800:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b08      	cmp	r3, #8
 800480a:	d112      	bne.n	8004832 <HAL_RCC_OscConfig+0x5e>
 800480c:	4b8c      	ldr	r3, [pc, #560]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004818:	d10b      	bne.n	8004832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481a:	4b89      	ldr	r3, [pc, #548]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d06c      	beq.n	8004900 <HAL_RCC_OscConfig+0x12c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d168      	bne.n	8004900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e24c      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x76>
 800483c:	4b80      	ldr	r3, [pc, #512]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a7f      	ldr	r2, [pc, #508]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e02e      	b.n	80048a8 <HAL_RCC_OscConfig+0xd4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x98>
 8004852:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7a      	ldr	r2, [pc, #488]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b78      	ldr	r3, [pc, #480]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a77      	ldr	r2, [pc, #476]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e01d      	b.n	80048a8 <HAL_RCC_OscConfig+0xd4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0xbc>
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a71      	ldr	r2, [pc, #452]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800487c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b6f      	ldr	r3, [pc, #444]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6e      	ldr	r2, [pc, #440]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0xd4>
 8004890:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a6a      	ldr	r2, [pc, #424]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a67      	ldr	r2, [pc, #412]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd fe7a 	bl	80025a8 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fd fe76 	bl	80025a8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e200      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b5d      	ldr	r3, [pc, #372]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0xe4>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd fe66 	bl	80025a8 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e0:	f7fd fe62 	bl	80025a8 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e1ec      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x10c>
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d063      	beq.n	80049d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800490e:	4b4c      	ldr	r3, [pc, #304]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800491a:	4b49      	ldr	r3, [pc, #292]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b08      	cmp	r3, #8
 8004924:	d11c      	bne.n	8004960 <HAL_RCC_OscConfig+0x18c>
 8004926:	4b46      	ldr	r3, [pc, #280]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d116      	bne.n	8004960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004932:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_RCC_OscConfig+0x176>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d001      	beq.n	800494a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e1c0      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4939      	ldr	r1, [pc, #228]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	e03a      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d020      	beq.n	80049aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <HAL_RCC_OscConfig+0x270>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fd fe1b 	bl	80025a8 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004976:	f7fd fe17 	bl	80025a8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e1a1      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4927      	ldr	r1, [pc, #156]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
 80049a8:	e015      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049aa:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <HAL_RCC_OscConfig+0x270>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fd fdfa 	bl	80025a8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b8:	f7fd fdf6 	bl	80025a8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e180      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d03a      	beq.n	8004a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ea:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <HAL_RCC_OscConfig+0x274>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f0:	f7fd fdda 	bl	80025a8 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f8:	f7fd fdd6 	bl	80025a8 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e160      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a16:	2001      	movs	r0, #1
 8004a18:	f000 faf4 	bl	8005004 <RCC_Delay>
 8004a1c:	e01c      	b.n	8004a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <HAL_RCC_OscConfig+0x274>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7fd fdc0 	bl	80025a8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2a:	e00f      	b.n	8004a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fd fdbc 	bl	80025a8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d908      	bls.n	8004a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e146      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	42420000 	.word	0x42420000
 8004a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e9      	bne.n	8004a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a6 	beq.w	8004bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6a:	4b8b      	ldr	r3, [pc, #556]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	4b88      	ldr	r3, [pc, #544]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4a87      	ldr	r2, [pc, #540]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a80:	61d3      	str	r3, [r2, #28]
 8004a82:	4b85      	ldr	r3, [pc, #532]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a92:	4b82      	ldr	r3, [pc, #520]	; (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d118      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9e:	4b7f      	ldr	r3, [pc, #508]	; (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7e      	ldr	r2, [pc, #504]	; (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aaa:	f7fd fd7d 	bl	80025a8 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab2:	f7fd fd79 	bl	80025a8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	; 0x64
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e103      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	4b75      	ldr	r3, [pc, #468]	; (8004c9c <HAL_RCC_OscConfig+0x4c8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x312>
 8004ad8:	4b6f      	ldr	r3, [pc, #444]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6213      	str	r3, [r2, #32]
 8004ae4:	e02d      	b.n	8004b42 <HAL_RCC_OscConfig+0x36e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x334>
 8004aee:	4b6a      	ldr	r3, [pc, #424]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4a69      	ldr	r2, [pc, #420]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6213      	str	r3, [r2, #32]
 8004afa:	4b67      	ldr	r3, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4a66      	ldr	r2, [pc, #408]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	e01c      	b.n	8004b42 <HAL_RCC_OscConfig+0x36e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCC_OscConfig+0x356>
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4a60      	ldr	r2, [pc, #384]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	6213      	str	r3, [r2, #32]
 8004b1c:	4b5e      	ldr	r3, [pc, #376]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4a5d      	ldr	r2, [pc, #372]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6213      	str	r3, [r2, #32]
 8004b28:	e00b      	b.n	8004b42 <HAL_RCC_OscConfig+0x36e>
 8004b2a:	4b5b      	ldr	r3, [pc, #364]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4a5a      	ldr	r2, [pc, #360]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	6213      	str	r3, [r2, #32]
 8004b36:	4b58      	ldr	r3, [pc, #352]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	4a57      	ldr	r2, [pc, #348]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d015      	beq.n	8004b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fd2d 	bl	80025a8 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fd fd29 	bl	80025a8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0b1      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ee      	beq.n	8004b52 <HAL_RCC_OscConfig+0x37e>
 8004b74:	e014      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b76:	f7fd fd17 	bl	80025a8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fd fd13 	bl	80025a8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e09b      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b94:	4b40      	ldr	r3, [pc, #256]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ee      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba6:	4b3c      	ldr	r3, [pc, #240]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4a3b      	ldr	r2, [pc, #236]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8087 	beq.w	8004cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d061      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d146      	bne.n	8004c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b33      	ldr	r3, [pc, #204]	; (8004ca0 <HAL_RCC_OscConfig+0x4cc>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fce7 	bl	80025a8 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd fce3 	bl	80025a8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e06d      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d108      	bne.n	8004c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4921      	ldr	r1, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a19      	ldr	r1, [r3, #32]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	491b      	ldr	r1, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fd fcb7 	bl	80025a8 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd fcb3 	bl	80025a8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e03d      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x46a>
 8004c5c:	e035      	b.n	8004cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_RCC_OscConfig+0x4cc>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fd fca0 	bl	80025a8 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fd fc9c 	bl	80025a8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e026      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x498>
 8004c8a:	e01e      	b.n	8004cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e019      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_OscConfig+0x500>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000

08004cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0d0      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b6a      	ldr	r3, [pc, #424]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d910      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 0207 	bic.w	r2, r3, #7
 8004d02:	4965      	ldr	r1, [pc, #404]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0b8      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d34:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a58      	ldr	r2, [pc, #352]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d4c:	4b53      	ldr	r3, [pc, #332]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	494d      	ldr	r1, [pc, #308]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d040      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d115      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e073      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da6:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e06b      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db6:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4936      	ldr	r1, [pc, #216]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc8:	f7fd fbee 	bl	80025a8 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd0:	f7fd fbea 	bl	80025a8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e053      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 020c 	and.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1eb      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d210      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 0207 	bic.w	r2, r3, #7
 8004e0e:	4922      	ldr	r1, [pc, #136]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e032      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4916      	ldr	r1, [pc, #88]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	490e      	ldr	r1, [pc, #56]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e66:	f000 f821 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	490a      	ldr	r1, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8004e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd faae 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	080075c0 	.word	0x080075c0
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	20000008 	.word	0x20000008

08004eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	b490      	push	{r4, r7}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xac>)
 8004eb4:	1d3c      	adds	r4, r7, #4
 8004eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ebc:	f240 2301 	movw	r3, #513	; 0x201
 8004ec0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d002      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0x40>
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x46>
 8004eea:	e02b      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eec:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004eee:	623b      	str	r3, [r7, #32]
      break;
 8004ef0:	e02b      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	0c9b      	lsrs	r3, r3, #18
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	3328      	adds	r3, #40	; 0x28
 8004efc:	443b      	add	r3, r7
 8004efe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d012      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0c5b      	lsrs	r3, r3, #17
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	3328      	adds	r3, #40	; 0x28
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f26:	fb03 f202 	mul.w	r2, r3, r2
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
 8004f32:	e004      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f38:	fb02 f303 	mul.w	r3, r2, r3
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	623b      	str	r3, [r7, #32]
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f46:	623b      	str	r3, [r7, #32]
      break;
 8004f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3728      	adds	r7, #40	; 0x28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc90      	pop	{r4, r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	080075a8 	.word	0x080075a8
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	007a1200 	.word	0x007a1200
 8004f64:	003d0900 	.word	0x003d0900

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b02      	ldr	r3, [pc, #8]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	20000004 	.word	0x20000004

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff2 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	080075d0 	.word	0x080075d0

08004fa4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	220f      	movs	r2, #15
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_RCC_GetClockConfig+0x58>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0203 	and.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <HAL_RCC_GetClockConfig+0x58>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_RCC_GetClockConfig+0x58>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <HAL_RCC_GetClockConfig+0x58>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	08db      	lsrs	r3, r3, #3
 8004fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0207 	and.w	r2, r3, #7
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40022000 	.word	0x40022000

08005004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <RCC_Delay+0x34>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <RCC_Delay+0x38>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	0a5b      	lsrs	r3, r3, #9
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005020:	bf00      	nop
  }
  while (Delay --);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	60fa      	str	r2, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f9      	bne.n	8005020 <RCC_Delay+0x1c>
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr
 8005038:	20000004 	.word	0x20000004
 800503c:	10624dd3 	.word	0x10624dd3

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e041      	b.n	80050d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fd f950 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f000 fc9e 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e03a      	b.n	800516e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_TIM_Base_Start_IT+0x98>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x58>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d009      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x58>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a14      	ldr	r2, [pc, #80]	; (800517c <HAL_TIM_Base_Start_IT+0x9c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x58>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a13      	ldr	r2, [pc, #76]	; (8005180 <HAL_TIM_Base_Start_IT+0xa0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d010      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e007      	b.n	800516c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800

08005184 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e041      	b.n	800521a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f839 	bl	8005222 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f000 fbfc 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_TIM_IC_Start_IT+0x1a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	e013      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x42>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d104      	bne.n	800525e <HAL_TIM_IC_Start_IT+0x2a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e00b      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x42>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d104      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x3a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e003      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x42>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_TIM_IC_Start_IT+0x54>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e013      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x7c>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d104      	bne.n	8005298 <HAL_TIM_IC_Start_IT+0x64>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e00b      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x7c>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d104      	bne.n	80052a8 <HAL_TIM_IC_Start_IT+0x74>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e003      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x7c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0b3      	b.n	800542a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_IC_Start_IT+0x9e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d0:	e013      	b.n	80052fa <HAL_TIM_IC_Start_IT+0xc6>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_IC_Start_IT+0xae>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_IC_Start_IT+0xc6>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_IC_Start_IT+0xbe>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f0:	e003      	b.n	80052fa <HAL_TIM_IC_Start_IT+0xc6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_IT+0xd6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005308:	e013      	b.n	8005332 <HAL_TIM_IC_Start_IT+0xfe>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d104      	bne.n	800531a <HAL_TIM_IC_Start_IT+0xe6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005318:	e00b      	b.n	8005332 <HAL_TIM_IC_Start_IT+0xfe>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d104      	bne.n	800532a <HAL_TIM_IC_Start_IT+0xf6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005328:	e003      	b.n	8005332 <HAL_TIM_IC_Start_IT+0xfe>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d841      	bhi.n	80053bc <HAL_TIM_IC_Start_IT+0x188>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <HAL_TIM_IC_Start_IT+0x10c>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005375 	.word	0x08005375
 8005344:	080053bd 	.word	0x080053bd
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053bd 	.word	0x080053bd
 8005350:	08005387 	.word	0x08005387
 8005354:	080053bd 	.word	0x080053bd
 8005358:	080053bd 	.word	0x080053bd
 800535c:	080053bd 	.word	0x080053bd
 8005360:	08005399 	.word	0x08005399
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053bd 	.word	0x080053bd
 800536c:	080053bd 	.word	0x080053bd
 8005370:	080053ab 	.word	0x080053ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0202 	orr.w	r2, r2, #2
 8005382:	60da      	str	r2, [r3, #12]
      break;
 8005384:	e01b      	b.n	80053be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0204 	orr.w	r2, r2, #4
 8005394:	60da      	str	r2, [r3, #12]
      break;
 8005396:	e012      	b.n	80053be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	60da      	str	r2, [r3, #12]
      break;
 80053a8:	e009      	b.n	80053be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0210 	orr.w	r2, r2, #16
 80053b8:	60da      	str	r2, [r3, #12]
      break;
 80053ba:	e000      	b.n	80053be <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80053bc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fcff 	bl	8005dca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIM_IC_Start_IT+0x200>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_TIM_IC_Start_IT+0x1c0>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d009      	beq.n	80053f4 <HAL_TIM_IC_Start_IT+0x1c0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a14      	ldr	r2, [pc, #80]	; (8005438 <HAL_TIM_IC_Start_IT+0x204>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_TIM_IC_Start_IT+0x1c0>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a13      	ldr	r2, [pc, #76]	; (800543c <HAL_TIM_IC_Start_IT+0x208>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d111      	bne.n	8005418 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b06      	cmp	r3, #6
 8005404:	d010      	beq.n	8005428 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005416:	e007      	b.n	8005428 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800

08005440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0202 	mvn.w	r2, #2
 800546c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fda0 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa7c 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa82 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0204 	mvn.w	r2, #4
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fb fd76 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa52 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa58 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b08      	cmp	r3, #8
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0208 	mvn.w	r2, #8
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2204      	movs	r2, #4
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb fd4c 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa28 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa2e 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b10      	cmp	r3, #16
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0210 	mvn.w	r2, #16
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2208      	movs	r2, #8
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fb fd22 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9fe 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa04 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0201 	mvn.w	r2, #1
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fc fdc2 	bl	8002148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b80      	cmp	r3, #128	; 0x80
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fc79 	bl	8005ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d10e      	bne.n	800561c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d107      	bne.n	800561c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9c8 	bl	80059ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b20      	cmp	r3, #32
 8005628:	d10e      	bne.n	8005648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b20      	cmp	r3, #32
 8005636:	d107      	bne.n	8005648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0220 	mvn.w	r2, #32
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fc44 	bl	8005ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005666:	2302      	movs	r3, #2
 8005668:	e082      	b.n	8005770 <HAL_TIM_IC_ConfigChannel+0x120>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f000 f9fc 	bl	8005a84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 020c 	bic.w	r2, r2, #12
 800569a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]
 80056ae:	e05a      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d11c      	bne.n	80056f0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6819      	ldr	r1, [r3, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f000 fa65 	bl	8005b94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6999      	ldr	r1, [r3, #24]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	021a      	lsls	r2, r3, #8
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	619a      	str	r2, [r3, #24]
 80056ee:	e03a      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d11b      	bne.n	800572e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f000 fab0 	bl	8005c6a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 020c 	bic.w	r2, r2, #12
 8005718:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	61da      	str	r2, [r3, #28]
 800572c:	e01b      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 facf 	bl	8005ce0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005750:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIM_ConfigClockSource+0x18>
 800578c:	2302      	movs	r3, #2
 800578e:	e0b3      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x180>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d03e      	beq.n	8005848 <HAL_TIM_ConfigClockSource+0xd0>
 80057ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ce:	f200 8087 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	f000 8085 	beq.w	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	d87f      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 80057e0:	2b70      	cmp	r3, #112	; 0x70
 80057e2:	d01a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0xa2>
 80057e4:	2b70      	cmp	r3, #112	; 0x70
 80057e6:	d87b      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 80057e8:	2b60      	cmp	r3, #96	; 0x60
 80057ea:	d050      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x116>
 80057ec:	2b60      	cmp	r3, #96	; 0x60
 80057ee:	d877      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 80057f0:	2b50      	cmp	r3, #80	; 0x50
 80057f2:	d03c      	beq.n	800586e <HAL_TIM_ConfigClockSource+0xf6>
 80057f4:	2b50      	cmp	r3, #80	; 0x50
 80057f6:	d873      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d058      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x136>
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d86f      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 8005800:	2b30      	cmp	r3, #48	; 0x30
 8005802:	d064      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x156>
 8005804:	2b30      	cmp	r3, #48	; 0x30
 8005806:	d86b      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 8005808:	2b20      	cmp	r3, #32
 800580a:	d060      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x156>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d867      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05c      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x156>
 8005814:	2b10      	cmp	r3, #16
 8005816:	d05a      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005818:	e062      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6899      	ldr	r1, [r3, #8]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f000 faaf 	bl	8005d8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800583c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	609a      	str	r2, [r3, #8]
      break;
 8005846:	e04e      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6899      	ldr	r1, [r3, #8]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f000 fa98 	bl	8005d8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586a:	609a      	str	r2, [r3, #8]
      break;
 800586c:	e03b      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	461a      	mov	r2, r3
 800587c:	f000 f95c 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2150      	movs	r1, #80	; 0x50
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fa66 	bl	8005d58 <TIM_ITRx_SetConfig>
      break;
 800588c:	e02b      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	461a      	mov	r2, r3
 800589c:	f000 f9b6 	bl	8005c0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2160      	movs	r1, #96	; 0x60
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fa56 	bl	8005d58 <TIM_ITRx_SetConfig>
      break;
 80058ac:	e01b      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f000 f93c 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2140      	movs	r1, #64	; 0x40
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa46 	bl	8005d58 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e00b      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f000 fa3d 	bl	8005d58 <TIM_ITRx_SetConfig>
        break;
 80058de:	e002      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058e0:	bf00      	nop
 80058e2:	e000      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b0c      	cmp	r3, #12
 8005912:	d831      	bhi.n	8005978 <HAL_TIM_ReadCapturedValue+0x78>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005951 	.word	0x08005951
 8005920:	08005979 	.word	0x08005979
 8005924:	08005979 	.word	0x08005979
 8005928:	08005979 	.word	0x08005979
 800592c:	0800595b 	.word	0x0800595b
 8005930:	08005979 	.word	0x08005979
 8005934:	08005979 	.word	0x08005979
 8005938:	08005979 	.word	0x08005979
 800593c:	08005965 	.word	0x08005965
 8005940:	08005979 	.word	0x08005979
 8005944:	08005979 	.word	0x08005979
 8005948:	08005979 	.word	0x08005979
 800594c:	0800596f 	.word	0x0800596f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	60fb      	str	r3, [r7, #12]

      break;
 8005958:	e00f      	b.n	800597a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	60fb      	str	r3, [r7, #12]

      break;
 8005962:	e00a      	b.n	800597a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	60fb      	str	r3, [r7, #12]

      break;
 800596c:	e005      	b.n	800597a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	60fb      	str	r3, [r7, #12]

      break;
 8005976:	e000      	b.n	800597a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005978:	bf00      	nop
  }

  return tmpreg;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop

08005988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
	...

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <TIM_Base_SetConfig+0xb8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x30>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x30>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <TIM_Base_SetConfig+0xbc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x30>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <TIM_Base_SetConfig+0xc0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <TIM_Base_SetConfig+0xb8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0x62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <TIM_Base_SetConfig+0xbc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0x62>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <TIM_Base_SetConfig+0xc0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <TIM_Base_SetConfig+0xb8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800

08005a84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <TIM_TI1_SetConfig+0xa8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00b      	beq.n	8005aca <TIM_TI1_SetConfig+0x46>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d007      	beq.n	8005aca <TIM_TI1_SetConfig+0x46>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <TIM_TI1_SetConfig+0xac>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_TI1_SetConfig+0x46>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <TIM_TI1_SetConfig+0xb0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <TIM_TI1_SetConfig+0x4a>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <TIM_TI1_SetConfig+0x4c>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e003      	b.n	8005aee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f023 030a 	bic.w	r3, r3, #10
 8005b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 030a 	and.w	r3, r3, #10
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800

08005b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 030a 	bic.w	r3, r3, #10
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0210 	bic.w	r2, r3, #16
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	031b      	lsls	r3, r3, #12
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f023 0210 	bic.w	r2, r3, #16
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	031b      	lsls	r3, r3, #12
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b087      	sub	sp, #28
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	031b      	lsls	r3, r3, #12
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	031b      	lsls	r3, r3, #12
 8005d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f043 0307 	orr.w	r3, r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	609a      	str	r2, [r3, #8]
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	2201      	movs	r2, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	401a      	ands	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	431a      	orrs	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e046      	b.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d009      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800

08005ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f06:	2b84      	cmp	r3, #132	; 0x84
 8005f08:	d005      	beq.n	8005f16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	3303      	adds	r3, #3
 8005f14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f16:	68fb      	ldr	r3, [r7, #12]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f26:	f000 fae7 	bl	80064f8 <vTaskStartScheduler>
  
  return osOK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af04      	add	r7, sp, #16
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d020      	beq.n	8005f84 <osThreadCreate+0x54>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01c      	beq.n	8005f84 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685c      	ldr	r4, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691e      	ldr	r6, [r3, #16]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ffc9 	bl	8005ef4 <makeFreeRtosPriority>
 8005f62:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f6c:	9202      	str	r2, [sp, #8]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9100      	str	r1, [sp, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	4632      	mov	r2, r6
 8005f76:	4629      	mov	r1, r5
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 f8e8 	bl	800614e <xTaskCreateStatic>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e01c      	b.n	8005fbe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685c      	ldr	r4, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f90:	b29e      	uxth	r6, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff ffab 	bl	8005ef4 <makeFreeRtosPriority>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	9200      	str	r2, [sp, #0]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	4632      	mov	r2, r6
 8005fac:	4629      	mov	r1, r5
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 f929 	bl	8006206 <xTaskCreate>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d001      	beq.n	8005fbe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e000      	b.n	8005fc0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fc8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <osDelay+0x16>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	e000      	b.n	8005fe0 <osDelay+0x18>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa55 	bl	8006490 <vTaskDelay>
  
  return osOK;
 8005fe6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0208 	add.w	r2, r3, #8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f103 0208 	add.w	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f103 0208 	add.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d103      	bne.n	80060ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e00c      	b.n	80060c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3308      	adds	r3, #8
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	e002      	b.n	80060ba <vListInsert+0x2e>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d2f6      	bcs.n	80060b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6892      	ldr	r2, [r2, #8]
 8006112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6852      	ldr	r2, [r2, #4]
 800611c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d103      	bne.n	8006130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr

0800614e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800614e:	b580      	push	{r7, lr}
 8006150:	b08e      	sub	sp, #56	; 0x38
 8006152:	af04      	add	r7, sp, #16
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xTaskCreateStatic+0x46>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61fb      	str	r3, [r7, #28]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006194:	23b4      	movs	r3, #180	; 0xb4
 8006196:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2bb4      	cmp	r3, #180	; 0xb4
 800619c:	d00a      	beq.n	80061b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	61bb      	str	r3, [r7, #24]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01e      	beq.n	80061f8 <xTaskCreateStatic+0xaa>
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061d2:	2300      	movs	r3, #0
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	f107 0314 	add.w	r3, r7, #20
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f850 	bl	8006290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061f2:	f000 f8e3 	bl	80063bc <prvAddNewTaskToReadyList>
 80061f6:	e001      	b.n	80061fc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061fc:	697b      	ldr	r3, [r7, #20]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3728      	adds	r7, #40	; 0x28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08c      	sub	sp, #48	; 0x30
 800620a:	af04      	add	r7, sp, #16
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fe98 	bl	8006f50 <pvPortMalloc>
 8006220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006228:	20b4      	movs	r0, #180	; 0xb4
 800622a:	f000 fe91 	bl	8006f50 <pvPortMalloc>
 800622e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
 800623c:	e005      	b.n	800624a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800623e:	6978      	ldr	r0, [r7, #20]
 8006240:	f000 ff4a 	bl	80070d8 <vPortFree>
 8006244:	e001      	b.n	800624a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	2300      	movs	r3, #0
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	9302      	str	r3, [sp, #8]
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f80e 	bl	8006290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006274:	69f8      	ldr	r0, [r7, #28]
 8006276:	f000 f8a1 	bl	80063bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e002      	b.n	8006286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006280:	f04f 33ff 	mov.w	r3, #4294967295
 8006284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006286:	69bb      	ldr	r3, [r7, #24]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a8:	3b01      	subs	r3, #1
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	617b      	str	r3, [r7, #20]
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d8:	2300      	movs	r3, #0
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	e012      	b.n	8006304 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	7819      	ldrb	r1, [r3, #0]
 80062e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	3334      	adds	r3, #52	; 0x34
 80062ee:	460a      	mov	r2, r1
 80062f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d006      	beq.n	800630c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	3301      	adds	r3, #1
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d9e9      	bls.n	80062de <prvInitialiseNewTask+0x4e>
 800630a:	e000      	b.n	800630e <prvInitialiseNewTask+0x7e>
		{
			break;
 800630c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b06      	cmp	r3, #6
 800631a:	d901      	bls.n	8006320 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800631c:	2306      	movs	r3, #6
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	2200      	movs	r2, #0
 8006330:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fe79 	bl	800602e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	3318      	adds	r3, #24
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fe74 	bl	800602e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	f1c3 0207 	rsb	r2, r3, #7
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2200      	movs	r2, #0
 8006368:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	334c      	adds	r3, #76	; 0x4c
 8006370:	2260      	movs	r2, #96	; 0x60
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fff7 	bl	8007368 <memset>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <prvInitialiseNewTask+0x120>)
 800637e:	651a      	str	r2, [r3, #80]	; 0x50
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	4a0c      	ldr	r2, [pc, #48]	; (80063b4 <prvInitialiseNewTask+0x124>)
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <prvInitialiseNewTask+0x128>)
 800638a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	69b8      	ldr	r0, [r7, #24]
 8006392:	f000 fc29 	bl	8006be8 <pxPortInitialiseStack>
 8006396:	4602      	mov	r2, r0
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a8:	bf00      	nop
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	080075f8 	.word	0x080075f8
 80063b4:	08007618 	.word	0x08007618
 80063b8:	080075d8 	.word	0x080075d8

080063bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063c4:	f000 fd02 	bl	8006dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063c8:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <prvAddNewTaskToReadyList+0xb8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	4a29      	ldr	r2, [pc, #164]	; (8006474 <prvAddNewTaskToReadyList+0xb8>)
 80063d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063d2:	4b29      	ldr	r3, [pc, #164]	; (8006478 <prvAddNewTaskToReadyList+0xbc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063da:	4a27      	ldr	r2, [pc, #156]	; (8006478 <prvAddNewTaskToReadyList+0xbc>)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063e0:	4b24      	ldr	r3, [pc, #144]	; (8006474 <prvAddNewTaskToReadyList+0xb8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d110      	bne.n	800640a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063e8:	f000 fad2 	bl	8006990 <prvInitialiseTaskLists>
 80063ec:	e00d      	b.n	800640a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ee:	4b23      	ldr	r3, [pc, #140]	; (800647c <prvAddNewTaskToReadyList+0xc0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <prvAddNewTaskToReadyList+0xbc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	429a      	cmp	r2, r3
 8006402:	d802      	bhi.n	800640a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006404:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <prvAddNewTaskToReadyList+0xbc>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800640a:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <prvAddNewTaskToReadyList+0xc4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3301      	adds	r3, #1
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <prvAddNewTaskToReadyList+0xc4>)
 8006412:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	2201      	movs	r2, #1
 800641a:	409a      	lsls	r2, r3
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	4a18      	ldr	r2, [pc, #96]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <prvAddNewTaskToReadyList+0xcc>)
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7ff fe02 	bl	8006046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006442:	f000 fcf3 	bl	8006e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <prvAddNewTaskToReadyList+0xc0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00e      	beq.n	800646c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvAddNewTaskToReadyList+0xbc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	429a      	cmp	r2, r3
 800645a:	d207      	bcs.n	800646c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <prvAddNewTaskToReadyList+0xd0>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000694 	.word	0x20000694
 8006478:	20000594 	.word	0x20000594
 800647c:	200006a0 	.word	0x200006a0
 8006480:	200006b0 	.word	0x200006b0
 8006484:	2000069c 	.word	0x2000069c
 8006488:	20000598 	.word	0x20000598
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <vTaskDelay+0x60>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <vTaskDelay+0x30>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064c0:	f000 f884 	bl	80065cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fb28 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064cc:	f000 f88c 	bl	80065e8 <xTaskResumeAll>
 80064d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064d8:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <vTaskDelay+0x64>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200006bc 	.word	0x200006bc
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006506:	463a      	mov	r2, r7
 8006508:	1d39      	adds	r1, r7, #4
 800650a:	f107 0308 	add.w	r3, r7, #8
 800650e:	4618      	mov	r0, r3
 8006510:	f7fa ff56 	bl	80013c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	9202      	str	r2, [sp, #8]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	460a      	mov	r2, r1
 8006526:	4921      	ldr	r1, [pc, #132]	; (80065ac <vTaskStartScheduler+0xb4>)
 8006528:	4821      	ldr	r0, [pc, #132]	; (80065b0 <vTaskStartScheduler+0xb8>)
 800652a:	f7ff fe10 	bl	800614e <xTaskCreateStatic>
 800652e:	4603      	mov	r3, r0
 8006530:	4a20      	ldr	r2, [pc, #128]	; (80065b4 <vTaskStartScheduler+0xbc>)
 8006532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006534:	4b1f      	ldr	r3, [pc, #124]	; (80065b4 <vTaskStartScheduler+0xbc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e001      	b.n	8006546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d11b      	bne.n	8006584 <vTaskStartScheduler+0x8c>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	613b      	str	r3, [r7, #16]
}
 800655e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006560:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <vTaskStartScheduler+0xc0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	334c      	adds	r3, #76	; 0x4c
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <vTaskStartScheduler+0xc4>)
 8006568:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <vTaskStartScheduler+0xc8>)
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006572:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <vTaskStartScheduler+0xcc>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006578:	4b13      	ldr	r3, [pc, #76]	; (80065c8 <vTaskStartScheduler+0xd0>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800657e:	f000 fbb3 	bl	8006ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006582:	e00e      	b.n	80065a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d10a      	bne.n	80065a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60fb      	str	r3, [r7, #12]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <vTaskStartScheduler+0xa8>
}
 80065a2:	bf00      	nop
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	080075b8 	.word	0x080075b8
 80065b0:	08006961 	.word	0x08006961
 80065b4:	200006b8 	.word	0x200006b8
 80065b8:	20000594 	.word	0x20000594
 80065bc:	20000014 	.word	0x20000014
 80065c0:	200006b4 	.word	0x200006b4
 80065c4:	200006a0 	.word	0x200006a0
 80065c8:	20000698 	.word	0x20000698

080065cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <vTaskSuspendAll+0x18>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a03      	ldr	r2, [pc, #12]	; (80065e4 <vTaskSuspendAll+0x18>)
 80065d8:	6013      	str	r3, [r2, #0]
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	200006bc 	.word	0x200006bc

080065e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065f6:	4b41      	ldr	r3, [pc, #260]	; (80066fc <xTaskResumeAll+0x114>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <xTaskResumeAll+0x2c>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	603b      	str	r3, [r7, #0]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006614:	f000 fbda 	bl	8006dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006618:	4b38      	ldr	r3, [pc, #224]	; (80066fc <xTaskResumeAll+0x114>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3b01      	subs	r3, #1
 800661e:	4a37      	ldr	r2, [pc, #220]	; (80066fc <xTaskResumeAll+0x114>)
 8006620:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006622:	4b36      	ldr	r3, [pc, #216]	; (80066fc <xTaskResumeAll+0x114>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d161      	bne.n	80066ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800662a:	4b35      	ldr	r3, [pc, #212]	; (8006700 <xTaskResumeAll+0x118>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d05d      	beq.n	80066ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006632:	e02e      	b.n	8006692 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006634:	4b33      	ldr	r3, [pc, #204]	; (8006704 <xTaskResumeAll+0x11c>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3318      	adds	r3, #24
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fd5b 	bl	80060fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fd56 	bl	80060fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	2201      	movs	r2, #1
 8006656:	409a      	lsls	r2, r3
 8006658:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <xTaskResumeAll+0x120>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4313      	orrs	r3, r2
 800665e:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <xTaskResumeAll+0x120>)
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4a27      	ldr	r2, [pc, #156]	; (800670c <xTaskResumeAll+0x124>)
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7ff fce4 	bl	8006046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <xTaskResumeAll+0x128>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800668c:	4b21      	ldr	r3, [pc, #132]	; (8006714 <xTaskResumeAll+0x12c>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <xTaskResumeAll+0x11c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1cc      	bne.n	8006634 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066a0:	f000 fa18 	bl	8006ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <xTaskResumeAll+0x130>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066b0:	f000 f836 	bl	8006720 <xTaskIncrementTick>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066ba:	4b16      	ldr	r3, [pc, #88]	; (8006714 <xTaskResumeAll+0x12c>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f1      	bne.n	80066b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80066cc:	4b12      	ldr	r3, [pc, #72]	; (8006718 <xTaskResumeAll+0x130>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066d2:	4b10      	ldr	r3, [pc, #64]	; (8006714 <xTaskResumeAll+0x12c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <xTaskResumeAll+0x134>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ee:	f000 fb9d 	bl	8006e2c <vPortExitCritical>

	return xAlreadyYielded;
 80066f2:	68bb      	ldr	r3, [r7, #8]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200006bc 	.word	0x200006bc
 8006700:	20000694 	.word	0x20000694
 8006704:	20000654 	.word	0x20000654
 8006708:	2000069c 	.word	0x2000069c
 800670c:	20000598 	.word	0x20000598
 8006710:	20000594 	.word	0x20000594
 8006714:	200006a8 	.word	0x200006a8
 8006718:	200006a4 	.word	0x200006a4
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672a:	4b51      	ldr	r3, [pc, #324]	; (8006870 <xTaskIncrementTick+0x150>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 808d 	bne.w	800684e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006734:	4b4f      	ldr	r3, [pc, #316]	; (8006874 <xTaskIncrementTick+0x154>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800673c:	4a4d      	ldr	r2, [pc, #308]	; (8006874 <xTaskIncrementTick+0x154>)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d120      	bne.n	800678a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006748:	4b4b      	ldr	r3, [pc, #300]	; (8006878 <xTaskIncrementTick+0x158>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <xTaskIncrementTick+0x48>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	603b      	str	r3, [r7, #0]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xTaskIncrementTick+0x46>
 8006768:	4b43      	ldr	r3, [pc, #268]	; (8006878 <xTaskIncrementTick+0x158>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	4b43      	ldr	r3, [pc, #268]	; (800687c <xTaskIncrementTick+0x15c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a41      	ldr	r2, [pc, #260]	; (8006878 <xTaskIncrementTick+0x158>)
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	4a41      	ldr	r2, [pc, #260]	; (800687c <xTaskIncrementTick+0x15c>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b40      	ldr	r3, [pc, #256]	; (8006880 <xTaskIncrementTick+0x160>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	4a3f      	ldr	r2, [pc, #252]	; (8006880 <xTaskIncrementTick+0x160>)
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	f000 f9a5 	bl	8006ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800678a:	4b3e      	ldr	r3, [pc, #248]	; (8006884 <xTaskIncrementTick+0x164>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	429a      	cmp	r2, r3
 8006792:	d34d      	bcc.n	8006830 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006794:	4b38      	ldr	r3, [pc, #224]	; (8006878 <xTaskIncrementTick+0x158>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <xTaskIncrementTick+0x82>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <xTaskIncrementTick+0x84>
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	4b36      	ldr	r3, [pc, #216]	; (8006884 <xTaskIncrementTick+0x164>)
 80067aa:	f04f 32ff 	mov.w	r2, #4294967295
 80067ae:	601a      	str	r2, [r3, #0]
					break;
 80067b0:	e03e      	b.n	8006830 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067b2:	4b31      	ldr	r3, [pc, #196]	; (8006878 <xTaskIncrementTick+0x158>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d203      	bcs.n	80067d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067ca:	4a2e      	ldr	r2, [pc, #184]	; (8006884 <xTaskIncrementTick+0x164>)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6013      	str	r3, [r2, #0]
						break;
 80067d0:	e02e      	b.n	8006830 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fc90 	bl	80060fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3318      	adds	r3, #24
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fc87 	bl	80060fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	2201      	movs	r2, #1
 80067f4:	409a      	lsls	r2, r3
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <xTaskIncrementTick+0x168>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	4a22      	ldr	r2, [pc, #136]	; (8006888 <xTaskIncrementTick+0x168>)
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4a1f      	ldr	r2, [pc, #124]	; (800688c <xTaskIncrementTick+0x16c>)
 800680e:	441a      	add	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7ff fc15 	bl	8006046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <xTaskIncrementTick+0x170>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	429a      	cmp	r2, r3
 8006828:	d3b4      	bcc.n	8006794 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800682a:	2301      	movs	r3, #1
 800682c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682e:	e7b1      	b.n	8006794 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006830:	4b17      	ldr	r3, [pc, #92]	; (8006890 <xTaskIncrementTick+0x170>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006836:	4915      	ldr	r1, [pc, #84]	; (800688c <xTaskIncrementTick+0x16c>)
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d907      	bls.n	8006858 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e004      	b.n	8006858 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800684e:	4b11      	ldr	r3, [pc, #68]	; (8006894 <xTaskIncrementTick+0x174>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	4a0f      	ldr	r2, [pc, #60]	; (8006894 <xTaskIncrementTick+0x174>)
 8006856:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <xTaskIncrementTick+0x178>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006864:	697b      	ldr	r3, [r7, #20]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200006bc 	.word	0x200006bc
 8006874:	20000698 	.word	0x20000698
 8006878:	2000064c 	.word	0x2000064c
 800687c:	20000650 	.word	0x20000650
 8006880:	200006ac 	.word	0x200006ac
 8006884:	200006b4 	.word	0x200006b4
 8006888:	2000069c 	.word	0x2000069c
 800688c:	20000598 	.word	0x20000598
 8006890:	20000594 	.word	0x20000594
 8006894:	200006a4 	.word	0x200006a4
 8006898:	200006a8 	.word	0x200006a8

0800689c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <vTaskSwitchContext+0xac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068aa:	4b28      	ldr	r3, [pc, #160]	; (800694c <vTaskSwitchContext+0xb0>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068b0:	e044      	b.n	800693c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80068b2:	4b26      	ldr	r3, [pc, #152]	; (800694c <vTaskSwitchContext+0xb0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <vTaskSwitchContext+0xb4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	fab3 f383 	clz	r3, r3
 80068c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	f1c3 031f 	rsb	r3, r3, #31
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	4921      	ldr	r1, [pc, #132]	; (8006954 <vTaskSwitchContext+0xb8>)
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	607b      	str	r3, [r7, #4]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <vTaskSwitchContext+0x5a>
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a14      	ldr	r2, [pc, #80]	; (8006954 <vTaskSwitchContext+0xb8>)
 8006904:	4413      	add	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	605a      	str	r2, [r3, #4]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3308      	adds	r3, #8
 800691a:	429a      	cmp	r2, r3
 800691c:	d104      	bne.n	8006928 <vTaskSwitchContext+0x8c>
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <vTaskSwitchContext+0xbc>)
 8006930:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <vTaskSwitchContext+0xbc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	334c      	adds	r3, #76	; 0x4c
 8006938:	4a08      	ldr	r2, [pc, #32]	; (800695c <vTaskSwitchContext+0xc0>)
 800693a:	6013      	str	r3, [r2, #0]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	200006bc 	.word	0x200006bc
 800694c:	200006a8 	.word	0x200006a8
 8006950:	2000069c 	.word	0x2000069c
 8006954:	20000598 	.word	0x20000598
 8006958:	20000594 	.word	0x20000594
 800695c:	20000014 	.word	0x20000014

08006960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006968:	f000 f852 	bl	8006a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <prvIdleTask+0x28>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d9f9      	bls.n	8006968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <prvIdleTask+0x2c>)
 8006976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006984:	e7f0      	b.n	8006968 <prvIdleTask+0x8>
 8006986:	bf00      	nop
 8006988:	20000598 	.word	0x20000598
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	e00c      	b.n	80069b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <prvInitialiseTaskLists+0x60>)
 80069a8:	4413      	add	r3, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fb20 	bl	8005ff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3301      	adds	r3, #1
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b06      	cmp	r3, #6
 80069ba:	d9ef      	bls.n	800699c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069bc:	480d      	ldr	r0, [pc, #52]	; (80069f4 <prvInitialiseTaskLists+0x64>)
 80069be:	f7ff fb17 	bl	8005ff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069c2:	480d      	ldr	r0, [pc, #52]	; (80069f8 <prvInitialiseTaskLists+0x68>)
 80069c4:	f7ff fb14 	bl	8005ff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069c8:	480c      	ldr	r0, [pc, #48]	; (80069fc <prvInitialiseTaskLists+0x6c>)
 80069ca:	f7ff fb11 	bl	8005ff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ce:	480c      	ldr	r0, [pc, #48]	; (8006a00 <prvInitialiseTaskLists+0x70>)
 80069d0:	f7ff fb0e 	bl	8005ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069d4:	480b      	ldr	r0, [pc, #44]	; (8006a04 <prvInitialiseTaskLists+0x74>)
 80069d6:	f7ff fb0b 	bl	8005ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069da:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <prvInitialiseTaskLists+0x78>)
 80069dc:	4a05      	ldr	r2, [pc, #20]	; (80069f4 <prvInitialiseTaskLists+0x64>)
 80069de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <prvInitialiseTaskLists+0x7c>)
 80069e2:	4a05      	ldr	r2, [pc, #20]	; (80069f8 <prvInitialiseTaskLists+0x68>)
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000598 	.word	0x20000598
 80069f4:	20000624 	.word	0x20000624
 80069f8:	20000638 	.word	0x20000638
 80069fc:	20000654 	.word	0x20000654
 8006a00:	20000668 	.word	0x20000668
 8006a04:	20000680 	.word	0x20000680
 8006a08:	2000064c 	.word	0x2000064c
 8006a0c:	20000650 	.word	0x20000650

08006a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a16:	e019      	b.n	8006a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a18:	f000 f9d8 	bl	8006dcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <prvCheckTasksWaitingTermination+0x50>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fb67 	bl	80060fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <prvCheckTasksWaitingTermination+0x54>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a0b      	ldr	r2, [pc, #44]	; (8006a64 <prvCheckTasksWaitingTermination+0x54>)
 8006a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a38:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <prvCheckTasksWaitingTermination+0x58>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <prvCheckTasksWaitingTermination+0x58>)
 8006a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a42:	f000 f9f3 	bl	8006e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f810 	bl	8006a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <prvCheckTasksWaitingTermination+0x58>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e1      	bne.n	8006a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000668 	.word	0x20000668
 8006a64:	20000694 	.word	0x20000694
 8006a68:	2000067c 	.word	0x2000067c

08006a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	334c      	adds	r3, #76	; 0x4c
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fc8b 	bl	8007394 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d108      	bne.n	8006a9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fb23 	bl	80070d8 <vPortFree>
				vPortFree( pxTCB );
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fb20 	bl	80070d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a98:	e018      	b.n	8006acc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d103      	bne.n	8006aac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fb17 	bl	80070d8 <vPortFree>
	}
 8006aaa:	e00f      	b.n	8006acc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d00a      	beq.n	8006acc <prvDeleteTCB+0x60>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60fb      	str	r3, [r7, #12]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <prvDeleteTCB+0x5e>
	}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ada:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <prvResetNextTaskUnblockTime+0x40>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <prvResetNextTaskUnblockTime+0x14>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <prvResetNextTaskUnblockTime+0x16>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <prvResetNextTaskUnblockTime+0x44>)
 8006af0:	f04f 32ff 	mov.w	r2, #4294967295
 8006af4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006af6:	e008      	b.n	8006b0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <prvResetNextTaskUnblockTime+0x40>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4a04      	ldr	r2, [pc, #16]	; (8006b18 <prvResetNextTaskUnblockTime+0x44>)
 8006b08:	6013      	str	r3, [r2, #0]
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr
 8006b14:	2000064c 	.word	0x2000064c
 8006b18:	200006b4 	.word	0x200006b4

08006b1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2c:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fae2 	bl	80060fc <uxListRemove>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b3e:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	2201      	movs	r2, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d10a      	bne.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b64:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	481a      	ldr	r0, [pc, #104]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b6e:	f7ff fa6a 	bl	8006046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b72:	e026      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b7c:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d209      	bcs.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8c:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7ff fa77 	bl	800608c <vListInsert>
}
 8006b9e:	e010      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7ff fa6d 	bl	800608c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d202      	bcs.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6013      	str	r3, [r2, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000698 	.word	0x20000698
 8006bd0:	20000594 	.word	0x20000594
 8006bd4:	2000069c 	.word	0x2000069c
 8006bd8:	20000680 	.word	0x20000680
 8006bdc:	20000650 	.word	0x20000650
 8006be0:	2000064c 	.word	0x2000064c
 8006be4:	200006b4 	.word	0x200006b4

08006be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <pxPortInitialiseStack+0x54>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b14      	subs	r3, #20
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b20      	subs	r3, #32
 8006c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	08006c41 	.word	0x08006c41

08006c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <prvTaskExitError+0x54>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d00a      	beq.n	8006c6a <prvTaskExitError+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <prvTaskExitError+0x28>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	60bb      	str	r3, [r7, #8]
}
 8006c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c7e:	bf00      	nop
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0fc      	beq.n	8006c80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000010 	.word	0x20000010
	...

08006ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <pxCurrentTCBConst2>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006caa:	f380 8809 	msr	PSP, r0
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cbe:	4770      	bx	lr

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006cc8:	4806      	ldr	r0, [pc, #24]	; (8006ce4 <prvPortStartFirstTask+0x1c>)
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f380 8808 	msr	MSP, r0
 8006cd2:	b662      	cpsie	i
 8006cd4:	b661      	cpsie	f
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	df00      	svc	0
 8006ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ce2:	bf00      	nop
 8006ce4:	e000ed08 	.word	0xe000ed08

08006ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cee:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <xPortStartScheduler+0xd0>)
 8006cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4b2a      	ldr	r3, [pc, #168]	; (8006dbc <xPortStartScheduler+0xd4>)
 8006d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d18:	2207      	movs	r2, #7
 8006d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1c:	e009      	b.n	8006d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d1e:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d0ef      	beq.n	8006d1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1c3 0307 	rsb	r3, r3, #7
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d00a      	beq.n	8006d60 <xPortStartScheduler+0x78>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60bb      	str	r3, [r7, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d96:	f000 f8b9 	bl	8006f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <xPortStartScheduler+0xe0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006da0:	f7ff ff92 	bl	8006cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006da4:	f7ff fd7a 	bl	800689c <vTaskSwitchContext>
	prvTaskExitError();
 8006da8:	f7ff ff4a 	bl	8006c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000e400 	.word	0xe000e400
 8006dbc:	200006c0 	.word	0x200006c0
 8006dc0:	200006c4 	.word	0x200006c4
 8006dc4:	e000ed20 	.word	0xe000ed20
 8006dc8:	20000010 	.word	0x20000010

08006dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
}
 8006de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <vPortEnterCritical+0x58>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <vPortEnterCritical+0x58>)
 8006dee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <vPortEnterCritical+0x58>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d10f      	bne.n	8006e18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <vPortEnterCritical+0x5c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	603b      	str	r3, [r7, #0]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <vPortEnterCritical+0x4a>
	}
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000010 	.word	0x20000010
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <vPortExitCritical+0x24>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	607b      	str	r3, [r7, #4]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d105      	bne.n	8006e6e <vPortExitCritical+0x42>
 8006e62:	2300      	movs	r3, #0
 8006e64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr
 8006e78:	20000010 	.word	0x20000010
 8006e7c:	00000000 	.word	0x00000000

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e90:	6010      	str	r0, [r2, #0]
 8006e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e9a:	f380 8811 	msr	BASEPRI, r0
 8006e9e:	f7ff fcfd 	bl	800689c <vTaskSwitchContext>
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eb6:	f380 8809 	msr	PSP, r0
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	4770      	bx	lr

08006ec0 <pxCurrentTCBConst>:
 8006ec0:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
}
 8006ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ee2:	f7ff fc1d 	bl	8006720 <xTaskIncrementTick>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <SysTick_Handler+0x40>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f383 8811 	msr	BASEPRI, r3
}
 8006efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <vPortSetupTimerInterrupt+0x30>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <vPortSetupTimerInterrupt+0x38>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <vPortSetupTimerInterrupt+0x3c>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <vPortSetupTimerInterrupt+0x40>)
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <vPortSetupTimerInterrupt+0x30>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	e000e010 	.word	0xe000e010
 8006f40:	e000e018 	.word	0xe000e018
 8006f44:	20000004 	.word	0x20000004
 8006f48:	10624dd3 	.word	0x10624dd3
 8006f4c:	e000e014 	.word	0xe000e014

08006f50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f5c:	f7ff fb36 	bl	80065cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f60:	4b58      	ldr	r3, [pc, #352]	; (80070c4 <pvPortMalloc+0x174>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f68:	f000 f910 	bl	800718c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f6c:	4b56      	ldr	r3, [pc, #344]	; (80070c8 <pvPortMalloc+0x178>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4013      	ands	r3, r2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f040 808e 	bne.w	8007096 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01d      	beq.n	8006fbc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f80:	2208      	movs	r2, #8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d014      	beq.n	8006fbc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f023 0307 	bic.w	r3, r3, #7
 8006f98:	3308      	adds	r3, #8
 8006f9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <pvPortMalloc+0x6c>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	617b      	str	r3, [r7, #20]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d069      	beq.n	8007096 <pvPortMalloc+0x146>
 8006fc2:	4b42      	ldr	r3, [pc, #264]	; (80070cc <pvPortMalloc+0x17c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d864      	bhi.n	8007096 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fcc:	4b40      	ldr	r3, [pc, #256]	; (80070d0 <pvPortMalloc+0x180>)
 8006fce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <pvPortMalloc+0x180>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fd6:	e004      	b.n	8006fe2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d903      	bls.n	8006ff4 <pvPortMalloc+0xa4>
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f1      	bne.n	8006fd8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ff4:	4b33      	ldr	r3, [pc, #204]	; (80070c4 <pvPortMalloc+0x174>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d04b      	beq.n	8007096 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2208      	movs	r2, #8
 8007004:	4413      	add	r3, r2
 8007006:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	2308      	movs	r3, #8
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	429a      	cmp	r2, r3
 800701e:	d91f      	bls.n	8007060 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <pvPortMalloc+0xf8>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	613b      	str	r3, [r7, #16]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800705a:	69b8      	ldr	r0, [r7, #24]
 800705c:	f000 f8f8 	bl	8007250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <pvPortMalloc+0x17c>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	4a18      	ldr	r2, [pc, #96]	; (80070cc <pvPortMalloc+0x17c>)
 800706c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <pvPortMalloc+0x17c>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <pvPortMalloc+0x184>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d203      	bcs.n	8007082 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <pvPortMalloc+0x17c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <pvPortMalloc+0x184>)
 8007080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <pvPortMalloc+0x178>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	431a      	orrs	r2, r3
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007096:	f7ff faa7 	bl	80065e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <pvPortMalloc+0x16a>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <pvPortMalloc+0x168>
	return pvReturn;
 80070ba:	69fb      	ldr	r3, [r7, #28]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3728      	adds	r7, #40	; 0x28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200012d0 	.word	0x200012d0
 80070c8:	200012dc 	.word	0x200012dc
 80070cc:	200012d4 	.word	0x200012d4
 80070d0:	200012c8 	.word	0x200012c8
 80070d4:	200012d8 	.word	0x200012d8

080070d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d048      	beq.n	800717c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070ea:	2308      	movs	r3, #8
 80070ec:	425b      	negs	r3, r3
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	4b21      	ldr	r3, [pc, #132]	; (8007184 <vPortFree+0xac>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <vPortFree+0x44>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60fb      	str	r3, [r7, #12]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <vPortFree+0x62>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	60bb      	str	r3, [r7, #8]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <vPortFree+0xac>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4013      	ands	r3, r2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d115      	bne.n	800717c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <vPortFree+0xac>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	43db      	mvns	r3, r3
 800715a:	401a      	ands	r2, r3
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007160:	f7ff fa34 	bl	80065cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	4b07      	ldr	r3, [pc, #28]	; (8007188 <vPortFree+0xb0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4413      	add	r3, r2
 800716e:	4a06      	ldr	r2, [pc, #24]	; (8007188 <vPortFree+0xb0>)
 8007170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007172:	6938      	ldr	r0, [r7, #16]
 8007174:	f000 f86c 	bl	8007250 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007178:	f7ff fa36 	bl	80065e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800717c:	bf00      	nop
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	200012dc 	.word	0x200012dc
 8007188:	200012d4 	.word	0x200012d4

0800718c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007198:	4b27      	ldr	r3, [pc, #156]	; (8007238 <prvHeapInit+0xac>)
 800719a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3307      	adds	r3, #7
 80071aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0307 	bic.w	r3, r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <prvHeapInit+0xac>)
 80071bc:	4413      	add	r3, r2
 80071be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <prvHeapInit+0xb0>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <prvHeapInit+0xb0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071d8:	2208      	movs	r2, #8
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a15      	ldr	r2, [pc, #84]	; (8007240 <prvHeapInit+0xb4>)
 80071ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <prvHeapInit+0xb4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071f6:	4b12      	ldr	r3, [pc, #72]	; (8007240 <prvHeapInit+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800720c:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <prvHeapInit+0xb4>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <prvHeapInit+0xb8>)
 800721a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a09      	ldr	r2, [pc, #36]	; (8007248 <prvHeapInit+0xbc>)
 8007222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <prvHeapInit+0xc0>)
 8007226:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	200006c8 	.word	0x200006c8
 800723c:	200012c8 	.word	0x200012c8
 8007240:	200012d0 	.word	0x200012d0
 8007244:	200012d8 	.word	0x200012d8
 8007248:	200012d4 	.word	0x200012d4
 800724c:	200012dc 	.word	0x200012dc

08007250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007258:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <prvInsertBlockIntoFreeList+0xa8>)
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <prvInsertBlockIntoFreeList+0x14>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d8f7      	bhi.n	800725e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d108      	bne.n	8007292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	441a      	add	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	441a      	add	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d118      	bne.n	80072d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <prvInsertBlockIntoFreeList+0xac>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d00d      	beq.n	80072ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e008      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <prvInsertBlockIntoFreeList+0xac>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e003      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d002      	beq.n	80072ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr
 80072f8:	200012c8 	.word	0x200012c8
 80072fc:	200012d0 	.word	0x200012d0

08007300 <__libc_init_array>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	2600      	movs	r6, #0
 8007304:	4d0c      	ldr	r5, [pc, #48]	; (8007338 <__libc_init_array+0x38>)
 8007306:	4c0d      	ldr	r4, [pc, #52]	; (800733c <__libc_init_array+0x3c>)
 8007308:	1b64      	subs	r4, r4, r5
 800730a:	10a4      	asrs	r4, r4, #2
 800730c:	42a6      	cmp	r6, r4
 800730e:	d109      	bne.n	8007324 <__libc_init_array+0x24>
 8007310:	f000 f8f0 	bl	80074f4 <_init>
 8007314:	2600      	movs	r6, #0
 8007316:	4d0a      	ldr	r5, [pc, #40]	; (8007340 <__libc_init_array+0x40>)
 8007318:	4c0a      	ldr	r4, [pc, #40]	; (8007344 <__libc_init_array+0x44>)
 800731a:	1b64      	subs	r4, r4, r5
 800731c:	10a4      	asrs	r4, r4, #2
 800731e:	42a6      	cmp	r6, r4
 8007320:	d105      	bne.n	800732e <__libc_init_array+0x2e>
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	f855 3b04 	ldr.w	r3, [r5], #4
 8007328:	4798      	blx	r3
 800732a:	3601      	adds	r6, #1
 800732c:	e7ee      	b.n	800730c <__libc_init_array+0xc>
 800732e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007332:	4798      	blx	r3
 8007334:	3601      	adds	r6, #1
 8007336:	e7f2      	b.n	800731e <__libc_init_array+0x1e>
 8007338:	08007638 	.word	0x08007638
 800733c:	08007638 	.word	0x08007638
 8007340:	08007638 	.word	0x08007638
 8007344:	0800763c 	.word	0x0800763c

08007348 <__retarget_lock_acquire_recursive>:
 8007348:	4770      	bx	lr

0800734a <__retarget_lock_release_recursive>:
 800734a:	4770      	bx	lr

0800734c <memcpy>:
 800734c:	440a      	add	r2, r1
 800734e:	4291      	cmp	r1, r2
 8007350:	f100 33ff 	add.w	r3, r0, #4294967295
 8007354:	d100      	bne.n	8007358 <memcpy+0xc>
 8007356:	4770      	bx	lr
 8007358:	b510      	push	{r4, lr}
 800735a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800735e:	4291      	cmp	r1, r2
 8007360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007364:	d1f9      	bne.n	800735a <memcpy+0xe>
 8007366:	bd10      	pop	{r4, pc}

08007368 <memset>:
 8007368:	4603      	mov	r3, r0
 800736a:	4402      	add	r2, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <cleanup_glue>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	460c      	mov	r4, r1
 800737c:	6809      	ldr	r1, [r1, #0]
 800737e:	4605      	mov	r5, r0
 8007380:	b109      	cbz	r1, 8007386 <cleanup_glue+0xe>
 8007382:	f7ff fff9 	bl	8007378 <cleanup_glue>
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800738e:	f000 b869 	b.w	8007464 <_free_r>
	...

08007394 <_reclaim_reent>:
 8007394:	4b2c      	ldr	r3, [pc, #176]	; (8007448 <_reclaim_reent+0xb4>)
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4604      	mov	r4, r0
 800739c:	4283      	cmp	r3, r0
 800739e:	d051      	beq.n	8007444 <_reclaim_reent+0xb0>
 80073a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073a2:	b143      	cbz	r3, 80073b6 <_reclaim_reent+0x22>
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d14a      	bne.n	8007440 <_reclaim_reent+0xac>
 80073aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ac:	6819      	ldr	r1, [r3, #0]
 80073ae:	b111      	cbz	r1, 80073b6 <_reclaim_reent+0x22>
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 f857 	bl	8007464 <_free_r>
 80073b6:	6961      	ldr	r1, [r4, #20]
 80073b8:	b111      	cbz	r1, 80073c0 <_reclaim_reent+0x2c>
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f852 	bl	8007464 <_free_r>
 80073c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80073c2:	b111      	cbz	r1, 80073ca <_reclaim_reent+0x36>
 80073c4:	4620      	mov	r0, r4
 80073c6:	f000 f84d 	bl	8007464 <_free_r>
 80073ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80073cc:	b111      	cbz	r1, 80073d4 <_reclaim_reent+0x40>
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 f848 	bl	8007464 <_free_r>
 80073d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80073d6:	b111      	cbz	r1, 80073de <_reclaim_reent+0x4a>
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 f843 	bl	8007464 <_free_r>
 80073de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80073e0:	b111      	cbz	r1, 80073e8 <_reclaim_reent+0x54>
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 f83e 	bl	8007464 <_free_r>
 80073e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80073ea:	b111      	cbz	r1, 80073f2 <_reclaim_reent+0x5e>
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 f839 	bl	8007464 <_free_r>
 80073f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80073f4:	b111      	cbz	r1, 80073fc <_reclaim_reent+0x68>
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 f834 	bl	8007464 <_free_r>
 80073fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073fe:	b111      	cbz	r1, 8007406 <_reclaim_reent+0x72>
 8007400:	4620      	mov	r0, r4
 8007402:	f000 f82f 	bl	8007464 <_free_r>
 8007406:	69a3      	ldr	r3, [r4, #24]
 8007408:	b1e3      	cbz	r3, 8007444 <_reclaim_reent+0xb0>
 800740a:	4620      	mov	r0, r4
 800740c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800740e:	4798      	blx	r3
 8007410:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007412:	b1b9      	cbz	r1, 8007444 <_reclaim_reent+0xb0>
 8007414:	4620      	mov	r0, r4
 8007416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800741a:	f7ff bfad 	b.w	8007378 <cleanup_glue>
 800741e:	5949      	ldr	r1, [r1, r5]
 8007420:	b941      	cbnz	r1, 8007434 <_reclaim_reent+0xa0>
 8007422:	3504      	adds	r5, #4
 8007424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007426:	2d80      	cmp	r5, #128	; 0x80
 8007428:	68d9      	ldr	r1, [r3, #12]
 800742a:	d1f8      	bne.n	800741e <_reclaim_reent+0x8a>
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f819 	bl	8007464 <_free_r>
 8007432:	e7ba      	b.n	80073aa <_reclaim_reent+0x16>
 8007434:	680e      	ldr	r6, [r1, #0]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f814 	bl	8007464 <_free_r>
 800743c:	4631      	mov	r1, r6
 800743e:	e7ef      	b.n	8007420 <_reclaim_reent+0x8c>
 8007440:	2500      	movs	r5, #0
 8007442:	e7ef      	b.n	8007424 <_reclaim_reent+0x90>
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	bf00      	nop
 8007448:	20000014 	.word	0x20000014

0800744c <__malloc_lock>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__malloc_lock+0x8>)
 800744e:	f7ff bf7b 	b.w	8007348 <__retarget_lock_acquire_recursive>
 8007452:	bf00      	nop
 8007454:	200012e0 	.word	0x200012e0

08007458 <__malloc_unlock>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__malloc_unlock+0x8>)
 800745a:	f7ff bf76 	b.w	800734a <__retarget_lock_release_recursive>
 800745e:	bf00      	nop
 8007460:	200012e0 	.word	0x200012e0

08007464 <_free_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4605      	mov	r5, r0
 8007468:	2900      	cmp	r1, #0
 800746a:	d040      	beq.n	80074ee <_free_r+0x8a>
 800746c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007470:	1f0c      	subs	r4, r1, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfb8      	it	lt
 8007476:	18e4      	addlt	r4, r4, r3
 8007478:	f7ff ffe8 	bl	800744c <__malloc_lock>
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <_free_r+0x8c>)
 800747e:	6813      	ldr	r3, [r2, #0]
 8007480:	b933      	cbnz	r3, 8007490 <_free_r+0x2c>
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	6014      	str	r4, [r2, #0]
 8007486:	4628      	mov	r0, r5
 8007488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800748c:	f7ff bfe4 	b.w	8007458 <__malloc_unlock>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d908      	bls.n	80074a6 <_free_r+0x42>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	e7ed      	b.n	8007482 <_free_r+0x1e>
 80074a6:	461a      	mov	r2, r3
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b10b      	cbz	r3, 80074b0 <_free_r+0x4c>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d9fa      	bls.n	80074a6 <_free_r+0x42>
 80074b0:	6811      	ldr	r1, [r2, #0]
 80074b2:	1850      	adds	r0, r2, r1
 80074b4:	42a0      	cmp	r0, r4
 80074b6:	d10b      	bne.n	80074d0 <_free_r+0x6c>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	4401      	add	r1, r0
 80074bc:	1850      	adds	r0, r2, r1
 80074be:	4283      	cmp	r3, r0
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	d1e0      	bne.n	8007486 <_free_r+0x22>
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4401      	add	r1, r0
 80074ca:	6011      	str	r1, [r2, #0]
 80074cc:	6053      	str	r3, [r2, #4]
 80074ce:	e7da      	b.n	8007486 <_free_r+0x22>
 80074d0:	d902      	bls.n	80074d8 <_free_r+0x74>
 80074d2:	230c      	movs	r3, #12
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	e7d6      	b.n	8007486 <_free_r+0x22>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	1821      	adds	r1, r4, r0
 80074dc:	428b      	cmp	r3, r1
 80074de:	bf01      	itttt	eq
 80074e0:	6819      	ldreq	r1, [r3, #0]
 80074e2:	685b      	ldreq	r3, [r3, #4]
 80074e4:	1809      	addeq	r1, r1, r0
 80074e6:	6021      	streq	r1, [r4, #0]
 80074e8:	6063      	str	r3, [r4, #4]
 80074ea:	6054      	str	r4, [r2, #4]
 80074ec:	e7cb      	b.n	8007486 <_free_r+0x22>
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	200012e4 	.word	0x200012e4

080074f4 <_init>:
 80074f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f6:	bf00      	nop
 80074f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fa:	bc08      	pop	{r3}
 80074fc:	469e      	mov	lr, r3
 80074fe:	4770      	bx	lr

08007500 <_fini>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr
