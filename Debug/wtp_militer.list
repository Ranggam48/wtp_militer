
wtp_militer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005940  08005940  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005940  08005940  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000078  080059c0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001274  080059c0  00021274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145f5  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000376a  00000000  00000000  00034696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00037e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3df  00000000  00000000  0003a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bf7  00000000  00000000  000544f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939e7  00000000  00000000  000680ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dbc  00000000  00000000  000fbb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005824 	.word	0x08005824

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005824 	.word	0x08005824

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <GetPage>:
/* STM32F103 have 128 PAGES (Page 0 to Page 127) of 1 KB each. This makes up 128 KB Flash Memory
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address) {
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	for (int indx = 0; indx < 128; indx++) {
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e016      	b.n	80009c8 <GetPage+0x3c>
		if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1))))
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009a0:	3301      	adds	r3, #1
 80009a2:	029b      	lsls	r3, r3, #10
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d20b      	bcs.n	80009c2 <GetPage+0x36>
				&& (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d304      	bcc.n	80009c2 <GetPage+0x36>
			return (0x08000000 + FLASH_PAGE_SIZE * indx);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009be:	029b      	lsls	r3, r3, #10
 80009c0:	e006      	b.n	80009d0 <GetPage+0x44>
	for (int indx = 0; indx < 128; indx++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b7f      	cmp	r3, #127	; 0x7f
 80009cc:	dde5      	ble.n	800099a <GetPage+0xe>
		}
	}

	return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
	...

080009dc <Flash_Write_Data>:
	float float_variable = thing.a;
	return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data,
		uint16_t numberofwords) {
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	4613      	mov	r3, r2
 80009e8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80009ee:	f001 fd55 	bl	800249c <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ffca 	bl	800098c <GetPage>
 80009f8:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000a06:	69f8      	ldr	r0, [r7, #28]
 8000a08:	f7ff ffc0 	bl	800098c <GetPage>
 8000a0c:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <Flash_Write_Data+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <Flash_Write_Data+0xb4>)
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	0a9b      	lsrs	r3, r3, #10
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <Flash_Write_Data+0xb4>)
 8000a26:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4818      	ldr	r0, [pc, #96]	; (8000a90 <Flash_Write_Data+0xb4>)
 8000a30:	f001 fe26 	bl	8002680 <HAL_FLASHEx_Erase>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d01f      	beq.n	8000a7a <Flash_Write_Data+0x9e>
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 8000a3a:	f001 fd65 	bl	8002508 <HAL_FLASH_GetError>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e022      	b.n	8000a88 <Flash_Write_Data+0xac>

	/* Program the user Flash area word by word*/

	while (sofar < numberofwords) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
				Data[sofar]) == HAL_OK) {
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	681b      	ldr	r3, [r3, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	461c      	mov	r4, r3
 8000a50:	4615      	mov	r5, r2
 8000a52:	4622      	mov	r2, r4
 8000a54:	462b      	mov	r3, r5
 8000a56:	68f9      	ldr	r1, [r7, #12]
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f001 fcaf 	bl	80023bc <HAL_FLASH_Program>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d106      	bne.n	8000a72 <Flash_Write_Data+0x96>
			StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3304      	adds	r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
			sofar++;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a70:	e003      	b.n	8000a7a <Flash_Write_Data+0x9e>
		} else {
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 8000a72:	f001 fd49 	bl	8002508 <HAL_FLASH_GetError>
 8000a76:	4603      	mov	r3, r0
 8000a78:	e006      	b.n	8000a88 <Flash_Write_Data+0xac>
	while (sofar < numberofwords) {
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbdf      	blt.n	8000a42 <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000a82:	f001 fd31 	bl	80024e8 <HAL_FLASH_Lock>

	return 0;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a90:	20000094 	.word	0x20000094

08000a94 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	80fb      	strh	r3, [r7, #6]
	while (1) {

		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	80fa      	strh	r2, [r7, #6]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d000      	beq.n	8000ac2 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000ac0:	e7ef      	b.n	8000aa2 <Flash_Read_Data+0xe>
			break;
 8000ac2:	bf00      	nop
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <HAL_TIM_IC_CaptureCallback>:
    __HAL_TIM_SET_COUNTER(&htim2,0);
    while ((__HAL_TIM_GET_COUNTER(&htim2))<us);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7f1b      	ldrb	r3, [r3, #28]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	f040 8082 	bne.w	8000be6 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (ultrasonic1.Is_First_Captured==0) // if the first value is not captured
 8000ae2:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ae4:	7b1b      	ldrb	r3, [r3, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d11a      	bne.n	8000b20 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			ultrasonic1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000aea:	2100      	movs	r1, #0
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f003 f8a1 	bl	8003c34 <HAL_TIM_ReadCapturedValue>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a40      	ldr	r2, [pc, #256]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000af6:	6013      	str	r3, [r2, #0]
			ultrasonic1.Is_First_Captured = 1;  // set the first captured as true
 8000af8:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6a1a      	ldr	r2, [r3, #32]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 020a 	bic.w	r2, r2, #10
 8000b0c:	621a      	str	r2, [r3, #32]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6a1a      	ldr	r2, [r3, #32]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0202 	orr.w	r2, r2, #2
 8000b1c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 8000b1e:	e062      	b.n	8000be6 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (ultrasonic1.Is_First_Captured==1)   // if the first is already captured
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b22:	7b1b      	ldrb	r3, [r3, #12]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d15e      	bne.n	8000be6 <HAL_TIM_IC_CaptureCallback+0x116>
			ultrasonic1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000b28:	2100      	movs	r1, #0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f003 f882 	bl	8003c34 <HAL_TIM_ReadCapturedValue>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b34:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic1.IC_Val2 > ultrasonic1.IC_Val1)
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d907      	bls.n	8000b5a <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic1.Difference = ultrasonic1.IC_Val2-ultrasonic1.IC_Val1;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b56:	6093      	str	r3, [r2, #8]
 8000b58:	e00f      	b.n	8000b7a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (ultrasonic1.IC_Val1 > ultrasonic1.IC_Val2)
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d909      	bls.n	8000b7a <HAL_TIM_IC_CaptureCallback+0xaa>
				ultrasonic1.Difference = (0xffff - ultrasonic1.IC_Val1) + ultrasonic1.IC_Val2;
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000b74:	33ff      	adds	r3, #255	; 0xff
 8000b76:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b78:	6093      	str	r3, [r2, #8]
			ultrasonic1.Distance = ultrasonic1.Difference * .034/2;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fc28 	bl	80003d4 <__aeabi_ui2d>
 8000b84:	a31a      	add	r3, pc, #104	; (adr r3, 8000bf0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	f7ff fc9d 	bl	80004c8 <__aeabi_dmul>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	4610      	mov	r0, r2
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9e:	f7ff fdbd 	bl	800071c <__aeabi_ddiv>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f7ff fe9f 	bl	80008ec <__aeabi_d2f>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000bb2:	6113      	str	r3, [r2, #16]
			ultrasonic1.Is_First_Captured = 0; // set it back to false
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6a1a      	ldr	r2, [r3, #32]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020a 	bic.w	r2, r2, #10
 8000bc8:	621a      	str	r2, [r3, #32]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6a12      	ldr	r2, [r2, #32]
 8000bd4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0202 	bic.w	r2, r2, #2
 8000be4:	60da      	str	r2, [r3, #12]
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	b020c49c 	.word	0xb020c49c
 8000bf4:	3fa16872 	.word	0x3fa16872
 8000bf8:	200000a4 	.word	0x200000a4
 8000bfc:	20000420 	.word	0x20000420

08000c00 <HAL_CAN_RxFifo1MsgPendingCallback>:

//static unsigned int rx_buffer_last_id;

// Callback untuk penerimaan data can bus
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000c0a:	4a2c      	ldr	r2, [pc, #176]	; (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 ff9a 	bl	8001b48 <HAL_CAN_GetRxMessage>

				if (RxHeader.IDE == CAN_ID_EXT) {
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d146      	bne.n	8000caa <HAL_CAN_RxFifo1MsgPendingCallback+0xaa>
					uint8_t id = RxHeader.ExtId & 0xFF;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
					uint8_t cmd = RxHeader.ExtId >> 8;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	73bb      	strb	r3, [r7, #14]

					if (id == 255 || id == selfID) {
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d004      	beq.n	8000c3a <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
 8000c30:	7bfa      	ldrb	r2, [r7, #15]
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d137      	bne.n	8000caa <HAL_CAN_RxFifo1MsgPendingCallback+0xaa>
						switch (cmd) {
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	2b23      	cmp	r3, #35	; 0x23
 8000c3e:	d006      	beq.n	8000c4e <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 8000c40:	2b23      	cmp	r3, #35	; 0x23
 8000c42:	dc35      	bgt.n	8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d006      	beq.n	8000c56 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d011      	beq.n	8000c70 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>

					}
				}
	//}

}
 8000c4c:	e030      	b.n	8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
	                        ind = 0;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
	                    break;
 8000c54:	e02c      	b.n	8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
							memcpy(rx_buffer + RxData[0], RxData + 1, RxHeader.DLC - 1);
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 8000c5e:	18d0      	adds	r0, r2, r3
 8000c60:	491a      	ldr	r1, [pc, #104]	; (8000ccc <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f004 fd07 	bl	800567c <memcpy>
						break;
 8000c6e:	e01f      	b.n	8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
							rxbuf_ind = (unsigned int)RxData[0] << 8;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000c78:	6013      	str	r3, [r2, #0]
							rxbuf_ind |= RxData[1];
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000c7c:	785b      	ldrb	r3, [r3, #1]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000c88:	6013      	str	r3, [r2, #0]
							if (rxbuf_ind < RX_BUFFER_SIZE) {
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c90:	d80d      	bhi.n	8000cae <HAL_CAN_RxFifo1MsgPendingCallback+0xae>
								memcpy(rx_buffer + rxbuf_ind, RxData + 2, RxHeader.DLC - 2);
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 8000c98:	1898      	adds	r0, r3, r2
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	3b02      	subs	r3, #2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f004 fcea 	bl	800567c <memcpy>
						break;
 8000ca8:	e001      	b.n	8000cae <HAL_CAN_RxFifo1MsgPendingCallback+0xae>
					}
 8000caa:	bf00      	nop
 8000cac:	e000      	b.n	8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
						break;
 8000cae:	bf00      	nop
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000d4 	.word	0x200000d4
 8000cbc:	200000b8 	.word	0x200000b8
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	200000dc 	.word	0x200000dc
 8000cc8:	200000e0 	.word	0x200000e0
 8000ccc:	200000d5 	.word	0x200000d5
 8000cd0:	20000120 	.word	0x20000120
 8000cd4:	200000d6 	.word	0x200000d6

08000cd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <vApplicationGetIdleTaskMemory+0x28>)
 8000ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000124 	.word	0x20000124
 8000d04:	200001d8 	.word	0x200001d8

08000d08 <setTimerEAB>:
void setMode(uint32_t value) {

	Flash_Write_Data(EEPROMMode, (uint32_t*) value, 1);
}

void setTimerEAB(uint32_t value) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	Flash_Write_Data(EEPROMMode, (uint32_t*) value, 1);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <setTimerEAB+0x1c>)
 8000d18:	f7ff fe60 	bl	80009dc <Flash_Write_Data>

}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0801f850 	.word	0x0801f850

08000d28 <Task2>:

}

// kumpulan task freeRTOS

void Task2(void const *argument) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (mode[0] == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <Task2+0x20>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d002      	beq.n	8000d3e <Task2+0x16>
				{

		}

		else if (mode[0] == 2) // mode 2 untuk opsi menggunakan sensor water level
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <Task2+0x20>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b02      	cmp	r3, #2
		}

		else {

		}
		osDelay(500);
 8000d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d42:	f003 fadb 	bl	80042fc <osDelay>
		if (mode[0] == 1) // mode 1 untuk opsi menggunakan sensor ultrasonic
 8000d46:	e7f3      	b.n	8000d30 <Task2+0x8>
 8000d48:	200003ec 	.word	0x200003ec

08000d4c <TaskTimer>:
	}
	/* USER CODE END 5 */
}

void TaskTimer(void const *argument) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (mode[0] == 2 || mode[0] == 1 || mode[0] == 3) { // jika mode bernilai 1/2/3 maka timer eab akan mulai hitung mundur
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <TaskTimer+0x54>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d007      	beq.n	8000d6c <TaskTimer+0x20>
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <TaskTimer+0x54>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d003      	beq.n	8000d6c <TaskTimer+0x20>
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <TaskTimer+0x54>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d10a      	bne.n	8000d82 <TaskTimer+0x36>
			timerEAB[0]--;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <TaskTimer+0x58>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <TaskTimer+0x58>)
 8000d74:	6013      	str	r3, [r2, #0]
			setTimerEAB(timerEAB[0]);
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <TaskTimer+0x58>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ffc4 	bl	8000d08 <setTimerEAB>
 8000d80:	e008      	b.n	8000d94 <TaskTimer+0x48>
		}

		else if (flagBackwash == 1) {
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <TaskTimer+0x5c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d104      	bne.n	8000d94 <TaskTimer+0x48>
			timerBackwash[0]--;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <TaskTimer+0x60>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <TaskTimer+0x60>)
 8000d92:	6013      	str	r3, [r2, #0]
		}
		osDelay(1000);
 8000d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d98:	f003 fab0 	bl	80042fc <osDelay>
		if (mode[0] == 2 || mode[0] == 1 || mode[0] == 3) { // jika mode bernilai 1/2/3 maka timer eab akan mulai hitung mundur
 8000d9c:	e7da      	b.n	8000d54 <TaskTimer+0x8>
 8000d9e:	bf00      	nop
 8000da0:	200003ec 	.word	0x200003ec
 8000da4:	200003e8 	.word	0x200003e8
 8000da8:	200003e0 	.word	0x200003e0
 8000dac:	200003f4 	.word	0x200003f4

08000db0 <fungsiInit>:
	}
	/* USER CODE END 5 */
}

void fungsiInit(void) {
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0

	gpio_init();
 8000db6:	f000 f859 	bl	8000e6c <gpio_init>

	Flash_Read_Data(EEPROMMode, buff, 1); // membaca eeprom mode
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4920      	ldr	r1, [pc, #128]	; (8000e40 <fungsiInit+0x90>)
 8000dbe:	4821      	ldr	r0, [pc, #132]	; (8000e44 <fungsiInit+0x94>)
 8000dc0:	f7ff fe68 	bl	8000a94 <Flash_Read_Data>
	mode[0] = buff[0];
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <fungsiInit+0x90>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <fungsiInit+0x98>)
 8000dca:	6013      	str	r3, [r2, #0]

	Flash_Read_Data(EEPROMTimerEAB, buff, 1); // membaca eeprom timerEAB
 8000dcc:	2201      	movs	r2, #1
 8000dce:	491c      	ldr	r1, [pc, #112]	; (8000e40 <fungsiInit+0x90>)
 8000dd0:	481e      	ldr	r0, [pc, #120]	; (8000e4c <fungsiInit+0x9c>)
 8000dd2:	f7ff fe5f 	bl	8000a94 <Flash_Read_Data>
	timerEAB[0] = buff[0];
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <fungsiInit+0x90>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <fungsiInit+0xa0>)
 8000ddc:	6013      	str	r3, [r2, #0]

	Flash_Read_Data(EEPROMCounter, buff, 1); // membaca eeprom counter
 8000dde:	2201      	movs	r2, #1
 8000de0:	4917      	ldr	r1, [pc, #92]	; (8000e40 <fungsiInit+0x90>)
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <fungsiInit+0xa4>)
 8000de4:	f7ff fe56 	bl	8000a94 <Flash_Read_Data>
	counter[0] = buff[0];
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <fungsiInit+0x90>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <fungsiInit+0xa8>)
 8000dee:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, Task2, osPriorityNormal, 0, 256);
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <fungsiInit+0xac>)
 8000df2:	f107 041c 	add.w	r4, r7, #28
 8000df6:	461d      	mov	r5, r3
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fa2a 	bl	8004264 <osThreadCreate>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <fungsiInit+0xb0>)
 8000e14:	6013      	str	r3, [r2, #0]

	osThreadDef(TaskTimer, TaskTimer, osPriorityNormal, 0, 256);
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <fungsiInit+0xb4>)
 8000e18:	463c      	mov	r4, r7
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fa19 	bl	8004264 <osThreadCreate>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <fungsiInit+0xb8>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3738      	adds	r7, #56	; 0x38
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	200003e4 	.word	0x200003e4
 8000e44:	0801f850 	.word	0x0801f850
 8000e48:	200003ec 	.word	0x200003ec
 8000e4c:	0801f840 	.word	0x0801f840
 8000e50:	200003e8 	.word	0x200003e8
 8000e54:	0801f860 	.word	0x0801f860
 8000e58:	200003f0 	.word	0x200003f0
 8000e5c:	08005850 	.word	0x08005850
 8000e60:	200003d8 	.word	0x200003d8
 8000e64:	0800586c 	.word	0x0800586c
 8000e68:	200003dc 	.word	0x200003dc

08000e6c <gpio_init>:




void gpio_init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <gpio_init+0xd0>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <gpio_init+0xd0>)
 8000e86:	f043 0320 	orr.w	r3, r3, #32
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <gpio_init+0xd0>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <gpio_init+0xd0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <gpio_init+0xd0>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <gpio_init+0xd0>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <gpio_init+0xd0>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <gpio_init+0xd0>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <gpio_init+0xd0>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <gpio_init+0xd0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <gpio_init+0xd0>)
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <gpio_init+0xd0>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f647 4103 	movw	r1, #31747	; 0x7c03
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <gpio_init+0xd4>)
 8000ee8:	f001 fdf6 	bl	8002ad8 <HAL_GPIO_WritePin>
		  GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8000ef2:	4814      	ldr	r0, [pc, #80]	; (8000f44 <gpio_init+0xd8>)
 8000ef4:	f001 fdf0 	bl	8002ad8 <HAL_GPIO_WritePin>
		  GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
 8000ef8:	f647 4303 	movw	r3, #31747	; 0x7c03
 8000efc:	613b      	str	r3, [r7, #16]
		  	  	  	  	  GPIO_PIN_13 | GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <gpio_init+0xd4>)
 8000f12:	f001 fc5d 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
 8000f16:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000f1a:	613b      	str	r3, [r7, #16]
		  	  	  	  	  GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <gpio_init+0xd8>)
 8000f30:	f001 fc4e 	bl	80027d0 <HAL_GPIO_Init>

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40010800 	.word	0x40010800

08000f48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4e:	f000 fbc1 	bl	80016d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f52:	f000 f823 	bl	8000f9c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f56:	f000 f981 	bl	800125c <MX_GPIO_Init>
	MX_CAN_Init();
 8000f5a:	f000 f865 	bl	8001028 <MX_CAN_Init>
	MX_TIM2_Init();
 8000f5e:	f000 f8bb 	bl	80010d8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000f62:	f000 f92d 	bl	80011c0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	fungsiInit();
 8000f66:	f7ff ff23 	bl	8000db0 <fungsiInit>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <main+0x4c>)
 8000f6c:	1d3c      	adds	r4, r7, #4
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 f96f 	bl	8004264 <osThreadCreate>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <main+0x50>)
 8000f8a:	6013      	str	r3, [r2, #0]
	/* add threads, ... */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000f8c:	f003 f963 	bl	8004256 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f90:	e7fe      	b.n	8000f90 <main+0x48>
 8000f92:	bf00      	nop
 8000f94:	08005894 	.word	0x08005894
 8000f98:	200004b0 	.word	0x200004b0

08000f9c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	2228      	movs	r2, #40	; 0x28
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fb74 	bl	8005698 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fd8f 	bl	8002b08 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x58>
		Error_Handler();
 8000ff0:	f000 f9b8 	bl	8001364 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fffc 	bl	800300c <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x82>
		Error_Handler();
 800101a:	f000 f9a3 	bl	8001364 <Error_Handler>
	}
}
 800101e:	bf00      	nop
 8001020:	3740      	adds	r7, #64	; 0x40
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001030:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <MX_CAN_Init+0xac>)
 8001032:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 18;
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001036:	2212      	movs	r2, #18
 8001038:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_CAN_Init+0xa8>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001048:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104c:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001056:	2200      	movs	r2, #0
 8001058:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_CAN_Init+0xa8>)
 800105c:	2200      	movs	r2, #0
 800105e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001062:	2200      	movs	r2, #0
 8001064:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001068:	2200      	movs	r2, #0
 800106a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_CAN_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_CAN_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8001078:	4815      	ldr	r0, [pc, #84]	; (80010d0 <MX_CAN_Init+0xa8>)
 800107a:	f000 fb5d 	bl	8001738 <HAL_CAN_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_CAN_Init+0x60>
		Error_Handler();
 8001084:	f000 f96e 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 800108c:	230a      	movs	r3, #10
 800108e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x1 >> 11;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x1 >> 11;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_CAN_Init+0xa8>)
 80010b6:	f000 fc3a 	bl	800192e <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_CAN_Init+0xa8>)
 80010bc:	f000 fd00 	bl	8001ac0 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80010c0:	2110      	movs	r1, #16
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_CAN_Init+0xa8>)
 80010c4:	f000 fe51 	bl	8001d6a <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200003f8 	.word	0x200003f8
 80010d4:	40006400 	.word	0x40006400

080010d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001108:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <MX_TIM2_Init+0xe4>)
 800110c:	2247      	movs	r2, #71	; 0x47
 800110e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535 - 1;
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800111c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800112a:	4824      	ldr	r0, [pc, #144]	; (80011bc <MX_TIM2_Init+0xe4>)
 800112c:	f002 f922 	bl	8003374 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x62>
		Error_Handler();
 8001136:	f000 f915 	bl	8001364 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4619      	mov	r1, r3
 8001146:	481d      	ldr	r0, [pc, #116]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001148:	f002 fcb0 	bl	8003aac <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001152:	f000 f907 	bl	8001364 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001156:	4819      	ldr	r0, [pc, #100]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001158:	f002 f9ae 	bl	80034b8 <HAL_TIM_IC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x8e>
		Error_Handler();
 8001162:	f000 f8ff 	bl	8001364 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_TIM2_Init+0xe4>)
 8001176:	f002 ffe7 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8001180:	f000 f8f0 	bl	8001364 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <MX_TIM2_Init+0xe4>)
 800119c:	f002 fbf2 	bl	8003984 <HAL_TIM_IC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0xd2>
		Error_Handler();
 80011a6:	f000 f8dd 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80011aa:	2100      	movs	r1, #0
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <MX_TIM2_Init+0xe4>)
 80011ae:	f002 f9db 	bl	8003568 <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000420 	.word	0x20000420

080011c0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_TIM3_Init+0x94>)
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_TIM3_Init+0x98>)
 80011e0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM3_Init+0x94>)
 80011e4:	2247      	movs	r2, #71	; 0x47
 80011e6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM3_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535 - 1;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM3_Init+0x94>)
 80011f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011f4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_TIM3_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM3_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <MX_TIM3_Init+0x94>)
 8001204:	f002 f8b6 	bl	8003374 <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0x52>
		Error_Handler();
 800120e:	f000 f8a9 	bl	8001364 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM3_Init+0x94>)
 8001220:	f002 fc44 	bl	8003aac <HAL_TIM_ConfigClockSource>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x6e>
		Error_Handler();
 800122a:	f000 f89b 	bl	8001364 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM3_Init+0x94>)
 800123c:	f002 ff84 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001246:	f000 f88d 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000468 	.word	0x20000468
 8001258:	40000400 	.word	0x40000400

0800125c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_GPIO_Init+0xc4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <MX_GPIO_Init+0xc4>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_GPIO_Init+0xc4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_GPIO_Init+0xc4>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <MX_GPIO_Init+0xc4>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <MX_GPIO_Init+0xc4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_GPIO_Init+0xc4>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <MX_GPIO_Init+0xc4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_GPIO_Init+0xc4>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <MX_GPIO_Init+0xc8>)
 80012c0:	f001 fc0a 	bl	8002ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <MX_GPIO_Init+0xcc>)
 80012cc:	f001 fc04 	bl	8002ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2118      	movs	r1, #24
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <MX_GPIO_Init+0xc8>)
 80012d6:	f001 fbff 	bl	8002ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB11 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_3 | GPIO_PIN_4;
 80012da:	f640 0318 	movw	r3, #2072	; 0x818
 80012de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0xc8>)
 80012f4:	f001 fa6c 	bl	80027d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_GPIO_Init+0xcc>)
 8001312:	f001 fa5d 	bl	80027d0 <HAL_GPIO_Init>

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	40010c00 	.word	0x40010c00
 8001328:	40010800 	.word	0x40010800

0800132c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
		//Ultrasonic_Read1();

		//timerEAB--;
//		Flash_Write_Data(EEPROMTimerEAB, (uint32_t*) timerEAB, 1);
//		Flash_Write_Data(EEPROMMode, (uint32_t*) mode, 1);
		osDelay(1000);
 8001334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001338:	f002 ffe0 	bl	80042fc <osDelay>
 800133c:	e7fa      	b.n	8001334 <StartDefaultTask+0x8>
	...

08001340 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001352:	f000 f9d5 	bl	8001700 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40000800 	.word	0x40000800

08001364 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_MspInit+0x68>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_MspInit+0x68>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_MspInit+0x68>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_MspInit+0x68>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_MspInit+0x68>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x68>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	f06f 0001 	mvn.w	r0, #1
 80013ae:	f000 ffda 	bl	8002366 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x6c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_MspInit+0x6c>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000

080013e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_CAN_MspInit+0x9c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d139      	bne.n	8001474 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 8001406:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140a:	61d3      	str	r3, [r2, #28]
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001446:	f001 f9c3 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001460:	f001 f9b6 	bl	80027d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2105      	movs	r1, #5
 8001468:	2015      	movs	r0, #21
 800146a:	f000 ff7c 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800146e:	2015      	movs	r0, #21
 8001470:	f000 ff95 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40006400 	.word	0x40006400
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a6:	d13f      	bne.n	8001528 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	61d3      	str	r3, [r2, #28]
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a23      	ldr	r2, [pc, #140]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	481a      	ldr	r0, [pc, #104]	; (8001558 <HAL_TIM_Base_MspInit+0xd0>)
 80014ee:	f001 f96f 	bl	80027d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_TIM_Base_MspInit+0xd4>)
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	201c      	movs	r0, #28
 800151c:	f000 ff23 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001520:	201c      	movs	r0, #28
 8001522:	f000 ff3c 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001526:	e010      	b.n	800154a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_TIM_Base_MspInit+0xd8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10b      	bne.n	800154a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_TIM_Base_MspInit+0xcc>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010000 	.word	0x40010000
 8001560:	40000400 	.word	0x40000400

08001564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	201e      	movs	r0, #30
 800157a:	f000 fef4 	bl	8002366 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800157e:	201e      	movs	r0, #30
 8001580:	f000 ff0d 	bl	800239e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_InitTick+0xa0>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_InitTick+0xa0>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	61d3      	str	r3, [r2, #28]
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_InitTick+0xa0>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159c:	f107 0210 	add.w	r2, r7, #16
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 fe96 	bl	80032d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015ac:	f001 fe80 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_InitTick+0xa4>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	3b01      	subs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_InitTick+0xa8>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_InitTick+0xac>)
 80015c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_InitTick+0xa8>)
 80015cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_InitTick+0xa8>)
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_InitTick+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_InitTick+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_InitTick+0xa8>)
 80015e6:	f001 fec5 	bl	8003374 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <HAL_InitTick+0xa8>)
 80015f2:	f001 ff0f 	bl	8003414 <HAL_TIM_Base_Start_IT>
 80015f6:	4603      	mov	r3, r0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	431bde83 	.word	0x431bde83
 800160c:	200004b4 	.word	0x200004b4
 8001610:	40000800 	.word	0x40000800

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
	...

08001640 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <CAN1_RX1_IRQHandler+0x10>)
 8001646:	f000 fbb5 	bl	8001db4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200003f8 	.word	0x200003f8

08001654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM2_IRQHandler+0x10>)
 800165a:	f002 f88b 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000420 	.word	0x20000420

08001668 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM4_IRQHandler+0x10>)
 800166e:	f002 f881 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200004b4 	.word	0x200004b4

0800167c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	; (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ae:	f7ff ffe5 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f003 ffbd 	bl	8005630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016b6:	f7ff fc47 	bl	8000f48 <main>
  bx lr
 80016ba:	4770      	bx	lr
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016c4:	08005948 	.word	0x08005948
  ldr r2, =_sbss
 80016c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80016cc:	20001274 	.word	0x20001274

080016d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_2_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_Init+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_Init+0x28>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 fe33 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f7ff ff3a 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fe3e 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x1c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x20>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <HAL_IncTick+0x20>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	2000000c 	.word	0x2000000c
 8001720:	200004fc 	.word	0x200004fc

08001724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_GetTick+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	200004fc 	.word	0x200004fc

08001738 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0ed      	b.n	8001926 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fe42 	bl	80013e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800176c:	f7ff ffda 	bl	8001724 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001772:	e012      	b.n	800179a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001774:	f7ff ffd6 	bl	8001724 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b0a      	cmp	r3, #10
 8001780:	d90b      	bls.n	800179a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2205      	movs	r2, #5
 8001792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0c5      	b.n	8001926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0e5      	beq.n	8001774 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0202 	bic.w	r2, r2, #2
 80017b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b8:	f7ff ffb4 	bl	8001724 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017be:	e012      	b.n	80017e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c0:	f7ff ffb0 	bl	8001724 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b0a      	cmp	r3, #10
 80017cc:	d90b      	bls.n	80017e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2205      	movs	r2, #5
 80017de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e09f      	b.n	8001926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e5      	bne.n	80017c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e1b      	ldrb	r3, [r3, #24]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d108      	bne.n	800180e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e007      	b.n	800181e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7e5b      	ldrb	r3, [r3, #25]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e007      	b.n	8001848 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001846:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7e9b      	ldrb	r3, [r3, #26]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0220 	orr.w	r2, r2, #32
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e007      	b.n	8001872 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0220 	bic.w	r2, r2, #32
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7edb      	ldrb	r3, [r3, #27]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0210 	bic.w	r2, r2, #16
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e007      	b.n	800189c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0210 	orr.w	r2, r2, #16
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0208 	orr.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7f5b      	ldrb	r3, [r3, #29]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0204 	orr.w	r2, r2, #4
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0204 	bic.w	r2, r2, #4
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	ea42 0103 	orr.w	r1, r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800192e:	b480      	push	{r7}
 8001930:	b087      	sub	sp, #28
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001944:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d003      	beq.n	8001954 <HAL_CAN_ConfigFilter+0x26>
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	2b02      	cmp	r3, #2
 8001950:	f040 80aa 	bne.w	8001aa8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2201      	movs	r2, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d123      	bne.n	80019d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3248      	adds	r2, #72	; 0x48
 80019b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019cc:	6979      	ldr	r1, [r7, #20]
 80019ce:	3348      	adds	r3, #72	; 0x48
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d122      	bne.n	8001a24 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3248      	adds	r2, #72	; 0x48
 8001a04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	3348      	adds	r3, #72	; 0x48
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a3e:	e007      	b.n	8001a50 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a6a:	e007      	b.n	8001a7c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a9a:	f023 0201 	bic.w	r2, r3, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e006      	b.n	8001ab6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d12e      	bne.n	8001b32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aec:	f7ff fe1a 	bl	8001724 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001af2:	e012      	b.n	8001b1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001af4:	f7ff fe16 	bl	8001724 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b0a      	cmp	r3, #10
 8001b00:	d90b      	bls.n	8001b1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2205      	movs	r2, #5
 8001b12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e012      	b.n	8001b40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e5      	bne.n	8001af4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e006      	b.n	8001b40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d003      	beq.n	8001b6c <HAL_CAN_GetRxMessage+0x24>
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80f3 	bne.w	8001d52 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d116      	bne.n	8001bae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0e7      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0d8      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	331b      	adds	r3, #27
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0204 	and.w	r2, r3, #4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10c      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0d5b      	lsrs	r3, r3, #21
 8001bdc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e00b      	b.n	8001bfe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	331b      	adds	r3, #27
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	331b      	adds	r3, #27
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0202 	and.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	331b      	adds	r3, #27
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	331b      	adds	r3, #27
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	331b      	adds	r3, #27
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0a1a      	lsrs	r2, r3, #8
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1a      	lsrs	r2, r3, #16
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e1a      	lsrs	r2, r3, #24
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3303      	adds	r3, #3
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0a1a      	lsrs	r2, r3, #8
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3305      	adds	r3, #5
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0c1a      	lsrs	r2, r3, #16
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3306      	adds	r3, #6
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e1a      	lsrs	r2, r3, #24
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3307      	adds	r3, #7
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	e007      	b.n	8001d4e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e006      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d002      	beq.n	8001d88 <HAL_CAN_ActivateNotification+0x1e>
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d109      	bne.n	8001d9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6959      	ldr	r1, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e006      	b.n	8001daa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07c      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d023      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f983 	bl	8002122 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e1c:	e016      	b.n	8001e4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	e00c      	b.n	8001e4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	e002      	b.n	8001e4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f986 	bl	8002158 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d024      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f962 	bl	8002134 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e70:	e016      	b.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
 8001e84:	e00c      	b.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e002      	b.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f965 	bl	800216a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f941 	bl	8002146 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ec4:	e016      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed8:	e00c      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	e002      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f944 	bl	800217c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f933 	bl	80021a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f91b 	bl	800218e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f90a 	bl	80021b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fe22 	bl	8000c00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8f3 	bl	80021c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8eb 	bl	80021d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07b      	beq.n	8002102 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d072      	beq.n	80020fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	2b00      	cmp	r3, #0
 8002070:	d043      	beq.n	80020fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03e      	beq.n	80020fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002082:	2b60      	cmp	r3, #96	; 0x60
 8002084:	d02b      	beq.n	80020de <HAL_CAN_IRQHandler+0x32a>
 8002086:	2b60      	cmp	r3, #96	; 0x60
 8002088:	d82e      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 800208a:	2b50      	cmp	r3, #80	; 0x50
 800208c:	d022      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x320>
 800208e:	2b50      	cmp	r3, #80	; 0x50
 8002090:	d82a      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d019      	beq.n	80020ca <HAL_CAN_IRQHandler+0x316>
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d826      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 800209a:	2b30      	cmp	r3, #48	; 0x30
 800209c:	d010      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x30c>
 800209e:	2b30      	cmp	r3, #48	; 0x30
 80020a0:	d822      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d002      	beq.n	80020ac <HAL_CAN_IRQHandler+0x2f8>
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d005      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020aa:	e01d      	b.n	80020e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020b4:	e019      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020be:	e014      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c8:	e00f      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d2:	e00a      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020dc:	e005      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020e6:	e000      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            break;
 80020e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2204      	movs	r2, #4
 8002100:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f867 	bl	80021e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800211a:	bf00      	nop
 800211c:	3728      	adds	r7, #40	; 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <__NVIC_EnableIRQ+0x34>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff4f 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff64 	bl	8002244 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ffb2 	bl	80022ec <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff81 	bl	8002298 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff57 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <HAL_FLASH_Program+0xd8>)
 80023d8:	7e1b      	ldrb	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_FLASH_Program+0x26>
 80023de:	2302      	movs	r3, #2
 80023e0:	e054      	b.n	800248c <HAL_FLASH_Program+0xd0>
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_FLASH_Program+0xd8>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ec:	f000 f8b2 	bl	8002554 <FLASH_WaitForLastOperation>
 80023f0:	4603      	mov	r3, r0
 80023f2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d144      	bne.n	8002484 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002400:	2301      	movs	r3, #1
 8002402:	757b      	strb	r3, [r7, #21]
 8002404:	e007      	b.n	8002416 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d102      	bne.n	8002412 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800240c:	2302      	movs	r3, #2
 800240e:	757b      	strb	r3, [r7, #21]
 8002410:	e001      	b.n	8002416 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002412:	2304      	movs	r3, #4
 8002414:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002416:	2300      	movs	r3, #0
 8002418:	75bb      	strb	r3, [r7, #22]
 800241a:	e02d      	b.n	8002478 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800241c:	7dbb      	ldrb	r3, [r7, #22]
 800241e:	005a      	lsls	r2, r3, #1
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	eb02 0c03 	add.w	ip, r2, r3
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	0119      	lsls	r1, r3, #4
 800242a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242e:	f1c1 0620 	rsb	r6, r1, #32
 8002432:	f1a1 0020 	sub.w	r0, r1, #32
 8002436:	fa22 f401 	lsr.w	r4, r2, r1
 800243a:	fa03 f606 	lsl.w	r6, r3, r6
 800243e:	4334      	orrs	r4, r6
 8002440:	fa23 f000 	lsr.w	r0, r3, r0
 8002444:	4304      	orrs	r4, r0
 8002446:	fa23 f501 	lsr.w	r5, r3, r1
 800244a:	b2a3      	uxth	r3, r4
 800244c:	4619      	mov	r1, r3
 800244e:	4660      	mov	r0, ip
 8002450:	f000 f864 	bl	800251c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002458:	f000 f87c 	bl	8002554 <FLASH_WaitForLastOperation>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_FLASH_Program+0xdc>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_FLASH_Program+0xdc>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	3301      	adds	r3, #1
 8002476:	75bb      	strb	r3, [r7, #22]
 8002478:	7dba      	ldrb	r2, [r7, #22]
 800247a:	7d7b      	ldrb	r3, [r7, #21]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3cd      	bcc.n	800241c <HAL_FLASH_Program+0x60>
 8002480:	e000      	b.n	8002484 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002482:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_FLASH_Program+0xd8>)
 8002486:	2200      	movs	r2, #0
 8002488:	761a      	strb	r2, [r3, #24]

  return status;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
}
 800248c:	4618      	mov	r0, r3
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002494:	20000500 	.word	0x20000500
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_FLASH_Unlock+0x40>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_FLASH_Unlock+0x40>)
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_FLASH_Unlock+0x44>)
 80024b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_FLASH_Unlock+0x40>)
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_FLASH_Unlock+0x48>)
 80024bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <HAL_FLASH_Unlock+0x40>)
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80024ce:	79fb      	ldrb	r3, [r7, #7]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	45670123 	.word	0x45670123
 80024e4:	cdef89ab 	.word	0xcdef89ab

080024e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_FLASH_Lock+0x1c>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_FLASH_Lock+0x1c>)
 80024f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_FLASH_GetError+0x10>)
 800250e:	69db      	ldr	r3, [r3, #28]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000500 	.word	0x20000500

0800251c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <FLASH_Program_HalfWord+0x30>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <FLASH_Program_HalfWord+0x34>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <FLASH_Program_HalfWord+0x34>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	801a      	strh	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000500 	.word	0x20000500
 8002550:	40022000 	.word	0x40022000

08002554 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff f8e2 	bl	8001724 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002562:	e010      	b.n	8002586 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d00c      	beq.n	8002586 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <FLASH_WaitForLastOperation+0x2e>
 8002572:	f7ff f8d7 	bl	8001724 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d201      	bcs.n	8002586 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e025      	b.n	80025d2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <FLASH_WaitForLastOperation+0x88>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e8      	bne.n	8002564 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <FLASH_WaitForLastOperation+0x88>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <FLASH_WaitForLastOperation+0x88>)
 80025a0:	2220      	movs	r2, #32
 80025a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <FLASH_WaitForLastOperation+0x88>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <FLASH_WaitForLastOperation+0x88>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <FLASH_WaitForLastOperation+0x88>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025c8:	f000 f80a 	bl	80025e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40022000 	.word	0x40022000

080025e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <FLASH_SetErrorCode+0x98>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <FLASH_SetErrorCode+0x9c>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <FLASH_SetErrorCode+0x9c>)
 8002600:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <FLASH_SetErrorCode+0x98>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <FLASH_SetErrorCode+0x9c>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	4a17      	ldr	r2, [pc, #92]	; (800267c <FLASH_SetErrorCode+0x9c>)
 8002620:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <FLASH_SetErrorCode+0x98>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <FLASH_SetErrorCode+0x9c>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	4a0f      	ldr	r2, [pc, #60]	; (800267c <FLASH_SetErrorCode+0x9c>)
 8002640:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <FLASH_SetErrorCode+0x98>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <FLASH_SetErrorCode+0x98>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f240 1201 	movw	r2, #257	; 0x101
 8002654:	4293      	cmp	r3, r2
 8002656:	d106      	bne.n	8002666 <FLASH_SetErrorCode+0x86>
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <FLASH_SetErrorCode+0x98>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <FLASH_SetErrorCode+0x98>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	61d3      	str	r3, [r2, #28]
}  
 8002664:	e002      	b.n	800266c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <FLASH_SetErrorCode+0x98>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60d3      	str	r3, [r2, #12]
}  
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000
 800267c:	20000500 	.word	0x20000500

08002680 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_FLASHEx_Erase+0xd0>)
 8002694:	7e1b      	ldrb	r3, [r3, #24]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_FLASHEx_Erase+0x1e>
 800269a:	2302      	movs	r3, #2
 800269c:	e053      	b.n	8002746 <HAL_FLASHEx_Erase+0xc6>
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_FLASHEx_Erase+0xd0>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d116      	bne.n	80026da <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026b0:	f7ff ff50 	bl	8002554 <FLASH_WaitForLastOperation>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d141      	bne.n	800273e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 f84c 	bl	8002758 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026c4:	f7ff ff46 	bl	8002554 <FLASH_WaitForLastOperation>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_FLASHEx_Erase+0xd4>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_FLASHEx_Erase+0xd4>)
 80026d2:	f023 0304 	bic.w	r3, r3, #4
 80026d6:	6113      	str	r3, [r2, #16]
 80026d8:	e031      	b.n	800273e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026de:	f7ff ff39 	bl	8002554 <FLASH_WaitForLastOperation>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d12a      	bne.n	800273e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f04f 32ff 	mov.w	r2, #4294967295
 80026ee:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	e019      	b.n	800272c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80026f8:	68b8      	ldr	r0, [r7, #8]
 80026fa:	f000 f849 	bl	8002790 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002702:	f7ff ff27 	bl	8002554 <FLASH_WaitForLastOperation>
 8002706:	4603      	mov	r3, r0
 8002708:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_FLASHEx_Erase+0xd4>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_FLASHEx_Erase+0xd4>)
 8002710:	f023 0302 	bic.w	r3, r3, #2
 8002714:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	601a      	str	r2, [r3, #0]
            break;
 8002722:	e00c      	b.n	800273e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	029a      	lsls	r2, r3, #10
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d3dc      	bcc.n	80026f8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_FLASHEx_Erase+0xd0>)
 8002740:	2200      	movs	r2, #0
 8002742:	761a      	strb	r2, [r3, #24]

  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000500 	.word	0x20000500
 8002754:	40022000 	.word	0x40022000

08002758 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <FLASH_MassErase+0x30>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <FLASH_MassErase+0x34>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <FLASH_MassErase+0x34>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <FLASH_MassErase+0x34>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <FLASH_MassErase+0x34>)
 8002778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000500 	.word	0x20000500
 800278c:	40022000 	.word	0x40022000

08002790 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <FLASH_PageErase+0x38>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <FLASH_PageErase+0x3c>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <FLASH_PageErase+0x3c>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <FLASH_PageErase+0x3c>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <FLASH_PageErase+0x3c>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <FLASH_PageErase+0x3c>)
 80027b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000500 	.word	0x20000500
 80027cc:	40022000 	.word	0x40022000

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b08b      	sub	sp, #44	; 0x2c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	e169      	b.n	8002ab8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e4:	2201      	movs	r2, #1
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8158 	bne.w	8002ab2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a9a      	ldr	r2, [pc, #616]	; (8002a70 <HAL_GPIO_Init+0x2a0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d05e      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 800280c:	4a98      	ldr	r2, [pc, #608]	; (8002a70 <HAL_GPIO_Init+0x2a0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d875      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002812:	4a98      	ldr	r2, [pc, #608]	; (8002a74 <HAL_GPIO_Init+0x2a4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d058      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002818:	4a96      	ldr	r2, [pc, #600]	; (8002a74 <HAL_GPIO_Init+0x2a4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d86f      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800281e:	4a96      	ldr	r2, [pc, #600]	; (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d052      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002824:	4a94      	ldr	r2, [pc, #592]	; (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d869      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800282a:	4a94      	ldr	r2, [pc, #592]	; (8002a7c <HAL_GPIO_Init+0x2ac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04c      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002830:	4a92      	ldr	r2, [pc, #584]	; (8002a7c <HAL_GPIO_Init+0x2ac>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d863      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002836:	4a92      	ldr	r2, [pc, #584]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d046      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 800283c:	4a90      	ldr	r2, [pc, #576]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d85d      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002842:	2b12      	cmp	r3, #18
 8002844:	d82a      	bhi.n	800289c <HAL_GPIO_Init+0xcc>
 8002846:	2b12      	cmp	r3, #18
 8002848:	d859      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <HAL_GPIO_Init+0x80>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	080028cb 	.word	0x080028cb
 8002854:	080028a5 	.word	0x080028a5
 8002858:	080028b7 	.word	0x080028b7
 800285c:	080028f9 	.word	0x080028f9
 8002860:	080028ff 	.word	0x080028ff
 8002864:	080028ff 	.word	0x080028ff
 8002868:	080028ff 	.word	0x080028ff
 800286c:	080028ff 	.word	0x080028ff
 8002870:	080028ff 	.word	0x080028ff
 8002874:	080028ff 	.word	0x080028ff
 8002878:	080028ff 	.word	0x080028ff
 800287c:	080028ff 	.word	0x080028ff
 8002880:	080028ff 	.word	0x080028ff
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028ff 	.word	0x080028ff
 800288c:	080028ff 	.word	0x080028ff
 8002890:	080028ff 	.word	0x080028ff
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028c1 	.word	0x080028c1
 800289c:	4a79      	ldr	r2, [pc, #484]	; (8002a84 <HAL_GPIO_Init+0x2b4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a2:	e02c      	b.n	80028fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	623b      	str	r3, [r7, #32]
          break;
 80028aa:	e029      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	3304      	adds	r3, #4
 80028b2:	623b      	str	r3, [r7, #32]
          break;
 80028b4:	e024      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	3308      	adds	r3, #8
 80028bc:	623b      	str	r3, [r7, #32]
          break;
 80028be:	e01f      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	330c      	adds	r3, #12
 80028c6:	623b      	str	r3, [r7, #32]
          break;
 80028c8:	e01a      	b.n	8002900 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d2:	2304      	movs	r3, #4
 80028d4:	623b      	str	r3, [r7, #32]
          break;
 80028d6:	e013      	b.n	8002900 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e0:	2308      	movs	r3, #8
 80028e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	611a      	str	r2, [r3, #16]
          break;
 80028ea:	e009      	b.n	8002900 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ec:	2308      	movs	r3, #8
 80028ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	615a      	str	r2, [r3, #20]
          break;
 80028f6:	e003      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x130>
          break;
 80028fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2bff      	cmp	r3, #255	; 0xff
 8002904:	d801      	bhi.n	800290a <HAL_GPIO_Init+0x13a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	e001      	b.n	800290e <HAL_GPIO_Init+0x13e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d802      	bhi.n	800291c <HAL_GPIO_Init+0x14c>
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	e002      	b.n	8002922 <HAL_GPIO_Init+0x152>
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3b08      	subs	r3, #8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	210f      	movs	r1, #15
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	6a39      	ldr	r1, [r7, #32]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80b1 	beq.w	8002ab2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002950:	4b4d      	ldr	r3, [pc, #308]	; (8002a88 <HAL_GPIO_Init+0x2b8>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a4c      	ldr	r2, [pc, #304]	; (8002a88 <HAL_GPIO_Init+0x2b8>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_GPIO_Init+0x2b8>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002968:	4a48      	ldr	r2, [pc, #288]	; (8002a8c <HAL_GPIO_Init+0x2bc>)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <HAL_GPIO_Init+0x2c0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <HAL_GPIO_Init+0x1ec>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <HAL_GPIO_Init+0x2c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00d      	beq.n	80029b8 <HAL_GPIO_Init+0x1e8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x1e4>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <HAL_GPIO_Init+0x2cc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_GPIO_Init+0x1e0>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029b0:	2304      	movs	r3, #4
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029bc:	2300      	movs	r3, #0
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ce:	492f      	ldr	r1, [pc, #188]	; (8002a8c <HAL_GPIO_Init+0x2bc>)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d006      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	492c      	ldr	r1, [pc, #176]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4928      	ldr	r1, [pc, #160]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4922      	ldr	r1, [pc, #136]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	491e      	ldr	r1, [pc, #120]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4918      	ldr	r1, [pc, #96]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4914      	ldr	r1, [pc, #80]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d021      	beq.n	8002aa4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
 8002a6c:	e021      	b.n	8002ab2 <HAL_GPIO_Init+0x2e2>
 8002a6e:	bf00      	nop
 8002a70:	10320000 	.word	0x10320000
 8002a74:	10310000 	.word	0x10310000
 8002a78:	10220000 	.word	0x10220000
 8002a7c:	10210000 	.word	0x10210000
 8002a80:	10120000 	.word	0x10120000
 8002a84:	10110000 	.word	0x10110000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40010800 	.word	0x40010800
 8002a94:	40010c00 	.word	0x40010c00
 8002a98:	40011000 	.word	0x40011000
 8002a9c:	40011400 	.word	0x40011400
 8002aa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_GPIO_Init+0x304>)
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4909      	ldr	r1, [pc, #36]	; (8002ad4 <HAL_GPIO_Init+0x304>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f ae8e 	bne.w	80027e4 <HAL_GPIO_Init+0x14>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	372c      	adds	r7, #44	; 0x2c
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	611a      	str	r2, [r3, #16]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e272      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8087 	beq.w	8002c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b28:	4b92      	ldr	r3, [pc, #584]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d00c      	beq.n	8002b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b34:	4b8f      	ldr	r3, [pc, #572]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d112      	bne.n	8002b66 <HAL_RCC_OscConfig+0x5e>
 8002b40:	4b8c      	ldr	r3, [pc, #560]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4c:	d10b      	bne.n	8002b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4e:	4b89      	ldr	r3, [pc, #548]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d06c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x12c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d168      	bne.n	8002c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e24c      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x76>
 8002b70:	4b80      	ldr	r3, [pc, #512]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a7f      	ldr	r2, [pc, #508]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	e02e      	b.n	8002bdc <HAL_RCC_OscConfig+0xd4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x98>
 8002b86:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7a      	ldr	r2, [pc, #488]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b78      	ldr	r3, [pc, #480]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a77      	ldr	r2, [pc, #476]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xd4>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xbc>
 8002baa:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a71      	ldr	r2, [pc, #452]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xd4>
 8002bc4:	4b6b      	ldr	r3, [pc, #428]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6a      	ldr	r2, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a67      	ldr	r2, [pc, #412]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fd9e 	bl	8001724 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fd9a 	bl	8001724 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e200      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xe4>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fd8a 	bl	8001724 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fd86 	bl	8001724 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1ec      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x10c>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c4e:	4b49      	ldr	r3, [pc, #292]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d11c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x18c>
 8002c5a:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d116      	bne.n	8002c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x176>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e1c0      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4939      	ldr	r1, [pc, #228]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	e03a      	b.n	8002d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9c:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fd3f 	bl	8001724 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fd3b 	bl	8001724 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1a1      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4927      	ldr	r1, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fd1e 	bl	8001724 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd1a 	bl	8001724 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e180      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03a      	beq.n	8002d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d019      	beq.n	8002d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCC_OscConfig+0x274>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7fe fcfe 	bl	8001724 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fcfa 	bl	8001724 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e160      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f000 faf4 	bl	8003338 <RCC_Delay>
 8002d50:	e01c      	b.n	8002d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_RCC_OscConfig+0x274>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fe fce4 	bl	8001724 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5e:	e00f      	b.n	8002d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe fce0 	bl	8001724 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d908      	bls.n	8002d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e146      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	42420000 	.word	0x42420000
 8002d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e9      	bne.n	8002d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a6 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b8b      	ldr	r3, [pc, #556]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a87      	ldr	r2, [pc, #540]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]
 8002db6:	4b85      	ldr	r3, [pc, #532]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x4c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d118      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x4c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x4c8>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fca1 	bl	8001724 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fe fc9d 	bl	8001724 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e103      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <HAL_RCC_OscConfig+0x4c8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x312>
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a6e      	ldr	r2, [pc, #440]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	e02d      	b.n	8002e76 <HAL_RCC_OscConfig+0x36e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x334>
 8002e22:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	6213      	str	r3, [r2, #32]
 8002e2e:	4b67      	ldr	r3, [pc, #412]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a66      	ldr	r2, [pc, #408]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	6213      	str	r3, [r2, #32]
 8002e3a:	e01c      	b.n	8002e76 <HAL_RCC_OscConfig+0x36e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x356>
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4a5d      	ldr	r2, [pc, #372]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	e00b      	b.n	8002e76 <HAL_RCC_OscConfig+0x36e>
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a5a      	ldr	r2, [pc, #360]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	4b58      	ldr	r3, [pc, #352]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d015      	beq.n	8002eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fc51 	bl	8001724 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe fc4d 	bl	8001724 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0b1      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ee      	beq.n	8002e86 <HAL_RCC_OscConfig+0x37e>
 8002ea8:	e014      	b.n	8002ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fc3b 	bl	8001724 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fc37 	bl	8001724 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e09b      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d105      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eda:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8087 	beq.w	8002ffe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d061      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d146      	bne.n	8002f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fc0b 	bl	8001724 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe fc07 	bl	8001724 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e06d      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d108      	bne.n	8002f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4921      	ldr	r1, [pc, #132]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a19      	ldr	r1, [r3, #32]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	491b      	ldr	r1, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fbdb 	bl	8001724 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fbd7 	bl	8001724 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e03d      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x46a>
 8002f90:	e035      	b.n	8002ffe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fbc4 	bl	8001724 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fbc0 	bl	8001724 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e026      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x498>
 8002fbe:	e01e      	b.n	8002ffe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e019      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_OscConfig+0x500>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0d0      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d910      	bls.n	8003050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	4965      	ldr	r1, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800308a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d040      	beq.n	800312c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d115      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e073      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06b      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f023 0203 	bic.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4936      	ldr	r1, [pc, #216]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030fc:	f7fe fb12 	bl	8001724 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fe fb0e 	bl	8001724 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e053      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 020c 	and.w	r2, r3, #12
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d1eb      	bne.n	8003104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d210      	bcs.n	800315c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 0207 	bic.w	r2, r3, #7
 8003142:	4922      	ldr	r1, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1cc>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1d0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe f9d2 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	080058c8 	.word	0x080058c8
 80031d8:	20000004 	.word	0x20000004
 80031dc:	20000008 	.word	0x20000008

080031e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	b490      	push	{r4, r7}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_GetSysClockFreq+0xac>)
 80031e8:	1d3c      	adds	r4, r7, #4
 80031ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031f0:	f240 2301 	movw	r3, #513	; 0x201
 80031f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb0>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x40>
 800321a:	2b08      	cmp	r3, #8
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x46>
 800321e:	e02b      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003220:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003222:	623b      	str	r3, [r7, #32]
      break;
 8003224:	e02b      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	0c9b      	lsrs	r3, r3, #18
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	3328      	adds	r3, #40	; 0x28
 8003230:	443b      	add	r3, r7
 8003232:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003236:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0c5b      	lsrs	r3, r3, #17
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	3328      	adds	r3, #40	; 0x28
 800324e:	443b      	add	r3, r7
 8003250:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003254:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800325a:	fb03 f202 	mul.w	r2, r3, r2
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	e004      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	623b      	str	r3, [r7, #32]
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800327a:	623b      	str	r3, [r7, #32]
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6a3b      	ldr	r3, [r7, #32]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bc90      	pop	{r4, r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	080058b0 	.word	0x080058b0
 8003290:	40021000 	.word	0x40021000
 8003294:	007a1200 	.word	0x007a1200
 8003298:	003d0900 	.word	0x003d0900

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <HAL_RCC_GetHCLKFreq+0x10>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	20000004 	.word	0x20000004

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff2 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	080058d8 	.word	0x080058d8

080032d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	220f      	movs	r2, #15
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_RCC_GetClockConfig+0x58>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCC_GetClockConfig+0x58>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_GetClockConfig+0x58>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_RCC_GetClockConfig+0x58>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0207 	and.w	r2, r3, #7
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40021000 	.word	0x40021000
 8003334:	40022000 	.word	0x40022000

08003338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <RCC_Delay+0x34>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <RCC_Delay+0x38>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003354:	bf00      	nop
  }
  while (Delay --);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	60fa      	str	r2, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f9      	bne.n	8003354 <RCC_Delay+0x1c>
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000004 	.word	0x20000004
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e041      	b.n	800340a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe f874 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 fc9e 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e03a      	b.n	80034a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_TIM_Base_Start_IT+0x98>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x58>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003456:	d009      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x58>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x58>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d010      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	e007      	b.n	80034a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800

080034b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e041      	b.n	800354e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f839 	bl	8003556 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f000 fbfc 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <HAL_TIM_IC_Start_IT+0x1a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e013      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x42>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d104      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0x2a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e00b      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x42>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_IC_Start_IT+0x3a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e003      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x42>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_IC_Start_IT+0x54>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e013      	b.n	80035e4 <HAL_TIM_IC_Start_IT+0x7c>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d104      	bne.n	80035cc <HAL_TIM_IC_Start_IT+0x64>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e00b      	b.n	80035e4 <HAL_TIM_IC_Start_IT+0x7c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d104      	bne.n	80035dc <HAL_TIM_IC_Start_IT+0x74>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e003      	b.n	80035e4 <HAL_TIM_IC_Start_IT+0x7c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d102      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ec:	7bbb      	ldrb	r3, [r7, #14]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0b3      	b.n	800375e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_IC_Start_IT+0x9e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	e013      	b.n	800362e <HAL_TIM_IC_Start_IT+0xc6>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d104      	bne.n	8003616 <HAL_TIM_IC_Start_IT+0xae>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	e00b      	b.n	800362e <HAL_TIM_IC_Start_IT+0xc6>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_TIM_IC_Start_IT+0xbe>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003624:	e003      	b.n	800362e <HAL_TIM_IC_Start_IT+0xc6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <HAL_TIM_IC_Start_IT+0xd6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	e013      	b.n	8003666 <HAL_TIM_IC_Start_IT+0xfe>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d104      	bne.n	800364e <HAL_TIM_IC_Start_IT+0xe6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800364c:	e00b      	b.n	8003666 <HAL_TIM_IC_Start_IT+0xfe>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Start_IT+0xf6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	e003      	b.n	8003666 <HAL_TIM_IC_Start_IT+0xfe>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d841      	bhi.n	80036f0 <HAL_TIM_IC_Start_IT+0x188>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_TIM_IC_Start_IT+0x10c>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036f1 	.word	0x080036f1
 800367c:	080036f1 	.word	0x080036f1
 8003680:	080036f1 	.word	0x080036f1
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036f1 	.word	0x080036f1
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036f1 	.word	0x080036f1
 8003694:	080036cd 	.word	0x080036cd
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f1 	.word	0x080036f1
 80036a4:	080036df 	.word	0x080036df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0202 	orr.w	r2, r2, #2
 80036b6:	60da      	str	r2, [r3, #12]
      break;
 80036b8:	e01b      	b.n	80036f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0204 	orr.w	r2, r2, #4
 80036c8:	60da      	str	r2, [r3, #12]
      break;
 80036ca:	e012      	b.n	80036f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	60da      	str	r2, [r3, #12]
      break;
 80036dc:	e009      	b.n	80036f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0210 	orr.w	r2, r2, #16
 80036ec:	60da      	str	r2, [r3, #12]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80036f0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fcff 	bl	80040fe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_TIM_IC_Start_IT+0x200>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00e      	beq.n	8003728 <HAL_TIM_IC_Start_IT+0x1c0>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d009      	beq.n	8003728 <HAL_TIM_IC_Start_IT+0x1c0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <HAL_TIM_IC_Start_IT+0x204>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_IC_Start_IT+0x1c0>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_TIM_IC_Start_IT+0x208>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d111      	bne.n	800374c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b06      	cmp	r3, #6
 8003738:	d010      	beq.n	800375c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374a:	e007      	b.n	800375c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800

08003774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d122      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0202 	mvn.w	r2, #2
 80037a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd f98a 	bl	8000ad0 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa7c 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fa82 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0204 	mvn.w	r2, #4
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd f960 	bl	8000ad0 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa52 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fa58 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0208 	mvn.w	r2, #8
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2204      	movs	r2, #4
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd f936 	bl	8000ad0 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa28 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa2e 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b10      	cmp	r3, #16
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b10      	cmp	r3, #16
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0210 	mvn.w	r2, #16
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2208      	movs	r2, #8
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd f90c 	bl	8000ad0 <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9fe 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa04 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0201 	mvn.w	r2, #1
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fd24 	bl	8001340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fc79 	bl	8004216 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9c8 	bl	8003ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b20      	cmp	r3, #32
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0220 	mvn.w	r2, #32
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fc44 	bl	8004204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_TIM_IC_ConfigChannel+0x1a>
 800399a:	2302      	movs	r3, #2
 800399c:	e082      	b.n	8003aa4 <HAL_TIM_IC_ConfigChannel+0x120>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f000 f9fc 	bl	8003db8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 020c 	bic.w	r2, r2, #12
 80039ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6999      	ldr	r1, [r3, #24]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	619a      	str	r2, [r3, #24]
 80039e2:	e05a      	b.n	8003a9a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d11c      	bne.n	8003a24 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f000 fa65 	bl	8003ec8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6999      	ldr	r1, [r3, #24]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	021a      	lsls	r2, r3, #8
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	619a      	str	r2, [r3, #24]
 8003a22:	e03a      	b.n	8003a9a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d11b      	bne.n	8003a62 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f000 fab0 	bl	8003f9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 020c 	bic.w	r2, r2, #12
 8003a4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	61da      	str	r2, [r3, #28]
 8003a60:	e01b      	b.n	8003a9a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f000 facf 	bl	8004014 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69d9      	ldr	r1, [r3, #28]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	021a      	lsls	r2, r3, #8
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_ConfigClockSource+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0b3      	b.n	8003c2c <HAL_TIM_ConfigClockSource+0x180>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d03e      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0xd0>
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b02:	f200 8087 	bhi.w	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	f000 8085 	beq.w	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b12:	d87f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d01a      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xa2>
 8003b18:	2b70      	cmp	r3, #112	; 0x70
 8003b1a:	d87b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d050      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x116>
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d877      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b24:	2b50      	cmp	r3, #80	; 0x50
 8003b26:	d03c      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xf6>
 8003b28:	2b50      	cmp	r3, #80	; 0x50
 8003b2a:	d873      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d058      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x136>
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d86f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d064      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x156>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	d86b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d060      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x156>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d867      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x156>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d05a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b4c:	e062      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f000 faaf 	bl	80040c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	609a      	str	r2, [r3, #8]
      break;
 8003b7a:	e04e      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f000 fa98 	bl	80040c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9e:	609a      	str	r2, [r3, #8]
      break;
 8003ba0:	e03b      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 f95c 	bl	8003e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2150      	movs	r1, #80	; 0x50
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fa66 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e02b      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 f9b6 	bl	8003f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2160      	movs	r1, #96	; 0x60
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fa56 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 8003be0:	e01b      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f93c 	bl	8003e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fa46 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 8003c00:	e00b      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 fa3d 	bl	800408c <TIM_ITRx_SetConfig>
        break;
 8003c12:	e002      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d831      	bhi.n	8003cac <HAL_TIM_ReadCapturedValue+0x78>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003cad 	.word	0x08003cad
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003ca3 	.word	0x08003ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	60fb      	str	r3, [r7, #12]

      break;
 8003c8c:	e00f      	b.n	8003cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	60fb      	str	r3, [r7, #12]

      break;
 8003c96:	e00a      	b.n	8003cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	60fb      	str	r3, [r7, #12]

      break;
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	60fb      	str	r3, [r7, #12]

      break;
 8003caa:	e000      	b.n	8003cae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003cac:	bf00      	nop
  }

  return tmpreg;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop

08003cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <TIM_Base_SetConfig+0xb8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x30>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x30>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <TIM_Base_SetConfig+0xbc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x30>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <TIM_Base_SetConfig+0xc0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <TIM_Base_SetConfig+0xb8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_Base_SetConfig+0x62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d007      	beq.n	8003d56 <TIM_Base_SetConfig+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <TIM_Base_SetConfig+0xbc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0x62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <TIM_Base_SetConfig+0xc0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <TIM_Base_SetConfig+0xb8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d103      	bne.n	8003d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	615a      	str	r2, [r3, #20]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800

08003db8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f023 0201 	bic.w	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <TIM_TI1_SetConfig+0xa8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_TI1_SetConfig+0x46>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d007      	beq.n	8003dfe <TIM_TI1_SetConfig+0x46>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <TIM_TI1_SetConfig+0xac>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_TI1_SetConfig+0x46>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <TIM_TI1_SetConfig+0xb0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <TIM_TI1_SetConfig+0x4a>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <TIM_TI1_SetConfig+0x4c>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e003      	b.n	8003e22 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f023 030a 	bic.w	r3, r3, #10
 8003e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f003 030a 	and.w	r3, r3, #10
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800

08003e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 030a 	bic.w	r3, r3, #10
 8003ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0210 	bic.w	r2, r3, #16
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	031b      	lsls	r3, r3, #12
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f023 0210 	bic.w	r2, r3, #16
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	031b      	lsls	r3, r3, #12
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004052:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	031b      	lsls	r3, r3, #12
 8004058:	b29b      	uxth	r3, r3
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	031b      	lsls	r3, r3, #12
 800406c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f043 0307 	orr.w	r3, r3, #7
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	609a      	str	r2, [r3, #8]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040fe:	b480      	push	{r7}
 8004100:	b087      	sub	sp, #28
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2201      	movs	r2, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	43db      	mvns	r3, r3
 8004120:	401a      	ands	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	fa01 f303 	lsl.w	r3, r1, r3
 8004136:	431a      	orrs	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
	...

08004148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e046      	b.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d009      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a10      	ldr	r2, [pc, #64]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800

08004204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800423a:	2b84      	cmp	r3, #132	; 0x84
 800423c:	d005      	beq.n	800424a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800423e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	3303      	adds	r3, #3
 8004248:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800425a:	f000 fae7 	bl	800482c <vTaskStartScheduler>
  
  return osOK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}

08004264 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af04      	add	r7, sp, #16
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <osThreadCreate+0x54>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01c      	beq.n	80042b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685c      	ldr	r4, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681d      	ldr	r5, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691e      	ldr	r6, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ffc9 	bl	8004228 <makeFreeRtosPriority>
 8004296:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a0:	9202      	str	r2, [sp, #8]
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	9100      	str	r1, [sp, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	4632      	mov	r2, r6
 80042aa:	4629      	mov	r1, r5
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 f8e8 	bl	8004482 <xTaskCreateStatic>
 80042b2:	4603      	mov	r3, r0
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e01c      	b.n	80042f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685c      	ldr	r4, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c4:	b29e      	uxth	r6, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ffab 	bl	8004228 <makeFreeRtosPriority>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f107 030c 	add.w	r3, r7, #12
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	9200      	str	r2, [sp, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4632      	mov	r2, r6
 80042e0:	4629      	mov	r1, r5
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 f929 	bl	800453a <xTaskCreate>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <osDelay+0x16>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	e000      	b.n	8004314 <osDelay+0x18>
 8004312:	2301      	movs	r3, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa55 	bl	80047c4 <vTaskDelay>
  
  return osOK;
 800431a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f103 0208 	add.w	r2, r3, #8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f103 0208 	add.w	r2, r3, #8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f103 0208 	add.w	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d103      	bne.n	80043e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e00c      	b.n	80043fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3308      	adds	r3, #8
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e002      	b.n	80043ee <vListInsert+0x2e>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d2f6      	bcs.n	80043e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6892      	ldr	r2, [r2, #8]
 8004446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6852      	ldr	r2, [r2, #4]
 8004450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d103      	bne.n	8004464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1e5a      	subs	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004482:	b580      	push	{r7, lr}
 8004484:	b08e      	sub	sp, #56	; 0x38
 8004486:	af04      	add	r7, sp, #16
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	61fb      	str	r3, [r7, #28]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044c8:	23b4      	movs	r3, #180	; 0xb4
 80044ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2bb4      	cmp	r3, #180	; 0xb4
 80044d0:	d00a      	beq.n	80044e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61bb      	str	r3, [r7, #24]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01e      	beq.n	800452c <xTaskCreateStatic+0xaa>
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2202      	movs	r2, #2
 8004502:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004506:	2300      	movs	r3, #0
 8004508:	9303      	str	r3, [sp, #12]
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	9302      	str	r3, [sp, #8]
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f850 	bl	80045c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004526:	f000 f8e3 	bl	80046f0 <prvAddNewTaskToReadyList>
 800452a:	e001      	b.n	8004530 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004530:	697b      	ldr	r3, [r7, #20]
	}
 8004532:	4618      	mov	r0, r3
 8004534:	3728      	adds	r7, #40	; 0x28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800453a:	b580      	push	{r7, lr}
 800453c:	b08c      	sub	sp, #48	; 0x30
 800453e:	af04      	add	r7, sp, #16
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fe96 	bl	8005280 <pvPortMalloc>
 8004554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800455c:	20b4      	movs	r0, #180	; 0xb4
 800455e:	f000 fe8f 	bl	8005280 <pvPortMalloc>
 8004562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
 8004570:	e005      	b.n	800457e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f000 ff48 	bl	8005408 <vPortFree>
 8004578:	e001      	b.n	800457e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d017      	beq.n	80045b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	2300      	movs	r3, #0
 8004590:	9303      	str	r3, [sp, #12]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	9302      	str	r3, [sp, #8]
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f80e 	bl	80045c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045a8:	69f8      	ldr	r0, [r7, #28]
 80045aa:	f000 f8a1 	bl	80046f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045ae:	2301      	movs	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e002      	b.n	80045ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
 80045b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045ba:	69bb      	ldr	r3, [r7, #24]
	}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	3b01      	subs	r3, #1
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f023 0307 	bic.w	r3, r3, #7
 80045ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <prvInitialiseNewTask+0x48>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	617b      	str	r3, [r7, #20]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e012      	b.n	8004638 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	7819      	ldrb	r1, [r3, #0]
 800461a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	3334      	adds	r3, #52	; 0x34
 8004622:	460a      	mov	r2, r1
 8004624:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	d9e9      	bls.n	8004612 <prvInitialiseNewTask+0x4e>
 800463e:	e000      	b.n	8004642 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004640:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	2b06      	cmp	r3, #6
 800464e:	d901      	bls.n	8004654 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004650:	2306      	movs	r3, #6
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800465e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2200      	movs	r2, #0
 8004664:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fe79 	bl	8004362 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	3318      	adds	r3, #24
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fe74 	bl	8004362 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	f1c3 0207 	rsb	r2, r3, #7
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	334c      	adds	r3, #76	; 0x4c
 80046a4:	2260      	movs	r2, #96	; 0x60
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fff5 	bl	8005698 <memset>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <prvInitialiseNewTask+0x120>)
 80046b2:	651a      	str	r2, [r3, #80]	; 0x50
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <prvInitialiseNewTask+0x124>)
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <prvInitialiseNewTask+0x128>)
 80046be:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	69b8      	ldr	r0, [r7, #24]
 80046c6:	f000 fc29 	bl	8004f1c <pxPortInitialiseStack>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046dc:	bf00      	nop
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08005900 	.word	0x08005900
 80046e8:	08005920 	.word	0x08005920
 80046ec:	080058e0 	.word	0x080058e0

080046f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046f8:	f000 fd00 	bl	80050fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046fc:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <prvAddNewTaskToReadyList+0xb8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <prvAddNewTaskToReadyList+0xb8>)
 8004704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <prvAddNewTaskToReadyList+0xbc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800470e:	4a27      	ldr	r2, [pc, #156]	; (80047ac <prvAddNewTaskToReadyList+0xbc>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <prvAddNewTaskToReadyList+0xb8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d110      	bne.n	800473e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800471c:	f000 fad2 	bl	8004cc4 <prvInitialiseTaskLists>
 8004720:	e00d      	b.n	800473e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <prvAddNewTaskToReadyList+0xc0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <prvAddNewTaskToReadyList+0xbc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d802      	bhi.n	800473e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <prvAddNewTaskToReadyList+0xbc>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <prvAddNewTaskToReadyList+0xc4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <prvAddNewTaskToReadyList+0xc4>)
 8004746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <prvAddNewTaskToReadyList+0xc8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <prvAddNewTaskToReadyList+0xc8>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <prvAddNewTaskToReadyList+0xcc>)
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fe02 	bl	800437a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004776:	f000 fcf1 	bl	800515c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <prvAddNewTaskToReadyList+0xc0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <prvAddNewTaskToReadyList+0xbc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	429a      	cmp	r2, r3
 800478e:	d207      	bcs.n	80047a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <prvAddNewTaskToReadyList+0xd0>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000620 	.word	0x20000620
 80047ac:	20000520 	.word	0x20000520
 80047b0:	2000062c 	.word	0x2000062c
 80047b4:	2000063c 	.word	0x2000063c
 80047b8:	20000628 	.word	0x20000628
 80047bc:	20000524 	.word	0x20000524
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d017      	beq.n	8004806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <vTaskDelay+0x60>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <vTaskDelay+0x30>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60bb      	str	r3, [r7, #8]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047f4:	f000 f884 	bl	8004900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047f8:	2100      	movs	r1, #0
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fb28 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004800:	f000 f88c 	bl	800491c <xTaskResumeAll>
 8004804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <vTaskDelay+0x64>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000648 	.word	0x20000648
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800483a:	463a      	mov	r2, r7
 800483c:	1d39      	adds	r1, r7, #4
 800483e:	f107 0308 	add.w	r3, r7, #8
 8004842:	4618      	mov	r0, r3
 8004844:	f7fc fa48 	bl	8000cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	9202      	str	r2, [sp, #8]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	460a      	mov	r2, r1
 800485a:	4921      	ldr	r1, [pc, #132]	; (80048e0 <vTaskStartScheduler+0xb4>)
 800485c:	4821      	ldr	r0, [pc, #132]	; (80048e4 <vTaskStartScheduler+0xb8>)
 800485e:	f7ff fe10 	bl	8004482 <xTaskCreateStatic>
 8004862:	4603      	mov	r3, r0
 8004864:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <vTaskStartScheduler+0xbc>)
 8004866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <vTaskStartScheduler+0xbc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e001      	b.n	800487a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11b      	bne.n	80048b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
}
 8004892:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <vTaskStartScheduler+0xc0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	334c      	adds	r3, #76	; 0x4c
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <vTaskStartScheduler+0xc4>)
 800489c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <vTaskStartScheduler+0xc8>)
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <vTaskStartScheduler+0xcc>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <vTaskStartScheduler+0xd0>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048b2:	f000 fbb1 	bl	8005018 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048b6:	e00e      	b.n	80048d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d10a      	bne.n	80048d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <vTaskStartScheduler+0xa8>
}
 80048d6:	bf00      	nop
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	080058c0 	.word	0x080058c0
 80048e4:	08004c95 	.word	0x08004c95
 80048e8:	20000644 	.word	0x20000644
 80048ec:	20000520 	.word	0x20000520
 80048f0:	20000014 	.word	0x20000014
 80048f4:	20000640 	.word	0x20000640
 80048f8:	2000062c 	.word	0x2000062c
 80048fc:	20000624 	.word	0x20000624

08004900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <vTaskSuspendAll+0x18>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	4a03      	ldr	r2, [pc, #12]	; (8004918 <vTaskSuspendAll+0x18>)
 800490c:	6013      	str	r3, [r2, #0]
}
 800490e:	bf00      	nop
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000648 	.word	0x20000648

0800491c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800492a:	4b41      	ldr	r3, [pc, #260]	; (8004a30 <xTaskResumeAll+0x114>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <xTaskResumeAll+0x2c>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	603b      	str	r3, [r7, #0]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004948:	f000 fbd8 	bl	80050fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800494c:	4b38      	ldr	r3, [pc, #224]	; (8004a30 <xTaskResumeAll+0x114>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	4a37      	ldr	r2, [pc, #220]	; (8004a30 <xTaskResumeAll+0x114>)
 8004954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <xTaskResumeAll+0x114>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d161      	bne.n	8004a22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800495e:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <xTaskResumeAll+0x118>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d05d      	beq.n	8004a22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004966:	e02e      	b.n	80049c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004968:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <xTaskResumeAll+0x11c>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3318      	adds	r3, #24
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fd5b 	bl	8004430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fd56 	bl	8004430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	2201      	movs	r2, #1
 800498a:	409a      	lsls	r2, r3
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <xTaskResumeAll+0x120>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <xTaskResumeAll+0x120>)
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <xTaskResumeAll+0x124>)
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7ff fce4 	bl	800437a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <xTaskResumeAll+0x128>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <xTaskResumeAll+0x12c>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <xTaskResumeAll+0x11c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cc      	bne.n	8004968 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049d4:	f000 fa18 	bl	8004e08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049d8:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <xTaskResumeAll+0x130>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049e4:	f000 f836 	bl	8004a54 <xTaskIncrementTick>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <xTaskResumeAll+0x12c>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f1      	bne.n	80049e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <xTaskResumeAll+0x130>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <xTaskResumeAll+0x12c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <xTaskResumeAll+0x134>)
 8004a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a22:	f000 fb9b 	bl	800515c <vPortExitCritical>

	return xAlreadyYielded;
 8004a26:	68bb      	ldr	r3, [r7, #8]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000648 	.word	0x20000648
 8004a34:	20000620 	.word	0x20000620
 8004a38:	200005e0 	.word	0x200005e0
 8004a3c:	20000628 	.word	0x20000628
 8004a40:	20000524 	.word	0x20000524
 8004a44:	20000520 	.word	0x20000520
 8004a48:	20000634 	.word	0x20000634
 8004a4c:	20000630 	.word	0x20000630
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a5e:	4b51      	ldr	r3, [pc, #324]	; (8004ba4 <xTaskIncrementTick+0x150>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 808d 	bne.w	8004b82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a68:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <xTaskIncrementTick+0x154>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a70:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <xTaskIncrementTick+0x154>)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d120      	bne.n	8004abe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a7c:	4b4b      	ldr	r3, [pc, #300]	; (8004bac <xTaskIncrementTick+0x158>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <xTaskIncrementTick+0x48>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	603b      	str	r3, [r7, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <xTaskIncrementTick+0x46>
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <xTaskIncrementTick+0x158>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <xTaskIncrementTick+0x15c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a41      	ldr	r2, [pc, #260]	; (8004bac <xTaskIncrementTick+0x158>)
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4a41      	ldr	r2, [pc, #260]	; (8004bb0 <xTaskIncrementTick+0x15c>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b40      	ldr	r3, [pc, #256]	; (8004bb4 <xTaskIncrementTick+0x160>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	4a3f      	ldr	r2, [pc, #252]	; (8004bb4 <xTaskIncrementTick+0x160>)
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	f000 f9a5 	bl	8004e08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004abe:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <xTaskIncrementTick+0x164>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d34d      	bcc.n	8004b64 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac8:	4b38      	ldr	r3, [pc, #224]	; (8004bac <xTaskIncrementTick+0x158>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <xTaskIncrementTick+0x82>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xTaskIncrementTick+0x84>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <xTaskIncrementTick+0x164>)
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae2:	601a      	str	r2, [r3, #0]
					break;
 8004ae4:	e03e      	b.n	8004b64 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ae6:	4b31      	ldr	r3, [pc, #196]	; (8004bac <xTaskIncrementTick+0x158>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d203      	bcs.n	8004b06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004afe:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <xTaskIncrementTick+0x164>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]
						break;
 8004b04:	e02e      	b.n	8004b64 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fc90 	bl	8004430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	3318      	adds	r3, #24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fc87 	bl	8004430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <xTaskIncrementTick+0x168>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <xTaskIncrementTick+0x168>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <xTaskIncrementTick+0x16c>)
 8004b42:	441a      	add	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7ff fc15 	bl	800437a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <xTaskIncrementTick+0x170>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3b4      	bcc.n	8004ac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b62:	e7b1      	b.n	8004ac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <xTaskIncrementTick+0x170>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	4915      	ldr	r1, [pc, #84]	; (8004bc0 <xTaskIncrementTick+0x16c>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d907      	bls.n	8004b8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e004      	b.n	8004b8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <xTaskIncrementTick+0x174>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <xTaskIncrementTick+0x174>)
 8004b8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <xTaskIncrementTick+0x178>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000648 	.word	0x20000648
 8004ba8:	20000624 	.word	0x20000624
 8004bac:	200005d8 	.word	0x200005d8
 8004bb0:	200005dc 	.word	0x200005dc
 8004bb4:	20000638 	.word	0x20000638
 8004bb8:	20000640 	.word	0x20000640
 8004bbc:	20000628 	.word	0x20000628
 8004bc0:	20000524 	.word	0x20000524
 8004bc4:	20000520 	.word	0x20000520
 8004bc8:	20000630 	.word	0x20000630
 8004bcc:	20000634 	.word	0x20000634

08004bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bd6:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <vTaskSwitchContext+0xac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <vTaskSwitchContext+0xb0>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004be4:	e044      	b.n	8004c70 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004be6:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <vTaskSwitchContext+0xb0>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <vTaskSwitchContext+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	f1c3 031f 	rsb	r3, r3, #31
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	4921      	ldr	r1, [pc, #132]	; (8004c88 <vTaskSwitchContext+0xb8>)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	607b      	str	r3, [r7, #4]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <vTaskSwitchContext+0x5a>
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <vTaskSwitchContext+0xb8>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d104      	bne.n	8004c5c <vTaskSwitchContext+0x8c>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <vTaskSwitchContext+0xbc>)
 8004c64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <vTaskSwitchContext+0xbc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	334c      	adds	r3, #76	; 0x4c
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <vTaskSwitchContext+0xc0>)
 8004c6e:	6013      	str	r3, [r2, #0]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000648 	.word	0x20000648
 8004c80:	20000634 	.word	0x20000634
 8004c84:	20000628 	.word	0x20000628
 8004c88:	20000524 	.word	0x20000524
 8004c8c:	20000520 	.word	0x20000520
 8004c90:	20000014 	.word	0x20000014

08004c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c9c:	f000 f852 	bl	8004d44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <prvIdleTask+0x28>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d9f9      	bls.n	8004c9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <prvIdleTask+0x2c>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cb8:	e7f0      	b.n	8004c9c <prvIdleTask+0x8>
 8004cba:	bf00      	nop
 8004cbc:	20000524 	.word	0x20000524
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	e00c      	b.n	8004cea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <prvInitialiseTaskLists+0x60>)
 8004cdc:	4413      	add	r3, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fb20 	bl	8004324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d9ef      	bls.n	8004cd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cf0:	480d      	ldr	r0, [pc, #52]	; (8004d28 <prvInitialiseTaskLists+0x64>)
 8004cf2:	f7ff fb17 	bl	8004324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cf6:	480d      	ldr	r0, [pc, #52]	; (8004d2c <prvInitialiseTaskLists+0x68>)
 8004cf8:	f7ff fb14 	bl	8004324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cfc:	480c      	ldr	r0, [pc, #48]	; (8004d30 <prvInitialiseTaskLists+0x6c>)
 8004cfe:	f7ff fb11 	bl	8004324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d02:	480c      	ldr	r0, [pc, #48]	; (8004d34 <prvInitialiseTaskLists+0x70>)
 8004d04:	f7ff fb0e 	bl	8004324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d08:	480b      	ldr	r0, [pc, #44]	; (8004d38 <prvInitialiseTaskLists+0x74>)
 8004d0a:	f7ff fb0b 	bl	8004324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <prvInitialiseTaskLists+0x78>)
 8004d10:	4a05      	ldr	r2, [pc, #20]	; (8004d28 <prvInitialiseTaskLists+0x64>)
 8004d12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvInitialiseTaskLists+0x7c>)
 8004d16:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <prvInitialiseTaskLists+0x68>)
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000524 	.word	0x20000524
 8004d28:	200005b0 	.word	0x200005b0
 8004d2c:	200005c4 	.word	0x200005c4
 8004d30:	200005e0 	.word	0x200005e0
 8004d34:	200005f4 	.word	0x200005f4
 8004d38:	2000060c 	.word	0x2000060c
 8004d3c:	200005d8 	.word	0x200005d8
 8004d40:	200005dc 	.word	0x200005dc

08004d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d4a:	e019      	b.n	8004d80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d4c:	f000 f9d6 	bl	80050fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <prvCheckTasksWaitingTermination+0x50>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fb67 	bl	8004430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <prvCheckTasksWaitingTermination+0x54>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <prvCheckTasksWaitingTermination+0x54>)
 8004d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <prvCheckTasksWaitingTermination+0x58>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <prvCheckTasksWaitingTermination+0x58>)
 8004d74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d76:	f000 f9f1 	bl	800515c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f810 	bl	8004da0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <prvCheckTasksWaitingTermination+0x58>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e1      	bne.n	8004d4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200005f4 	.word	0x200005f4
 8004d98:	20000620 	.word	0x20000620
 8004d9c:	20000608 	.word	0x20000608

08004da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	334c      	adds	r3, #76	; 0x4c
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fc89 	bl	80056c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d108      	bne.n	8004dce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fb21 	bl	8005408 <vPortFree>
				vPortFree( pxTCB );
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb1e 	bl	8005408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dcc:	e018      	b.n	8004e00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d103      	bne.n	8004de0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fb15 	bl	8005408 <vPortFree>
	}
 8004dde:	e00f      	b.n	8004e00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d00a      	beq.n	8004e00 <prvDeleteTCB+0x60>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60fb      	str	r3, [r7, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <prvDeleteTCB+0x5e>
	}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <prvResetNextTaskUnblockTime+0x40>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <prvResetNextTaskUnblockTime+0x14>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <prvResetNextTaskUnblockTime+0x16>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <prvResetNextTaskUnblockTime+0x44>)
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e2a:	e008      	b.n	8004e3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvResetNextTaskUnblockTime+0x40>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <prvResetNextTaskUnblockTime+0x44>)
 8004e3c:	6013      	str	r3, [r2, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	200005d8 	.word	0x200005d8
 8004e4c:	20000640 	.word	0x20000640

08004e50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e5a:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e60:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fae2 	bl	8004430 <uxListRemove>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4013      	ands	r3, r2
 8004e86:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d10a      	bne.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x58>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	481a      	ldr	r0, [pc, #104]	; (8004f0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ea2:	f7ff fa6a 	bl	800437a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ea6:	e026      	b.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d209      	bcs.n	8004ed4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec0:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7ff fa77 	bl	80043c0 <vListInsert>
}
 8004ed2:	e010      	b.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7ff fa6d 	bl	80043c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d202      	bcs.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ef0:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000624 	.word	0x20000624
 8004f04:	20000520 	.word	0x20000520
 8004f08:	20000628 	.word	0x20000628
 8004f0c:	2000060c 	.word	0x2000060c
 8004f10:	200005dc 	.word	0x200005dc
 8004f14:	200005d8 	.word	0x200005d8
 8004f18:	20000640 	.word	0x20000640

08004f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <pxPortInitialiseStack+0x54>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b14      	subs	r3, #20
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b20      	subs	r3, #32
 8004f62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	08004f75 	.word	0x08004f75

08004f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <prvTaskExitError+0x54>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d00a      	beq.n	8004f9e <prvTaskExitError+0x2a>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	60fb      	str	r3, [r7, #12]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <prvTaskExitError+0x28>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60bb      	str	r3, [r7, #8]
}
 8004fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fb2:	bf00      	nop
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0fc      	beq.n	8004fb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000010 	.word	0x20000010
 8004fcc:	00000000 	.word	0x00000000

08004fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <pxCurrentTCBConst2>)
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	6808      	ldr	r0, [r1, #0]
 8004fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fda:	f380 8809 	msr	PSP, r0
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8811 	msr	BASEPRI, r0
 8004fea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fee:	4770      	bx	lr

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	20000520 	.word	0x20000520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ff8:	4806      	ldr	r0, [pc, #24]	; (8005014 <prvPortStartFirstTask+0x1c>)
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f380 8808 	msr	MSP, r0
 8005002:	b662      	cpsie	i
 8005004:	b661      	cpsie	f
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	df00      	svc	0
 8005010:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005012:	bf00      	nop
 8005014:	e000ed08 	.word	0xe000ed08

08005018 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <xPortStartScheduler+0xd0>)
 8005020:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <xPortStartScheduler+0xd4>)
 8005044:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005048:	2207      	movs	r2, #7
 800504a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800504c:	e009      	b.n	8005062 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3b01      	subs	r3, #1
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005056:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d0ef      	beq.n	800504e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00a      	beq.n	8005090 <xPortStartScheduler+0x78>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60bb      	str	r3, [r7, #8]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005090:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005098:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <xPortStartScheduler+0xd8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <xPortStartScheduler+0xd8>)
 80050a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050c6:	f000 f8b9 	bl	800523c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <xPortStartScheduler+0xe0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050d0:	f7ff ff92 	bl	8004ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050d4:	f7ff fd7c 	bl	8004bd0 <vTaskSwitchContext>
	prvTaskExitError();
 80050d8:	f7ff ff4c 	bl	8004f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	e000e400 	.word	0xe000e400
 80050ec:	2000064c 	.word	0x2000064c
 80050f0:	20000650 	.word	0x20000650
 80050f4:	e000ed20 	.word	0xe000ed20
 80050f8:	20000010 	.word	0x20000010

080050fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	607b      	str	r3, [r7, #4]
}
 8005114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <vPortEnterCritical+0x58>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <vPortEnterCritical+0x58>)
 800511e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <vPortEnterCritical+0x58>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10f      	bne.n	8005148 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <vPortEnterCritical+0x5c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <vPortEnterCritical+0x4c>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	603b      	str	r3, [r7, #0]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vPortEnterCritical+0x4a>
	}
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000010 	.word	0x20000010
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <vPortExitCritical+0x4c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <vPortExitCritical+0x24>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	607b      	str	r3, [r7, #4]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <vPortExitCritical+0x4c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3b01      	subs	r3, #1
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <vPortExitCritical+0x4c>)
 8005188:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <vPortExitCritical+0x4c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <vPortExitCritical+0x42>
 8005192:	2300      	movs	r3, #0
 8005194:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800519c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	20000010 	.word	0x20000010
 80051ac:	00000000 	.word	0x00000000

080051b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051b0:	f3ef 8009 	mrs	r0, PSP
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <pxCurrentTCBConst>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051c0:	6010      	str	r0, [r2, #0]
 80051c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051ca:	f380 8811 	msr	BASEPRI, r0
 80051ce:	f7ff fcff 	bl	8004bd0 <vTaskSwitchContext>
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8811 	msr	BASEPRI, r0
 80051da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	6808      	ldr	r0, [r1, #0]
 80051e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051e6:	f380 8809 	msr	PSP, r0
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	4770      	bx	lr

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000520 	.word	0x20000520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005212:	f7ff fc1f 	bl	8004a54 <xTaskIncrementTick>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <SysTick_Handler+0x40>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <vPortSetupTimerInterrupt+0x30>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <vPortSetupTimerInterrupt+0x38>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a09      	ldr	r2, [pc, #36]	; (8005278 <vPortSetupTimerInterrupt+0x3c>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <vPortSetupTimerInterrupt+0x40>)
 800525a:	3b01      	subs	r3, #1
 800525c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <vPortSetupTimerInterrupt+0x30>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	e000e010 	.word	0xe000e010
 8005270:	e000e018 	.word	0xe000e018
 8005274:	20000004 	.word	0x20000004
 8005278:	10624dd3 	.word	0x10624dd3
 800527c:	e000e014 	.word	0xe000e014

08005280 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	; 0x28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800528c:	f7ff fb38 	bl	8004900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005290:	4b58      	ldr	r3, [pc, #352]	; (80053f4 <pvPortMalloc+0x174>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005298:	f000 f910 	bl	80054bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800529c:	4b56      	ldr	r3, [pc, #344]	; (80053f8 <pvPortMalloc+0x178>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f040 808e 	bne.w	80053c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01d      	beq.n	80052ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052b0:	2208      	movs	r2, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4413      	add	r3, r2
 80052b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d014      	beq.n	80052ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f023 0307 	bic.w	r3, r3, #7
 80052c8:	3308      	adds	r3, #8
 80052ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <pvPortMalloc+0x6c>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	617b      	str	r3, [r7, #20]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d069      	beq.n	80053c6 <pvPortMalloc+0x146>
 80052f2:	4b42      	ldr	r3, [pc, #264]	; (80053fc <pvPortMalloc+0x17c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d864      	bhi.n	80053c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052fc:	4b40      	ldr	r3, [pc, #256]	; (8005400 <pvPortMalloc+0x180>)
 80052fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005300:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <pvPortMalloc+0x180>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005306:	e004      	b.n	8005312 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d903      	bls.n	8005324 <pvPortMalloc+0xa4>
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f1      	bne.n	8005308 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005324:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <pvPortMalloc+0x174>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	429a      	cmp	r2, r3
 800532c:	d04b      	beq.n	80053c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2208      	movs	r2, #8
 8005334:	4413      	add	r3, r2
 8005336:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	2308      	movs	r3, #8
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	429a      	cmp	r2, r3
 800534e:	d91f      	bls.n	8005390 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <pvPortMalloc+0xf8>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	613b      	str	r3, [r7, #16]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 f8f8 	bl	8005580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005390:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <pvPortMalloc+0x17c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	4a18      	ldr	r2, [pc, #96]	; (80053fc <pvPortMalloc+0x17c>)
 800539c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800539e:	4b17      	ldr	r3, [pc, #92]	; (80053fc <pvPortMalloc+0x17c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b18      	ldr	r3, [pc, #96]	; (8005404 <pvPortMalloc+0x184>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d203      	bcs.n	80053b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <pvPortMalloc+0x17c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a15      	ldr	r2, [pc, #84]	; (8005404 <pvPortMalloc+0x184>)
 80053b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <pvPortMalloc+0x178>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053c6:	f7ff faa9 	bl	800491c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <pvPortMalloc+0x16a>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60fb      	str	r3, [r7, #12]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <pvPortMalloc+0x168>
	return pvReturn;
 80053ea:	69fb      	ldr	r3, [r7, #28]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	2000125c 	.word	0x2000125c
 80053f8:	20001268 	.word	0x20001268
 80053fc:	20001260 	.word	0x20001260
 8005400:	20001254 	.word	0x20001254
 8005404:	20001264 	.word	0x20001264

08005408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d048      	beq.n	80054ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800541a:	2308      	movs	r3, #8
 800541c:	425b      	negs	r3, r3
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4413      	add	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <vPortFree+0xac>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4013      	ands	r3, r2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <vPortFree+0x44>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	60fb      	str	r3, [r7, #12]
}
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <vPortFree+0x62>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60bb      	str	r3, [r7, #8]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <vPortFree+0xac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d019      	beq.n	80054ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d115      	bne.n	80054ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <vPortFree+0xac>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	43db      	mvns	r3, r3
 800548a:	401a      	ands	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005490:	f7ff fa36 	bl	8004900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <vPortFree+0xb0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4413      	add	r3, r2
 800549e:	4a06      	ldr	r2, [pc, #24]	; (80054b8 <vPortFree+0xb0>)
 80054a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f000 f86c 	bl	8005580 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054a8:	f7ff fa38 	bl	800491c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ac:	bf00      	nop
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20001268 	.word	0x20001268
 80054b8:	20001260 	.word	0x20001260

080054bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <prvHeapInit+0xac>)
 80054ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3307      	adds	r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <prvHeapInit+0xac>)
 80054ec:	4413      	add	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <prvHeapInit+0xb0>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <prvHeapInit+0xb0>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005508:	2208      	movs	r2, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <prvHeapInit+0xb4>)
 800551c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <prvHeapInit+0xb4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <prvHeapInit+0xb4>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <prvHeapInit+0xb8>)
 800554a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a09      	ldr	r2, [pc, #36]	; (8005578 <prvHeapInit+0xbc>)
 8005552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <prvHeapInit+0xc0>)
 8005556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000654 	.word	0x20000654
 800556c:	20001254 	.word	0x20001254
 8005570:	2000125c 	.word	0x2000125c
 8005574:	20001264 	.word	0x20001264
 8005578:	20001260 	.word	0x20001260
 800557c:	20001268 	.word	0x20001268

08005580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005588:	4b27      	ldr	r3, [pc, #156]	; (8005628 <prvInsertBlockIntoFreeList+0xa8>)
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e002      	b.n	8005594 <prvInsertBlockIntoFreeList+0x14>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d8f7      	bhi.n	800558e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4413      	add	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d108      	bne.n	80055c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d118      	bne.n	8005608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <prvInsertBlockIntoFreeList+0xac>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d00d      	beq.n	80055fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	441a      	add	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e008      	b.n	8005610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <prvInsertBlockIntoFreeList+0xac>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e003      	b.n	8005610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d002      	beq.n	800561e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20001254 	.word	0x20001254
 800562c:	2000125c 	.word	0x2000125c

08005630 <__libc_init_array>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	2600      	movs	r6, #0
 8005634:	4d0c      	ldr	r5, [pc, #48]	; (8005668 <__libc_init_array+0x38>)
 8005636:	4c0d      	ldr	r4, [pc, #52]	; (800566c <__libc_init_array+0x3c>)
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	42a6      	cmp	r6, r4
 800563e:	d109      	bne.n	8005654 <__libc_init_array+0x24>
 8005640:	f000 f8f0 	bl	8005824 <_init>
 8005644:	2600      	movs	r6, #0
 8005646:	4d0a      	ldr	r5, [pc, #40]	; (8005670 <__libc_init_array+0x40>)
 8005648:	4c0a      	ldr	r4, [pc, #40]	; (8005674 <__libc_init_array+0x44>)
 800564a:	1b64      	subs	r4, r4, r5
 800564c:	10a4      	asrs	r4, r4, #2
 800564e:	42a6      	cmp	r6, r4
 8005650:	d105      	bne.n	800565e <__libc_init_array+0x2e>
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	f855 3b04 	ldr.w	r3, [r5], #4
 8005658:	4798      	blx	r3
 800565a:	3601      	adds	r6, #1
 800565c:	e7ee      	b.n	800563c <__libc_init_array+0xc>
 800565e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005662:	4798      	blx	r3
 8005664:	3601      	adds	r6, #1
 8005666:	e7f2      	b.n	800564e <__libc_init_array+0x1e>
 8005668:	08005940 	.word	0x08005940
 800566c:	08005940 	.word	0x08005940
 8005670:	08005940 	.word	0x08005940
 8005674:	08005944 	.word	0x08005944

08005678 <__retarget_lock_acquire_recursive>:
 8005678:	4770      	bx	lr

0800567a <__retarget_lock_release_recursive>:
 800567a:	4770      	bx	lr

0800567c <memcpy>:
 800567c:	440a      	add	r2, r1
 800567e:	4291      	cmp	r1, r2
 8005680:	f100 33ff 	add.w	r3, r0, #4294967295
 8005684:	d100      	bne.n	8005688 <memcpy+0xc>
 8005686:	4770      	bx	lr
 8005688:	b510      	push	{r4, lr}
 800568a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568e:	4291      	cmp	r1, r2
 8005690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005694:	d1f9      	bne.n	800568a <memcpy+0xe>
 8005696:	bd10      	pop	{r4, pc}

08005698 <memset>:
 8005698:	4603      	mov	r3, r0
 800569a:	4402      	add	r2, r0
 800569c:	4293      	cmp	r3, r2
 800569e:	d100      	bne.n	80056a2 <memset+0xa>
 80056a0:	4770      	bx	lr
 80056a2:	f803 1b01 	strb.w	r1, [r3], #1
 80056a6:	e7f9      	b.n	800569c <memset+0x4>

080056a8 <cleanup_glue>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	460c      	mov	r4, r1
 80056ac:	6809      	ldr	r1, [r1, #0]
 80056ae:	4605      	mov	r5, r0
 80056b0:	b109      	cbz	r1, 80056b6 <cleanup_glue+0xe>
 80056b2:	f7ff fff9 	bl	80056a8 <cleanup_glue>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056be:	f000 b869 	b.w	8005794 <_free_r>
	...

080056c4 <_reclaim_reent>:
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <_reclaim_reent+0xb4>)
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4604      	mov	r4, r0
 80056cc:	4283      	cmp	r3, r0
 80056ce:	d051      	beq.n	8005774 <_reclaim_reent+0xb0>
 80056d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056d2:	b143      	cbz	r3, 80056e6 <_reclaim_reent+0x22>
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d14a      	bne.n	8005770 <_reclaim_reent+0xac>
 80056da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056dc:	6819      	ldr	r1, [r3, #0]
 80056de:	b111      	cbz	r1, 80056e6 <_reclaim_reent+0x22>
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 f857 	bl	8005794 <_free_r>
 80056e6:	6961      	ldr	r1, [r4, #20]
 80056e8:	b111      	cbz	r1, 80056f0 <_reclaim_reent+0x2c>
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f852 	bl	8005794 <_free_r>
 80056f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056f2:	b111      	cbz	r1, 80056fa <_reclaim_reent+0x36>
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 f84d 	bl	8005794 <_free_r>
 80056fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056fc:	b111      	cbz	r1, 8005704 <_reclaim_reent+0x40>
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 f848 	bl	8005794 <_free_r>
 8005704:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005706:	b111      	cbz	r1, 800570e <_reclaim_reent+0x4a>
 8005708:	4620      	mov	r0, r4
 800570a:	f000 f843 	bl	8005794 <_free_r>
 800570e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005710:	b111      	cbz	r1, 8005718 <_reclaim_reent+0x54>
 8005712:	4620      	mov	r0, r4
 8005714:	f000 f83e 	bl	8005794 <_free_r>
 8005718:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800571a:	b111      	cbz	r1, 8005722 <_reclaim_reent+0x5e>
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f839 	bl	8005794 <_free_r>
 8005722:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005724:	b111      	cbz	r1, 800572c <_reclaim_reent+0x68>
 8005726:	4620      	mov	r0, r4
 8005728:	f000 f834 	bl	8005794 <_free_r>
 800572c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800572e:	b111      	cbz	r1, 8005736 <_reclaim_reent+0x72>
 8005730:	4620      	mov	r0, r4
 8005732:	f000 f82f 	bl	8005794 <_free_r>
 8005736:	69a3      	ldr	r3, [r4, #24]
 8005738:	b1e3      	cbz	r3, 8005774 <_reclaim_reent+0xb0>
 800573a:	4620      	mov	r0, r4
 800573c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800573e:	4798      	blx	r3
 8005740:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005742:	b1b9      	cbz	r1, 8005774 <_reclaim_reent+0xb0>
 8005744:	4620      	mov	r0, r4
 8005746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800574a:	f7ff bfad 	b.w	80056a8 <cleanup_glue>
 800574e:	5949      	ldr	r1, [r1, r5]
 8005750:	b941      	cbnz	r1, 8005764 <_reclaim_reent+0xa0>
 8005752:	3504      	adds	r5, #4
 8005754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005756:	2d80      	cmp	r5, #128	; 0x80
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	d1f8      	bne.n	800574e <_reclaim_reent+0x8a>
 800575c:	4620      	mov	r0, r4
 800575e:	f000 f819 	bl	8005794 <_free_r>
 8005762:	e7ba      	b.n	80056da <_reclaim_reent+0x16>
 8005764:	680e      	ldr	r6, [r1, #0]
 8005766:	4620      	mov	r0, r4
 8005768:	f000 f814 	bl	8005794 <_free_r>
 800576c:	4631      	mov	r1, r6
 800576e:	e7ef      	b.n	8005750 <_reclaim_reent+0x8c>
 8005770:	2500      	movs	r5, #0
 8005772:	e7ef      	b.n	8005754 <_reclaim_reent+0x90>
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	bf00      	nop
 8005778:	20000014 	.word	0x20000014

0800577c <__malloc_lock>:
 800577c:	4801      	ldr	r0, [pc, #4]	; (8005784 <__malloc_lock+0x8>)
 800577e:	f7ff bf7b 	b.w	8005678 <__retarget_lock_acquire_recursive>
 8005782:	bf00      	nop
 8005784:	2000126c 	.word	0x2000126c

08005788 <__malloc_unlock>:
 8005788:	4801      	ldr	r0, [pc, #4]	; (8005790 <__malloc_unlock+0x8>)
 800578a:	f7ff bf76 	b.w	800567a <__retarget_lock_release_recursive>
 800578e:	bf00      	nop
 8005790:	2000126c 	.word	0x2000126c

08005794 <_free_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4605      	mov	r5, r0
 8005798:	2900      	cmp	r1, #0
 800579a:	d040      	beq.n	800581e <_free_r+0x8a>
 800579c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a0:	1f0c      	subs	r4, r1, #4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bfb8      	it	lt
 80057a6:	18e4      	addlt	r4, r4, r3
 80057a8:	f7ff ffe8 	bl	800577c <__malloc_lock>
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <_free_r+0x8c>)
 80057ae:	6813      	ldr	r3, [r2, #0]
 80057b0:	b933      	cbnz	r3, 80057c0 <_free_r+0x2c>
 80057b2:	6063      	str	r3, [r4, #4]
 80057b4:	6014      	str	r4, [r2, #0]
 80057b6:	4628      	mov	r0, r5
 80057b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057bc:	f7ff bfe4 	b.w	8005788 <__malloc_unlock>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d908      	bls.n	80057d6 <_free_r+0x42>
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	1821      	adds	r1, r4, r0
 80057c8:	428b      	cmp	r3, r1
 80057ca:	bf01      	itttt	eq
 80057cc:	6819      	ldreq	r1, [r3, #0]
 80057ce:	685b      	ldreq	r3, [r3, #4]
 80057d0:	1809      	addeq	r1, r1, r0
 80057d2:	6021      	streq	r1, [r4, #0]
 80057d4:	e7ed      	b.n	80057b2 <_free_r+0x1e>
 80057d6:	461a      	mov	r2, r3
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	b10b      	cbz	r3, 80057e0 <_free_r+0x4c>
 80057dc:	42a3      	cmp	r3, r4
 80057de:	d9fa      	bls.n	80057d6 <_free_r+0x42>
 80057e0:	6811      	ldr	r1, [r2, #0]
 80057e2:	1850      	adds	r0, r2, r1
 80057e4:	42a0      	cmp	r0, r4
 80057e6:	d10b      	bne.n	8005800 <_free_r+0x6c>
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	4401      	add	r1, r0
 80057ec:	1850      	adds	r0, r2, r1
 80057ee:	4283      	cmp	r3, r0
 80057f0:	6011      	str	r1, [r2, #0]
 80057f2:	d1e0      	bne.n	80057b6 <_free_r+0x22>
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4401      	add	r1, r0
 80057fa:	6011      	str	r1, [r2, #0]
 80057fc:	6053      	str	r3, [r2, #4]
 80057fe:	e7da      	b.n	80057b6 <_free_r+0x22>
 8005800:	d902      	bls.n	8005808 <_free_r+0x74>
 8005802:	230c      	movs	r3, #12
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	e7d6      	b.n	80057b6 <_free_r+0x22>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	1821      	adds	r1, r4, r0
 800580c:	428b      	cmp	r3, r1
 800580e:	bf01      	itttt	eq
 8005810:	6819      	ldreq	r1, [r3, #0]
 8005812:	685b      	ldreq	r3, [r3, #4]
 8005814:	1809      	addeq	r1, r1, r0
 8005816:	6021      	streq	r1, [r4, #0]
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6054      	str	r4, [r2, #4]
 800581c:	e7cb      	b.n	80057b6 <_free_r+0x22>
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20001270 	.word	0x20001270

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
